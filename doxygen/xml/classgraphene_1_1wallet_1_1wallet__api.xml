<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classgraphene_1_1wallet_1_1wallet__api" kind="class" language="C++" prot="public">
    <compoundname>graphene::wallet::wallet_api</compoundname>
    <includes refid="wallet_8hpp" local="no">wallet.hpp</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a33146d388f60a77c23ee4d85f949859e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::wallet::wallet_api::set_key_label</definition>
        <argsstring>(public_key_type key, string label)</argsstring>
        <name>set_key_label</name>
        <param>
          <type>public_key_type</type>
          <declname>key</declname>
        </param>
        <param>
          <type>string</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These methods are used for stealth transfers This method can be used to set a label for a public key</para><para><simplesect kind="note"><para>No two keys can have the same label. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>a public key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>a user-defined string as label </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the label was set, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="838" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1397" bodyend="1410"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1af8d216d17b6d39a395960fafc02a44c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::wallet::wallet_api::get_key_label</definition>
        <argsstring>(public_key_type key) const </argsstring>
        <name>get_key_label</name>
        <param>
          <type>public_key_type</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get label of a public key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>a public key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the label if already set by <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a33146d388f60a77c23ee4d85f949859e" kindref="member">set_key_label()</ref></computeroutput>, or an empty string if not set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="845" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1374" bodyend="1380"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a85d711119140bbe2ff73599baee48866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>public_key_type</type>
        <definition>public_key_type graphene::wallet::wallet_api::create_blind_account</definition>
        <argsstring>(string label, string brain_key)</argsstring>
        <name>create_blind_account</name>
        <param>
          <type>string</type>
          <declname>label</declname>
        </param>
        <param>
          <type>string</type>
          <declname>brain_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generates a new blind account for the given brain key and assigns it the given label. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>a label </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>brain_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the brain key to be used to generate a new blind account </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the public key of the new account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="853" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1430" bodyend="1448"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a3d11320f5123684b2855685021372d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>vector&lt; asset &gt; graphene::wallet::wallet_api::get_blind_balances</definition>
        <argsstring>(string key_or_label)</argsstring>
        <name>get_blind_balances</name>
        <param>
          <type>string</type>
          <declname>key_or_label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the total balances of all blinded commitments that can be claimed by the given account key or label. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_or_label</parametername>
</parameternamelist>
<parameterdescription>
<para>a public key in Base58 format or a label </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the total balances of all blinded commitments that can be claimed by the given account key or label </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="862" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1450" bodyend="1481"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aa7105abcc8f5f3541f328bbe8a7fed16" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, public_key_type &gt;</type>
        <definition>map&lt; string, public_key_type &gt; graphene::wallet::wallet_api::get_blind_accounts</definition>
        <argsstring>() const </argsstring>
        <name>get_blind_accounts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get all blind accounts. <simplesect kind="return"><para>all blind accounts </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="867" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1411" bodyend="1417"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a4b1af6cb547f5dd40976b7d9c8a54035" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, public_key_type &gt;</type>
        <definition>map&lt; string, public_key_type &gt; graphene::wallet::wallet_api::get_my_blind_accounts</definition>
        <argsstring>() const </argsstring>
        <name>get_my_blind_accounts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get all blind accounts for which this wallet has the private key. <simplesect kind="return"><para>all blind accounts for which this wallet has the private key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="872" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1418" bodyend="1428"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a18336179d0c3c63ccac13aaec5fcf1ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>public_key_type</type>
        <definition>public_key_type graphene::wallet::wallet_api::get_public_key</definition>
        <argsstring>(string label) const </argsstring>
        <name>get_public_key</name>
        <param>
          <type>string</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the public key associated with a given label. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>label</parametername>
</parameternamelist>
<parameterdescription>
<para>a label </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the public key associated with the given label </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="878" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1387" bodyend="1395"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classgraphene_1_1wallet_1_1wallet__api_1a333834072c4aaa8f25d7ea52b39a76bd" prot="public" static="no" mutable="no">
        <type><ref refid="namespacefc_1a6c2f257e2f2f1a64dbdfe8b7b5e0f411" kindref="member">fc::signal</ref>&lt; void(bool)&gt;</type>
        <definition>fc::signal&lt;void(bool)&gt; graphene::wallet::wallet_api::lock_changed</definition>
        <argsstring></argsstring>
        <name>lock_changed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1750" column="1" bodyfile="libraries/wallet/include/graphene/wallet/wallet.hpp" bodystart="1750" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgraphene_1_1wallet_1_1wallet__api_1aeab4e8b61f9c2fce7e69f0da7d2bd14a" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classgraphene_1_1wallet_1_1detail_1_1wallet__api__impl" kindref="compound">detail::wallet_api_impl</ref> &gt;</type>
        <definition>std::shared_ptr&lt;detail::wallet_api_impl&gt; graphene::wallet::wallet_api::my</definition>
        <argsstring></argsstring>
        <name>my</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1751" column="1" bodyfile="libraries/wallet/include/graphene/wallet/wallet.hpp" bodystart="1751" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a90ce4b5ba822654ad14a096ac4814fe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>graphene::wallet::wallet_api::wallet_api</definition>
        <argsstring>(const wallet_data &amp;initial_data, fc::api&lt; login_api &gt; rapi)</argsstring>
        <name>wallet_api</name>
        <param>
          <type>const <ref refid="structgraphene_1_1wallet_1_1wallet__data" kindref="compound">wallet_data</ref> &amp;</type>
          <declname>initial_data</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1api" kindref="compound">fc::api</ref>&lt; <ref refid="classgraphene_1_1app_1_1login__api" kindref="compound">login_api</ref> &gt;</type>
          <declname>rapi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="53" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a78315fd1d0d042032b2ceba25d5dc07d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>graphene::wallet::wallet_api::~wallet_api</definition>
        <argsstring>()</argsstring>
        <name>~wallet_api</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="54" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="159" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a3b0edcbb6c620a617dbd0368eaba258a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::wallet::wallet_api::copy_wallet_file</definition>
        <argsstring>(string destination_filename)</argsstring>
        <name>copy_wallet_file</name>
        <param>
          <type>string</type>
          <declname>destination_filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="56" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="163" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a68486a7124976524f0809d5b466f7c56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">fc::ecc::private_key</ref></type>
        <definition>fc::ecc::private_key graphene::wallet::wallet_api::derive_private_key</definition>
        <argsstring>(const std::string &amp;prefix_string, int sequence_number) const </argsstring>
        <name>derive_private_key</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>prefix_string</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sequence_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="58" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="755" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1af68da8c88a5d85ffa0bab63e0bc0a189" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
        <definition>variant graphene::wallet::wallet_api::info</definition>
        <argsstring>()</argsstring>
        <name>info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns info about head block, chain_id, maintenance, participation, current active witnesses and committee members. <simplesect kind="return"><para>runtime info about the blockchain </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="64" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="745" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a031e794f42365f2f9bc6fb89eefa7586" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>variant_object</type>
        <definition>variant_object graphene::wallet::wallet_api::about</definition>
        <argsstring>() const </argsstring>
        <name>about</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns info such as client version, git version of graphene/fc, version of boost, openssl. <simplesect kind="return"><para>compile time info and client and dependencies versions </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="68" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="750" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a16ade564115023fe9c2e4f88f0d3ddc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optional&lt; <ref refid="structgraphene_1_1wallet_1_1signed__block__with__info" kindref="compound">signed_block_with_info</ref> &gt;</type>
        <definition>optional&lt; signed_block_with_info &gt; graphene::wallet::wallet_api::get_block</definition>
        <argsstring>(uint32_t num)</argsstring>
        <name>get_block</name>
        <param>
          <type>uint32_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns info about a specified block. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num</parametername>
</parameternamelist>
<parameterdescription>
<para>height of the block to retrieve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>info about the block, or null if not found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="73" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aff94b2efa8e9e414aa08374769315cf6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::wallet::wallet_api::get_account_count</definition>
        <argsstring>() const </argsstring>
        <name>get_account_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of accounts registered on the blockchain <simplesect kind="return"><para>the number of registered accounts </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="77" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1acc5f625ee9aa8ba0685eb2a52b330b27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref> &gt;</type>
        <definition>vector&lt; account_object &gt; graphene::wallet::wallet_api::list_my_accounts</definition>
        <argsstring>()</argsstring>
        <name>list_my_accounts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lists all accounts controlled by this wallet. This returns a list of the full account objects for all accounts whose private keys we possess. <simplesect kind="return"><para>a list of account objects </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="83" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ade01cfbd19d3aa965d96ce4931880e40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, account_id_type &gt;</type>
        <definition>map&lt; string, account_id_type &gt; graphene::wallet::wallet_api::list_accounts</definition>
        <argsstring>(const string &amp;lowerbound, uint32_t limit)</argsstring>
        <name>list_accounts</name>
        <param>
          <type>const string &amp;</type>
          <declname>lowerbound</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lists all accounts registered in the blockchain. This returns a list of all account names and their account ids, sorted by account name.</para><para>Use the <computeroutput>lowerbound</computeroutput> and limit parameters to page through the list. To retrieve all accounts, start by setting <computeroutput>lowerbound</computeroutput> to the empty string <computeroutput>&quot;&quot;</computeroutput>, and then each iteration, pass the last account name returned as the <computeroutput>lowerbound</computeroutput> for the next <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1ade01cfbd19d3aa965d96ce4931880e40" kindref="member">list_accounts()</ref></computeroutput> call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lowerbound</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the first account to return. If the named account does not exist, the list will start at the account that comes after <computeroutput>lowerbound</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of accounts to return (max: 1000) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a list of accounts mapping account names to account ids </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="96" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="183" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a36320ec4d8646bf2149bb4e383b291b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &gt;</type>
        <definition>vector&lt; asset &gt; graphene::wallet::wallet_api::list_account_balances</definition>
        <argsstring>(const string &amp;id)</argsstring>
        <name>list_account_balances</name>
        <param>
          <type>const string &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List the balances of an account. Each account can have multiple balances, one for each type of asset owned by that account. The returned list will only contain assets for which the account has a nonzero balance <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account whose balances you want </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a list of the given account&apos;s balances </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="104" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a623e5f810219db8bdecd897a8e646d43" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref> &gt;</type>
        <definition>vector&lt; extended_asset_object &gt; graphene::wallet::wallet_api::list_assets</definition>
        <argsstring>(const string &amp;lowerbound, uint32_t limit) const </argsstring>
        <name>list_assets</name>
        <param>
          <type>const string &amp;</type>
          <declname>lowerbound</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lists all assets registered on the blockchain.</para><para>To list all assets, pass the empty string <computeroutput>&quot;&quot;</computeroutput> for the lowerbound to start at the beginning of the list, and iterate as necessary.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lowerbound</parametername>
</parameternamelist>
<parameterdescription>
<para>the symbol of the first asset to include in the list. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of assets to return (max: 100) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the list of asset objects, ordered by symbol </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="114" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a621b81a9c9f059f18a550ca07d4a39ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t graphene::wallet::wallet_api::get_asset_count</definition>
        <argsstring>() const </argsstring>
        <name>get_asset_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns assets count registered on the blockchain.</para><para><simplesect kind="return"><para>assets count </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="119" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a61434b0b141c6237e6dd89c0346885ee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1wallet_1_1operation__detail" kindref="compound">operation_detail</ref> &gt;</type>
        <definition>vector&lt; operation_detail &gt; graphene::wallet::wallet_api::get_account_history</definition>
        <argsstring>(string name, int limit) const </argsstring>
        <name>get_account_history</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the most recent operations on the named account.</para><para>This returns a list of operation history objects, which describe activity on the account.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of entries to return (starting from the most recent) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a list of <computeroutput>operation_history_objects</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="129" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="280" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a6079cc173693ccf3f40ac22d2de47410" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1wallet_1_1operation__detail" kindref="compound">operation_detail</ref> &gt;</type>
        <definition>vector&lt; operation_detail &gt; graphene::wallet::wallet_api::get_relative_account_history</definition>
        <argsstring>(string name, uint32_t stop, int limit, uint32_t start) const </argsstring>
        <name>get_relative_account_history</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the relative operations on the named account from start number.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence number of earliest operation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of entries to return </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the sequence number where to start looping back throw the history </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a list of <computeroutput>operation_history_objects</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="139" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="336" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a6148caf19e01e31f805d62c56ba30cbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1full__account" kindref="compound">full_account</ref></type>
        <definition>full_account graphene::wallet::wallet_api::get_full_account</definition>
        <argsstring>(const string &amp;name_or_id)</argsstring>
        <name>get_full_account</name>
        <param>
          <type>const string &amp;</type>
          <declname>name_or_id</declname>
        </param>
        <briefdescription>
<para>Fetch all objects relevant to the specified account. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Must be the name or ID of an account to retrieve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>All info about the specified account</para></simplesect>
This function fetches all relevant objects for the given account. If the string of <computeroutput>name_or_id</computeroutput> cannot be tied to an account, that input will be ignored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="151" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="418" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a99d741652cb0bb283333e4a5c6c83766" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1market__history_1_1bucket__object" kindref="compound">bucket_object</ref> &gt;</type>
        <definition>vector&lt; bucket_object &gt; graphene::wallet::wallet_api::get_market_history</definition>
        <argsstring>(string symbol, string symbol2, uint32_t bucket, fc::time_point_sec start, fc::time_point_sec end) const </argsstring>
        <name>get_market_history</name>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol2</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bucket</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>start</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Get OHLCV data of a trading pair in a time range. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of the base asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol2</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of the quote asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bucket</parametername>
</parameternamelist>
<parameterdescription>
<para>length of each time bucket in seconds. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the start of a time range, E.G. &quot;2018-01-01T00:00:00&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>the end of the time range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of OHLCV data, in &quot;least recent first&quot; order. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="162" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="423" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1af026816d789c452b9e38012bc0b4646f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::wallet::wallet_api::get_account_limit_orders</definition>
        <argsstring>(const string &amp;name_or_id, const string &amp;base, const string &amp;quote, uint32_t limit=101, optional&lt; limit_order_id_type &gt; ostart_id=optional&lt; limit_order_id_type &gt;(), optional&lt; price &gt; ostart_price=optional&lt; price &gt;())</argsstring>
        <name>get_account_limit_orders</name>
        <param>
          <type>const string &amp;</type>
          <declname>name_or_id</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
          <defval>101</defval>
        </param>
        <param>
          <type>optional&lt; limit_order_id_type &gt;</type>
          <declname>ostart_id</declname>
          <defval>optional&lt; limit_order_id_type &gt;()</defval>
        </param>
        <param>
          <type>optional&lt; price &gt;</type>
          <declname>ostart_price</declname>
          <defval>optional&lt; price &gt;()</defval>
        </param>
        <briefdescription>
<para>Fetch all orders relevant to the specified account sorted descendingly by price. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The name or ID of an account to retrieve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Base asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quote</parametername>
</parameternamelist>
<parameterdescription>
<para>Quote asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The limitation of items each query can fetch (max: 101) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ostart_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Start order id, fetch orders which price are lower than or equal to this order </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ostart_price</parametername>
</parameternamelist>
<parameterdescription>
<para>Fetch orders with price lower than or equal to this price</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>List of orders from <computeroutput>name_or_id</computeroutput> to the corresponding account</para></simplesect>
<simplesect kind="note"><para><orderedlist>
<listitem><para>if <computeroutput>name_or_id</computeroutput> cannot be tied to an account, empty result will be returned</para></listitem><listitem><para><computeroutput>ostart_id</computeroutput> and <computeroutput>ostart_price</computeroutput> can be <computeroutput>null</computeroutput>, if so the api will return the &quot;first page&quot; of orders; if <computeroutput>ostart_id</computeroutput> is specified and valid, its price will be used to do page query preferentially, otherwise the <computeroutput>ostart_price</computeroutput> will be used </para></listitem></orderedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="183" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="433" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a25164d9daf13b626c1afbe2c6c60dd5e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1limit__order__object" kindref="compound">limit_order_object</ref> &gt;</type>
        <definition>vector&lt; limit_order_object &gt; graphene::wallet::wallet_api::get_limit_orders</definition>
        <argsstring>(string a, string b, uint32_t limit) const </argsstring>
        <name>get_limit_orders</name>
        <param>
          <type>string</type>
          <declname>a</declname>
        </param>
        <param>
          <type>string</type>
          <declname>b</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get limit orders in a given market. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of asset being sold </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of asset being purchased </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of orders to retrieve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The limit orders, ordered from least price to greatest </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="197" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="444" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1acd90cfe6b46f2944985bc2b104d646c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1call__order__object" kindref="compound">call_order_object</ref> &gt;</type>
        <definition>vector&lt; call_order_object &gt; graphene::wallet::wallet_api::get_call_orders</definition>
        <argsstring>(string a, uint32_t limit) const </argsstring>
        <name>get_call_orders</name>
        <param>
          <type>string</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get call orders (aka margin positions) for a given asset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the debt asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of orders to retrieve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The call orders, ordered from earliest to be called to latest </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="205" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="449" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a29b8b1e1e30f24dc14b5575124e61b83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1force__settlement__object" kindref="compound">force_settlement_object</ref> &gt;</type>
        <definition>vector&lt; force_settlement_object &gt; graphene::wallet::wallet_api::get_settle_orders</definition>
        <argsstring>(string a, uint32_t limit) const </argsstring>
        <name>get_settle_orders</name>
        <param>
          <type>string</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get forced settlement orders in a given asset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>Symbol or ID of asset being settled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of orders to retrieve </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The settle orders, ordered from earliest settlement date to latest </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="213" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="454" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ab93e82d352c59e25a4d35a42068e7d5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classgraphene_1_1chain_1_1collateral__bid__object" kindref="compound">collateral_bid_object</ref> &gt;</type>
        <definition>vector&lt; collateral_bid_object &gt; graphene::wallet::wallet_api::get_collateral_bids</definition>
        <argsstring>(string asset, uint32_t limit=100, uint32_t start=0) const </argsstring>
        <name>get_collateral_bids</name>
        <param>
          <type>string</type>
          <declname>asset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
          <defval>100</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the collateral_bid object for the given MPA</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of entries to return </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the sequence number where to start looping back throw the history </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a list of <computeroutput>collateral_bid_objects</computeroutput> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="222" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="459" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a85481b478b00eec558b21e43b917738f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1global__property__object" kindref="compound">global_property_object</ref></type>
        <definition>global_property_object graphene::wallet::wallet_api::get_global_properties</definition>
        <argsstring>() const </argsstring>
        <name>get_global_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the block chain&apos;s slowly-changing settings. This object contains all of the properties of the blockchain that are fixed or that change only once per maintenance interval (daily) such as the current list of witnesses, committee_members, block interval, etc. <simplesect kind="see"><para><computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1ab050f5ee3b059a96f9a13878b671b2bf" kindref="member">get_dynamic_global_properties()</ref></computeroutput> for frequently changing properties </para></simplesect>
<simplesect kind="return"><para>the global properties </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="231" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1112" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a8198534910a41929ea401923b557a355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1wallet_1_1account__history__operation__detail" kindref="compound">account_history_operation_detail</ref></type>
        <definition>account_history_operation_detail graphene::wallet::wallet_api::get_account_history_by_operations</definition>
        <argsstring>(string name, flat_set&lt; uint16_t &gt; operation_types, uint32_t start, int limit)</argsstring>
        <name>get_account_history_by_operations</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>flat_set&lt; uint16_t &gt;</type>
          <declname>operation_types</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get operations relevant to the specified account filtering by operation type, with transaction id</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account, whose history shoulde be queried </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation_types</parametername>
</parameternamelist>
<parameterdescription>
<para>The IDs of the operation we want to get operations in the account ( 0 = transfer , 1 = limit order create, ...) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>the sequence number where to start looping back throw the history </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>the max number of entries to return (from start number) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structgraphene_1_1wallet_1_1account__history__operation__detail" kindref="compound">account_history_operation_detail</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="243" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="374" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ab050f5ee3b059a96f9a13878b671b2bf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1dynamic__global__property__object" kindref="compound">dynamic_global_property_object</ref></type>
        <definition>dynamic_global_property_object graphene::wallet::wallet_api::get_dynamic_global_properties</definition>
        <argsstring>() const </argsstring>
        <name>get_dynamic_global_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the block chain&apos;s rapidly-changing properties. The returned object contains information that changes every block interval such as the head block number, the next witness, etc. <simplesect kind="see"><para><computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a85481b478b00eec558b21e43b917738f" kindref="member">get_global_properties()</ref></computeroutput> for less-frequently changing properties </para></simplesect>
<simplesect kind="return"><para>the dynamic global properties </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="253" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1117" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a479f699f7b704636e80a44bf8397d341" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1account__object" kindref="compound">account_object</ref></type>
        <definition>account_object graphene::wallet::wallet_api::get_account</definition>
        <argsstring>(string account_name_or_id) const </argsstring>
        <name>get_account</name>
        <param>
          <type>string</type>
          <declname>account_name_or_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns information about the given account.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or ID of the account to provide information about </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the public account data stored in the blockchain </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="260" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="569" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a14e3f7632e2d69ac100ce8525cd3784f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1extended__asset__object" kindref="compound">extended_asset_object</ref></type>
        <definition>extended_asset_object graphene::wallet::wallet_api::get_asset</definition>
        <argsstring>(string asset_name_or_id) const </argsstring>
        <name>get_asset</name>
        <param>
          <type>string</type>
          <declname>asset_name_or_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns information about the given asset. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the symbol or id of the asset in question </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the information about the asset stored in the block chain </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="266" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="574" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a5884b3a9407f8dc7ab08fdf301972ebd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1asset__bitasset__data__object" kindref="compound">asset_bitasset_data_object</ref></type>
        <definition>asset_bitasset_data_object graphene::wallet::wallet_api::get_bitasset_data</definition>
        <argsstring>(string asset_name_or_id) const </argsstring>
        <name>get_bitasset_data</name>
        <param>
          <type>string</type>
          <declname>asset_name_or_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the BitAsset-specific data for a given asset. Market-issued assets&apos;s behavior are determined both by their &quot;BitAsset Data&quot; and their basic asset data, as returned by <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a14e3f7632e2d69ac100ce8525cd3784f" kindref="member">get_asset()</ref></computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the symbol or id of the BitAsset in question </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the BitAsset-specific data for this asset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="274" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="581" bodyend="586"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a64ac5c974a7d5f1d921c78ddd892981f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &gt;</type>
        <definition>fc::optional&lt; fc::variant &gt; graphene::wallet::wallet_api::get_htlc</definition>
        <argsstring>(string htlc_id) const </argsstring>
        <name>get_htlc</name>
        <param>
          <type>string</type>
          <declname>htlc_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns information about the given HTLC object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>htlc_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the HTLC object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the information about the HTLC object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="281" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="211" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a0aab972c0e2640b5f589ac041c5d8253" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>account_id_type</type>
        <definition>account_id_type graphene::wallet::wallet_api::get_account_id</definition>
        <argsstring>(string account_name_or_id) const </argsstring>
        <name>get_account_id</name>
        <param>
          <type>string</type>
          <declname>account_name_or_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lookup the id of a named account. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or ID of the account to look up </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the id of the named account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="287" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="588" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a2c164acf648bfdcae13c5224c45dfff1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>asset_id_type</type>
        <definition>asset_id_type graphene::wallet::wallet_api::get_asset_id</definition>
        <argsstring>(string asset_name_or_id) const </argsstring>
        <name>get_asset_id</name>
        <param>
          <type>string</type>
          <declname>asset_name_or_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lookup the id of a named asset. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asset_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the symbol or ID of an asset to look up </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the id of the given asset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="294" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="593" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a986966705420db7db5b7744956f763fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
        <definition>variant graphene::wallet::wallet_api::get_object</definition>
        <argsstring>(object_id_type id) const </argsstring>
        <name>get_object</name>
        <param>
          <type>object_id_type</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the blockchain object corresponding to the given id.</para><para>This generic function can be used to retrieve any object from the blockchain that is assigned an ID. Certain types of objects have specialized convenience functions to return their objects <ndash/> e.g., assets have <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a14e3f7632e2d69ac100ce8525cd3784f" kindref="member">get_asset()</ref></computeroutput>, accounts have <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a479f699f7b704636e80a44bf8397d341" kindref="member">get_account()</ref></computeroutput>, but this function will work for any object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the object to return </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the requested object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="307" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="488" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a2ab55fe7127b25f3196729bb354198e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::wallet::wallet_api::get_wallet_filename</definition>
        <argsstring>() const </argsstring>
        <name>get_wallet_filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current wallet filename.</para><para>This is the filename that will be used when automatically saving the wallet.</para><para><simplesect kind="see"><para><ref refid="classgraphene_1_1wallet_1_1wallet__api_1aa5804e1ee29ff8f2c3bcc668ad2bfbcd" kindref="member">set_wallet_filename()</ref> </para></simplesect>
<simplesect kind="return"><para>the wallet filename </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="316" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="493" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ae1843016c140c0c05858c9d68a11cc2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::wallet::wallet_api::get_private_key</definition>
        <argsstring>(public_key_type pubkey) const </argsstring>
        <name>get_private_key</name>
        <param>
          <type>public_key_type</type>
          <declname>pubkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the WIF private key corresponding to a public key. The private key must already be in the wallet. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pubkey</parametername>
</parameternamelist>
<parameterdescription>
<para>a public key in Base58 format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the WIF private key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="324" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1382" bodyend="1385"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a796a8e4cd719edcf5e2c6d2d2cb8b3d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1wallet_1a385c5434f1c4e271cf812627f9ee759a" kindref="member">transaction_handle_type</ref></type>
        <definition>transaction_handle_type graphene::wallet::wallet_api::begin_builder_transaction</definition>
        <argsstring>()</argsstring>
        <name>begin_builder_transaction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new transaction builder. <simplesect kind="return"><para>handle of the new transaction builder </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="332" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="498" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ab5cd568be3fd1c283e0ed2c1fd3c5469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::add_operation_to_builder_transaction</definition>
        <argsstring>(transaction_handle_type transaction_handle, const operation &amp;op)</argsstring>
        <name>add_operation_to_builder_transaction</name>
        <param>
          <type><ref refid="namespacegraphene_1_1wallet_1a385c5434f1c4e271cf812627f9ee759a" kindref="member">transaction_handle_type</ref></type>
          <declname>transaction_handle</declname>
        </param>
        <param>
          <type>const operation &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a new operation to a transaction builder. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transaction_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle of the transaction builder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation in JSON format </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="340" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="503" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ad8cc33d09f58920917736d46ef73d05e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::replace_operation_in_builder_transaction</definition>
        <argsstring>(transaction_handle_type handle, unsigned operation_index, const operation &amp;new_op)</argsstring>
        <name>replace_operation_in_builder_transaction</name>
        <param>
          <type><ref refid="namespacegraphene_1_1wallet_1a385c5434f1c4e271cf812627f9ee759a" kindref="member">transaction_handle_type</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>operation_index</declname>
        </param>
        <param>
          <type>const operation &amp;</type>
          <declname>new_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace an operation in a transaction builder with a new operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle of the transaction builder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operation_index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the old operation in the builder to be replaced </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_op</parametername>
</parameternamelist>
<parameterdescription>
<para>the new operation in JSON format </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="349" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="510" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a5013c612e234e0169a9953c8ee9ce898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::wallet::wallet_api::set_fees_on_builder_transaction</definition>
        <argsstring>(transaction_handle_type handle, string fee_asset=GRAPHENE_SYMBOL)</argsstring>
        <name>set_fees_on_builder_transaction</name>
        <param>
          <type><ref refid="namespacegraphene_1_1wallet_1a385c5434f1c4e271cf812627f9ee759a" kindref="member">transaction_handle_type</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>string</type>
          <declname>fee_asset</declname>
          <defval><ref refid="protocol_2include_2graphene_2protocol_2config_8hpp_1a8c0af75f3a0235a3bc25e19c73fa1f48" kindref="member">GRAPHENE_SYMBOL</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate and update fees for the operations in a transaction builder. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle of the transaction builder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fee_asset</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of an asset that to be used to pay fees </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>total fees </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="360" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="518" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a52d1cc372fd10bc659402400d527d215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1protocol_1_1transaction" kindref="compound">transaction</ref></type>
        <definition>transaction graphene::wallet::wallet_api::preview_builder_transaction</definition>
        <argsstring>(transaction_handle_type handle)</argsstring>
        <name>preview_builder_transaction</name>
        <param>
          <type><ref refid="namespacegraphene_1_1wallet_1a385c5434f1c4e271cf812627f9ee759a" kindref="member">transaction_handle_type</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Show content of a transaction builder. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle of the transaction builder </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="368" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="523" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aaadd5bace87a5db813c3bd78ef1e8529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::sign_builder_transaction</definition>
        <argsstring>(transaction_handle_type transaction_handle, bool broadcast=true)</argsstring>
        <name>sign_builder_transaction</name>
        <param>
          <type><ref refid="namespacegraphene_1_1wallet_1a385c5434f1c4e271cf812627f9ee759a" kindref="member">transaction_handle_type</ref></type>
          <declname>transaction_handle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sign the transaction in a transaction builder and optionally broadcast to the network. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transaction_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle of the transaction builder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to broadcast the signed transaction to the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a signed transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="377" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="528" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1af047e740bd6dc8669e135e1b72a54528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::sign_builder_transaction2</definition>
        <argsstring>(transaction_handle_type transaction_handle, const vector&lt; public_key_type &gt; &amp;signing_keys=vector&lt; public_key_type &gt;(), bool broadcast=true)</argsstring>
        <name>sign_builder_transaction2</name>
        <param>
          <type><ref refid="namespacegraphene_1_1wallet_1a385c5434f1c4e271cf812627f9ee759a" kindref="member">transaction_handle_type</ref></type>
          <declname>transaction_handle</declname>
        </param>
        <param>
          <type>const vector&lt; public_key_type &gt; &amp;</type>
          <declname>signing_keys</declname>
          <defval>vector&lt; public_key_type &gt;()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sign the transaction in a transaction builder and optionally broadcast to the network. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transaction_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle of the transaction builder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signing_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>Keys that must be used when signing the transaction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to broadcast the signed transaction to the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a signed transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="388" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="533" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a5ec9190af98a7f7bb62ac94cd29f6ab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; <ref refid="namespacegraphene_1_1protocol_1a040f9f71bff896e89dc9ee3ff92bb076" kindref="member">transaction_id_type</ref>, signed_transaction &gt;</type>
        <definition>pair&lt; transaction_id_type, signed_transaction &gt; graphene::wallet::wallet_api::broadcast_transaction</definition>
        <argsstring>(signed_transaction tx)</argsstring>
        <name>broadcast_transaction</name>
        <param>
          <type>signed_transaction</type>
          <declname>tx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Broadcast signed transaction <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx</parametername>
</parameternamelist>
<parameterdescription>
<para>signed transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the transaction ID along with the signed transaction. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="396" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="540" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1acd0cbe740362f4b83f3b97f9192039f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::propose_builder_transaction</definition>
        <argsstring>(transaction_handle_type handle, time_point_sec expiration=time_point::now()+fc::minutes(1), uint32_t review_period_seconds=0, bool broadcast=true)</argsstring>
        <name>propose_builder_transaction</name>
        <param>
          <type><ref refid="namespacegraphene_1_1wallet_1a385c5434f1c4e271cf812627f9ee759a" kindref="member">transaction_handle_type</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>time_point_sec</type>
          <declname>expiration</declname>
          <defval>time_point::now()+<ref refid="namespacefc_1ad5b1acda09cd46291dbbbe2e8c31aba3" kindref="member">fc::minutes</ref>(1)</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>review_period_seconds</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a proposal containing the operations in a transaction builder (create a new proposal_create operation, then replace the transaction builder with the new operation), then sign the transaction and optionally broadcast to the network.</para><para>Note: this command is buggy because unable to specify proposer. It will be deprecated in a future release. Please use <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1ad33bc4056cefd13bca5d74f4cc0c017f" kindref="member">propose_builder_transaction2()</ref></computeroutput> instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle of the transaction builder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiration</parametername>
</parameternamelist>
<parameterdescription>
<para>when the proposal will expire </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>review_period_seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>review period of the proposal in seconds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to broadcast the signed transaction to the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a signed transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="414" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="545" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ad33bc4056cefd13bca5d74f4cc0c017f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::propose_builder_transaction2</definition>
        <argsstring>(transaction_handle_type handle, string account_name_or_id, time_point_sec expiration=time_point::now()+fc::minutes(1), uint32_t review_period_seconds=0, bool broadcast=true)</argsstring>
        <name>propose_builder_transaction2</name>
        <param>
          <type><ref refid="namespacegraphene_1_1wallet_1a385c5434f1c4e271cf812627f9ee759a" kindref="member">transaction_handle_type</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>string</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>time_point_sec</type>
          <declname>expiration</declname>
          <defval>time_point::now()+<ref refid="namespacefc_1ad5b1acda09cd46291dbbbe2e8c31aba3" kindref="member">fc::minutes</ref>(1)</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>review_period_seconds</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a proposal containing the operations in a transaction builder (create a new proposal_create operation, then replace the transaction builder with the new operation), then sign the transaction and optionally broadcast to the network.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle of the transaction builder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of the account who would pay fees for creating the proposal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiration</parametername>
</parameternamelist>
<parameterdescription>
<para>when the proposal will expire </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>review_period_seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>review period of the proposal in seconds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to broadcast the signed transaction to the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a signed transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="435" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="554" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a92c1c80c0f7b7176d35a5a910ed7e7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::remove_builder_transaction</definition>
        <argsstring>(transaction_handle_type handle)</argsstring>
        <name>remove_builder_transaction</name>
        <param>
          <type><ref refid="namespacegraphene_1_1wallet_1a385c5434f1c4e271cf812627f9ee759a" kindref="member">transaction_handle_type</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy a transaction builder. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>handle of the transaction builder </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="449" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="564" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a1c25bb3451d9d7c22970330d3eb94442" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::wallet::wallet_api::is_new</definition>
        <argsstring>() const </argsstring>
        <name>is_new</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether the wallet has just been created and has not yet had a password set.</para><para>Calling <computeroutput>set_password</computeroutput> will transition the wallet to the locked state. <simplesect kind="return"><para>true if the wallet is new </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="457" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1234" bodyend="1237"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ac9e44c26f1c4a0e447c94b503095ef57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::wallet::wallet_api::is_locked</definition>
        <argsstring>() const </argsstring>
        <name>is_locked</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether the wallet is locked (is unable to use its private keys).</para><para>This state can be changed by calling <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a5e7950c9039f0c59e1266d6732d94e09" kindref="member">lock()</ref></computeroutput> or <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1ae16994a63cfdef1616b6b968117fd29d" kindref="member">unlock()</ref></computeroutput>. <simplesect kind="return"><para>true if the wallet is locked </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="465" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1230" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a5e7950c9039f0c59e1266d6732d94e09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locks the wallet immediately. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="470" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1244" bodyend="1253"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ae16994a63cfdef1616b6b968117fd29d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::unlock</definition>
        <argsstring>(string password)</argsstring>
        <name>unlock</name>
        <param>
          <type>string</type>
          <declname>password</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlocks the wallet.</para><para>The wallet remain unlocked until the <computeroutput>lock</computeroutput> is called or the program exits.</para><para>When used in command line, if typed &quot;unlock&quot; without a password followed, the user will be prompted to input a password without echo.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>the password previously set with <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a2a5d174ec4fde8633b8e962fabc00804" kindref="member">set_password()</ref></computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="483" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1255" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a2a5d174ec4fde8633b8e962fabc00804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::set_password</definition>
        <argsstring>(string password)</argsstring>
        <name>set_password</name>
        <param>
          <type>string</type>
          <declname>password</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a new password on the wallet.</para><para>The wallet must be either &apos;new&apos; or &apos;unlocked&apos; to execute this command.</para><para>When used in command line, if typed &quot;set_password&quot; without a password followed, the user will be prompted to input a password without echo.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>a new password </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="496" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1267" bodyend="1273"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a98369ea6e10699066c7beb181996a219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; public_key_type, string &gt;</type>
        <definition>map&lt; public_key_type, string &gt; graphene::wallet::wallet_api::dump_private_keys</definition>
        <argsstring>()</argsstring>
        <name>dump_private_keys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dumps all private keys owned by the wallet.</para><para>The keys are printed in WIF format. You can import these keys into another wallet using <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a45e93f4a83143cb8ec6a09b67f91f4bb" kindref="member">import_key()</ref></computeroutput> <simplesect kind="return"><para>a map containing the private keys, indexed by their public key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="504" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1283" bodyend="1287"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1adbae0438ea4f0d49b5910cfab35e7f5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::wallet::wallet_api::help</definition>
        <argsstring>() const </argsstring>
        <name>help</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a list of all commands supported by the wallet API.</para><para>This lists each command, along with its arguments and return types. For more detailed help on a single command, use <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1ab3287df20de1e203f0377f244408ee05" kindref="member">gethelp()</ref></computeroutput> </para><para><simplesect kind="return"><para>a multi-line string suitable for displaying on a terminal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="513" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1128" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ab3287df20de1e203f0377f244408ee05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::wallet::wallet_api::gethelp</definition>
        <argsstring>(const string &amp;method) const </argsstring>
        <name>gethelp</name>
        <param>
          <type>const string &amp;</type>
          <declname>method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns detailed help on a single API command. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>method</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the API command you want help with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a multi-line string suitable for displaying on a terminal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="519" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1146" bodyend="1207"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ae07628816935423a1fed072fc28b54f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::wallet::wallet_api::load_wallet_file</definition>
        <argsstring>(string wallet_filename=&quot;&quot;)</argsstring>
        <name>load_wallet_file</name>
        <param>
          <type>string</type>
          <declname>wallet_filename</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Loads a specified DNA wallet.</para><para>The current wallet is closed before the new wallet is loaded.</para><para><simplesect kind="warning"><para>This does not change the filename that will be used for future wallet writes, so this may cause you to overwrite your original wallet unless you also call <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1aa5804e1ee29ff8f2c3bcc668ad2bfbcd" kindref="member">set_wallet_filename()</ref></computeroutput> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet_filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename of the wallet JSON file to load. If <computeroutput>wallet_filename</computeroutput> is empty, it reloads the existing wallet file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the specified wallet is loaded </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="534" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1209" bodyend="1212"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a98aa6fd434297e5bdaf294bc08893eca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::quit</definition>
        <argsstring>()</argsstring>
        <name>quit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quit from the wallet.</para><para>The current wallet will be closed and saved. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="540" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1214" bodyend="1217"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1addf3cfcb96bd878e6c850d3a961de9e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::save_wallet_file</definition>
        <argsstring>(string wallet_filename=&quot;&quot;)</argsstring>
        <name>save_wallet_file</name>
        <param>
          <type>string</type>
          <declname>wallet_filename</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Saves the current wallet to the given filename.</para><para><simplesect kind="warning"><para>This does not change the wallet filename that will be used for future writes, so think of this function as &apos;Save a Copy As...&apos; instead of &apos;Save As...&apos;. Use <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1aa5804e1ee29ff8f2c3bcc668ad2bfbcd" kindref="member">set_wallet_filename()</ref></computeroutput> to make the filename persist. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet_filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename of the new wallet JSON file to create or overwrite. If <computeroutput>wallet_filename</computeroutput> is empty, save to the current filename. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="552" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1219" bodyend="1222"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aa5804e1ee29ff8f2c3bcc668ad2bfbcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::set_wallet_filename</definition>
        <argsstring>(string wallet_filename)</argsstring>
        <name>set_wallet_filename</name>
        <param>
          <type>string</type>
          <declname>wallet_filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the wallet filename used for future writes.</para><para>This does not trigger a save, it only changes the default filename that will be used the next time a save is triggered.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wallet_filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the new filename to use for future saves </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="561" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1003" bodyend="1006"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a3062c701e73acd60c6ffa74ea47c5cc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1wallet_1_1brain__key__info" kindref="compound">brain_key_info</ref></type>
        <definition>brain_key_info graphene::wallet::wallet_api::suggest_brain_key</definition>
        <argsstring>() const </argsstring>
        <name>suggest_brain_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Suggests a safe brain key to use for creating your account. <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1ac27928f7ca6db74e0ec4aee3ff0c545e" kindref="member">create_account_with_brain_key()</ref></computeroutput> requires you to specify a &apos;brain key&apos;, a long passphrase that provides enough entropy to generate cyrptographic keys. This function will suggest a suitably random string that should be easy to write down (and, with effort, memorize). <simplesect kind="return"><para>a suggested brain_key </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="570" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="464" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aa36b1f559efa4930b69df66a8f2139cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1wallet_1_1brain__key__info" kindref="compound">brain_key_info</ref> &gt;</type>
        <definition>vector&lt; brain_key_info &gt; graphene::wallet::wallet_api::derive_owner_keys_from_brain_key</definition>
        <argsstring>(string brain_key, int number_of_desired_keys=1) const </argsstring>
        <name>derive_owner_keys_from_brain_key</name>
        <param>
          <type>string</type>
          <declname>brain_key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_desired_keys</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Derive any number of <emphasis>possible</emphasis> owner keys from a given brain key.</para><para>NOTE: These keys may or may not match with the owner keys of any account. This function is merely intended to assist with account or key recovery.</para><para><simplesect kind="see"><para><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a3062c701e73acd60c6ffa74ea47c5cc1" kindref="member">suggest_brain_key()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>brain_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Brain key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number_of_desired_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of desired keys </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of keys that are deterministically derived from the brainkey </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="584" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="469" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a27682f7e29f1e8dbc93b4a9146be2b2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::wallet::wallet_api::is_public_key_registered</definition>
        <argsstring>(string public_key) const </argsstring>
        <name>is_public_key_registered</name>
        <param>
          <type>string</type>
          <declname>public_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine whether a textual representation of a public key (in Base-58 format) is <emphasis>currently</emphasis> linked to any <emphasis>registered</emphasis> (i.e. non-stealth) account on the blockchain <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>public_key</parametername>
</parameternamelist>
<parameterdescription>
<para>Public key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Whether a public key is known </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="593" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="476" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ae2e94bccc4e0257f5c16b7bd879e85d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::wallet::wallet_api::serialize_transaction</definition>
        <argsstring>(signed_transaction tx) const </argsstring>
        <name>serialize_transaction</name>
        <param>
          <type>signed_transaction</type>
          <declname>tx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a signed_transaction in JSON form to its binary representation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx</parametername>
</parameternamelist>
<parameterdescription>
<para>the transaction to serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the binary form of the transaction. It will not be hex encoded, this returns a raw string that may have null characters embedded in it </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="602" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="483" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a45e93f4a83143cb8ec6a09b67f91f4bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::wallet::wallet_api::import_key</definition>
        <argsstring>(string account_name_or_id, string wif_key)</argsstring>
        <name>import_key</name>
        <param>
          <type>string</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>string</type>
          <declname>wif_key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Imports the private key for an existing account.</para><para>The private key must match either an owner key or an active key for the named account.</para><para><simplesect kind="see"><para><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a98369ea6e10699066c7beb181996a219" kindref="member">dump_private_keys()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the account owning the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wif_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the private key in WIF format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the key was imported </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="615" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="598" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a3e40e2e27d9b153fd411a7cc181ce39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, bool &gt;</type>
        <definition>map&lt; string, bool &gt; graphene::wallet::wallet_api::import_accounts</definition>
        <argsstring>(string filename, string password)</argsstring>
        <name>import_accounts</name>
        <param>
          <type>string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>string</type>
          <declname>password</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Imports accounts from a DNA 0.x wallet file. Current wallet file must be unlocked to perform the import.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the DNA 0.x wallet file to import </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>the password to encrypt the DNA 0.x wallet file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a map containing the accounts found and whether imported </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="624" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="617" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a51d29f90e8ff286e4bd128a5191fe662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::wallet::wallet_api::import_account_keys</definition>
        <argsstring>(string filename, string password, string src_account_name, string dest_account_name)</argsstring>
        <name>import_account_keys</name>
        <param>
          <type>string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>string</type>
          <declname>password</declname>
        </param>
        <param>
          <type>string</type>
          <declname>src_account_name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>dest_account_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Imports from a DNA 0.x wallet file, find keys that were bound to a given account name on the DNA 0.x chain, rebind them to an account name on the 2.0 chain. Current wallet file must be unlocked to perform the import.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the DNA 0.x wallet file to import </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para>the password to encrypt the DNA 0.x wallet file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_account_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the account on DNA 0.x chain </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest_account_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the account on DNA 2.0 chain, can be same or different to <computeroutput>src_account_name</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether the import has succeeded </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="637" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="689" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ac70989a765d5f84ff3d8d6444a398512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; signed_transaction &gt;</type>
        <definition>vector&lt; signed_transaction &gt; graphene::wallet::wallet_api::import_balance</definition>
        <argsstring>(string account_name_or_id, const vector&lt; string &gt; &amp;wif_keys, bool broadcast)</argsstring>
        <name>import_balance</name>
        <param>
          <type>string</type>
          <declname>account_name_or_id</declname>
        </param>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>wif_keys</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This call will construct transaction(s) that will claim all balances controled by wif_keys and deposit them into the given account.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name_or_id</parametername>
</parameternamelist>
<parameterdescription>
<para>name or ID of an account that to claim balances to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wif_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>private WIF keys of balance objects to claim balances from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="647" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1275" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a8dc203f5755a74eba6e7713ff837eb1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::wallet::wallet_api::normalize_brain_key</definition>
        <argsstring>(string s) const </argsstring>
        <name>normalize_brain_key</name>
        <param>
          <type>string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transforms a brain key to reduce the chance of errors when re-entering the key from memory.</para><para>This takes a user-supplied brain key and normalizes it into the form used for generating private keys. In particular, this upper-cases all ASCII characters and collapses multiple spaces into one. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the brain key as supplied by the user </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the brain key in its normalized form </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="658" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="740" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aba1c5e3025f44273fb19e264c2b3ec2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::register_account</definition>
        <argsstring>(string name, public_key_type owner, public_key_type active, string registrar_account, string referrer_account, uint32_t referrer_percent, bool broadcast=false)</argsstring>
        <name>register_account</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>public_key_type</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>public_key_type</type>
          <declname>active</declname>
        </param>
        <param>
          <type>string</type>
          <declname>registrar_account</declname>
        </param>
        <param>
          <type>string</type>
          <declname>referrer_account</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>referrer_percent</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Registers a third party&apos;s account on the blockckain.</para><para>This function is used to register an account for which you do not own the private keys. When acting as a registrar, an end user will generate their own private keys and send you the public keys. The registrar will use this function to register the account on behalf of the end user.</para><para><simplesect kind="see"><para><ref refid="classgraphene_1_1wallet_1_1wallet__api_1ac27928f7ca6db74e0ec4aee3ff0c545e" kindref="member">create_account_with_brain_key()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the account, must be unique on the blockchain. Shorter names are more expensive to register; the rules are still in flux, but in general names of more than 8 characters with at least one digit will be cheap. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>owner</parametername>
</parameternamelist>
<parameterdescription>
<para>the owner key for the new account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>active</parametername>
</parameternamelist>
<parameterdescription>
<para>the active key for the new account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>registrar_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the account which will pay the fee to register the user </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referrer_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the account who is acting as a referrer, and may receive a portion of the user&apos;s transaction fees. This can be the same as the registrar_account if there is no referrer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referrer_percent</parametername>
</parameternamelist>
<parameterdescription>
<para>the percentage (0 - 100) of the new user&apos;s transaction fees not claimed by the blockchain that will be distributed to the referrer; the rest will be sent to the registrar. Will be multiplied by GRAPHENE_1_PERCENT when constructing the transaction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction registering the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="685" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="760" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1af2145755728919d7e4aaf0f02d7c4e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::upgrade_account</definition>
        <argsstring>(string name, bool broadcast)</argsstring>
        <name>upgrade_account</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Upgrades an account to prime status. This makes the account holder a &apos;lifetime member&apos;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account to upgrade </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction upgrading the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="701" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1289" bodyend="1292"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ac27928f7ca6db74e0ec4aee3ff0c545e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::create_account_with_brain_key</definition>
        <argsstring>(string brain_key, string account_name, string registrar_account, string referrer_account, bool broadcast=false)</argsstring>
        <name>create_account_with_brain_key</name>
        <param>
          <type>string</type>
          <declname>brain_key</declname>
        </param>
        <param>
          <type>string</type>
          <declname>account_name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>registrar_account</declname>
        </param>
        <param>
          <type>string</type>
          <declname>referrer_account</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new account and registers it on the blockchain.</para><para><xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>why no referrer_percent here?</para></xrefdescription></xrefsect></para><para><simplesect kind="see"><para><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a3062c701e73acd60c6ffa74ea47c5cc1" kindref="member">suggest_brain_key()</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classgraphene_1_1wallet_1_1wallet__api_1aba1c5e3025f44273fb19e264c2b3ec2f" kindref="member">register_account()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>brain_key</parametername>
</parameternamelist>
<parameterdescription>
<para>the brain key used for generating the account&apos;s private keys </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>account_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the account, must be unique on the blockchain. Shorter names are more expensive to register; the rules are still in flux, but in general names of more than 8 characters with at least one digit will be cheap. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>registrar_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the account which will pay the fee to register the user </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referrer_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the account who is acting as a referrer, and may receive a portion of the user&apos;s transaction fees. This can be the same as the registrar_account if there is no referrer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction registering the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="721" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="771" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a338fc74bb723d9c649f161b5279e41f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::transfer</definition>
        <argsstring>(string from, string to, string amount, string asset_symbol, string memo, bool broadcast=false)</argsstring>
        <name>transfer</name>
        <param>
          <type>string</type>
          <declname>from</declname>
        </param>
        <param>
          <type>string</type>
          <declname>to</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>string</type>
          <declname>asset_symbol</declname>
        </param>
        <param>
          <type>string</type>
          <declname>memo</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transfer an amount from one account to another. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account sending the funds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account receiving the funds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount to send (in nominal units <ndash/> to send half of a DNA, specify 0.5) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the symbol or id of the asset to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memo</parametername>
</parameternamelist>
<parameterdescription>
<para>a memo to attach to the transaction. The memo will be encrypted in the transaction and readable for the receiver. There is no length limit other than the limit imposed by maximum transaction size, but transaction increase with transaction size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction transferring funds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="739" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="786" bodyend="790"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a52bd06d61575ff4cfc208d887db3d8ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>pair&lt; <ref refid="namespacegraphene_1_1protocol_1a040f9f71bff896e89dc9ee3ff92bb076" kindref="member">transaction_id_type</ref>, signed_transaction &gt;</type>
        <definition>pair&lt;transaction_id_type,signed_transaction&gt; graphene::wallet::wallet_api::transfer2</definition>
        <argsstring>(string from, string to, string amount, string asset_symbol, string memo)</argsstring>
        <name>transfer2</name>
        <param>
          <type>string</type>
          <declname>from</declname>
        </param>
        <param>
          <type>string</type>
          <declname>to</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>string</type>
          <declname>asset_symbol</declname>
        </param>
        <param>
          <type>string</type>
          <declname>memo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method works just like transfer, except it always broadcasts and returns the transaction ID (hash) along with the signed transaction. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account sending the funds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account receiving the funds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount to send (in nominal units <ndash/> to send half of a DNA, specify 0.5) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the symbol or id of the asset to send </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memo</parametername>
</parameternamelist>
<parameterdescription>
<para>a memo to attach to the transaction. The memo will be encrypted in the transaction and readable for the receiver. There is no length limit other than the limit imposed by maximum transaction size, but transaction increase with transaction size </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the transaction ID (hash) along with the signed transaction transferring funds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="759" column="1" bodyfile="libraries/wallet/include/graphene/wallet/wallet.hpp" bodystart="759" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ad53d506571c99dff3b8a4adec3fbe232" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegraphene_1_1protocol_1a040f9f71bff896e89dc9ee3ff92bb076" kindref="member">transaction_id_type</ref></type>
        <definition>transaction_id_type graphene::wallet::wallet_api::get_transaction_id</definition>
        <argsstring>(const signed_transaction &amp;trx) const </argsstring>
        <name>get_transaction_id</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>trx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is used to convert a JSON transaction to its transactin ID. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>trx</parametername>
</parameternamelist>
<parameterdescription>
<para>a JSON transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the ID (hash) of the transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="774" column="1" bodyfile="libraries/wallet/include/graphene/wallet/wallet.hpp" bodystart="774" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ab7b2304c5b2f57444e02a7d28b27da5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>memo_data</type>
        <definition>memo_data graphene::wallet::wallet_api::sign_memo</definition>
        <argsstring>(string from, string to, string memo)</argsstring>
        <name>sign_memo</name>
        <param>
          <type>string</type>
          <declname>from</declname>
        </param>
        <param>
          <type>string</type>
          <declname>to</declname>
        </param>
        <param>
          <type>string</type>
          <declname>memo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sign a memo message.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of signing account; or a public key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of receiving account; or a public key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memo</parametername>
</parameternamelist>
<parameterdescription>
<para>text to sign </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed memo data </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="784" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1330" bodyend="1334"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a146f9779a48184ea2b64036f2c6838d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string graphene::wallet::wallet_api::read_memo</definition>
        <argsstring>(const memo_data &amp;memo)</argsstring>
        <name>read_memo</name>
        <param>
          <type>const memo_data &amp;</type>
          <declname>memo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a memo.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memo</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON-enconded memo. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string with decrypted message. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="791" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1336" bodyend="1340"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a95ccdec1dabd343aebc19e3a93ba2370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1wallet_1_1signed__message" kindref="compound">signed_message</ref></type>
        <definition>signed_message graphene::wallet::wallet_api::sign_message</definition>
        <argsstring>(string signer, string message)</argsstring>
        <name>sign_message</name>
        <param>
          <type>string</type>
          <declname>signer</declname>
        </param>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sign a message using an account&apos;s memo key. The signature is generated as in in <ulink url="https://github.com/xeroc/python-graphenelib/blob/d9634d74273ebacc92555499eca7c444217ecba0/graphenecommon/message.py#L64">https://github.com/xeroc/python-graphenelib/blob/d9634d74273ebacc92555499eca7c444217ecba0/graphenecommon/message.py#L64</ulink> .</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signer</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of signing account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>text to sign </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed message in an abstract format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="801" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1342" bodyend="1346"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1af6ef27b2bae5da2e275be804cba04240" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::wallet::wallet_api::verify_message</definition>
        <argsstring>(string message, string account, int block, const string &amp;time, compact_signature sig)</argsstring>
        <name>verify_message</name>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <param>
          <type>string</type>
          <declname>account</declname>
        </param>
        <param>
          <type>int</type>
          <declname>block</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>time</declname>
        </param>
        <param>
          <type>compact_signature</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify a message signed with sign_message using the given account&apos;s memo key.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the message text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>the account name of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block</parametername>
</parameternamelist>
<parameterdescription>
<para>the block number of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>the timestamp of the message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>the message signature </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if signature matches </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="812" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1348" bodyend="1351"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a06a431183349351ccab9ced50b88dd5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::wallet::wallet_api::verify_signed_message</definition>
        <argsstring>(signed_message message)</argsstring>
        <name>verify_signed_message</name>
        <param>
          <type><ref refid="classgraphene_1_1wallet_1_1signed__message" kindref="compound">signed_message</ref></type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify a message signed with sign_message</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classgraphene_1_1wallet_1_1signed__message" kindref="compound">signed_message</ref> structure containing message, meta data and signature </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if signature matches </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="819" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1358" bodyend="1361"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a3dd732b007ff7b833771a839e9833d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::wallet::wallet_api::verify_encapsulated_message</definition>
        <argsstring>(string message)</argsstring>
        <name>verify_encapsulated_message</name>
        <param>
          <type>string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify a message signed with sign_message, in its encapsulated form.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>the complete encapsulated message string including separators and line feeds </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if signature matches </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="826" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1368" bodyend="1371"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a5ff47c6fd55fb231cf5b5a5fe36354b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1wallet_1_1blind__receipt" kindref="compound">blind_receipt</ref> &gt;</type>
        <definition>vector&lt; blind_receipt &gt; graphene::wallet::wallet_api::blind_history</definition>
        <argsstring>(string key_or_account)</argsstring>
        <name>blind_history</name>
        <param>
          <type>string</type>
          <declname>key_or_account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get all blind receipts to/form a particular account <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key_or_account</parametername>
</parameternamelist>
<parameterdescription>
<para>a public key in Base58 format or an account </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>all blind receipts to/form the account </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="886" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1894" bodyend="1910"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aed63fa0d4cbf06a4810e436482f5d5ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1wallet_1_1blind__receipt" kindref="compound">blind_receipt</ref></type>
        <definition>blind_receipt graphene::wallet::wallet_api::receive_blind_transfer</definition>
        <argsstring>(string confirmation_receipt, string opt_from, string opt_memo)</argsstring>
        <name>receive_blind_transfer</name>
        <param>
          <type>string</type>
          <declname>confirmation_receipt</declname>
        </param>
        <param>
          <type>string</type>
          <declname>opt_from</declname>
        </param>
        <param>
          <type>string</type>
          <declname>opt_memo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a confirmation receipt, this method will parse it for a blinded balance and confirm that it exists in the blockchain. If it exists then it will report the amount received and who sent it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>confirmation_receipt</parametername>
</parameternamelist>
<parameterdescription>
<para>a base58 encoded stealth confirmation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt_from</parametername>
</parameternamelist>
<parameterdescription>
<para>if not empty and the sender is a unknown public key, then the unknown public key will be given the label <computeroutput>opt_from</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opt_memo</parametername>
</parameternamelist>
<parameterdescription>
<para>a self-defined label for this transfer to be saved in local wallet file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a blind receipt </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="899" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1817" bodyend="1892"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a6209fb37844e23c339c959a7afe996df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1wallet_1_1blind__confirmation" kindref="compound">blind_confirmation</ref></type>
        <definition>blind_confirmation graphene::wallet::wallet_api::transfer_to_blind</definition>
        <argsstring>(string from_account_id_or_name, string asset_symbol, vector&lt; pair&lt; string, string &gt;&gt; to_amounts, bool broadcast=false)</argsstring>
        <name>transfer_to_blind</name>
        <param>
          <type>string</type>
          <declname>from_account_id_or_name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>asset_symbol</declname>
        </param>
        <param>
          <type>vector&lt; pair&lt; string, string &gt;&gt;</type>
          <declname>to_amounts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transfers a public balance from <computeroutput>from_account_id_or_name</computeroutput> to one or more blinded balances using a stealth transfer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_account_id_or_name</parametername>
</parameternamelist>
<parameterdescription>
<para>ID or name of an account to transfer from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of the asset to be transferred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_amounts</parametername>
</parameternamelist>
<parameterdescription>
<para>map from key or label to amount </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a blind confirmation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>commitments must be in sorted order </para>        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="910" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1730" bodyend="1815"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a8b38899a509b43720d344172323d2069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1wallet_1_1blind__confirmation" kindref="compound">blind_confirmation</ref></type>
        <definition>blind_confirmation graphene::wallet::wallet_api::transfer_from_blind</definition>
        <argsstring>(string from_blind_account_key_or_label, string to_account_id_or_name, string amount, string asset_symbol, bool broadcast=false)</argsstring>
        <name>transfer_from_blind</name>
        <param>
          <type>string</type>
          <declname>from_blind_account_key_or_label</declname>
        </param>
        <param>
          <type>string</type>
          <declname>to_account_id_or_name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>string</type>
          <declname>asset_symbol</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transfers funds from a set of blinded balances to a public account balance. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_blind_account_key_or_label</parametername>
</parameternamelist>
<parameterdescription>
<para>a public key in Base58 format or a label to transfer from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_account_id_or_name</parametername>
</parameternamelist>
<parameterdescription>
<para>ID or name of an account to transfer to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount to be transferred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of the asset to be transferred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a blind confirmation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="924" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1483" bodyend="1542"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a85e46a0471d5f9ae0ea122a70a7ce335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1wallet_1_1blind__confirmation" kindref="compound">blind_confirmation</ref></type>
        <definition>blind_confirmation graphene::wallet::wallet_api::blind_transfer</definition>
        <argsstring>(string from_key_or_label, string to_key_or_label, string amount, string symbol, bool broadcast=false)</argsstring>
        <name>blind_transfer</name>
        <param>
          <type>string</type>
          <declname>from_key_or_label</declname>
        </param>
        <param>
          <type>string</type>
          <declname>to_key_or_label</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Transfer from one set of blinded balances to another. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from_key_or_label</parametername>
</parameternamelist>
<parameterdescription>
<para>a public key in Base58 format or a label to transfer from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to_key_or_label</parametername>
</parameternamelist>
<parameterdescription>
<para>a public key in Base58 format or a label to transfer to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount to be transferred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol or ID of the asset to be transferred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a blind confirmation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="940" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1544" bodyend="1551"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aeb0d71a0ed4c6d05a003e48c3a0cb6d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::sell_asset</definition>
        <argsstring>(string seller_account, string amount_to_sell, string symbol_to_sell, string min_to_receive, string symbol_to_receive, uint32_t timeout_sec=0, bool fill_or_kill=false, bool broadcast=false)</argsstring>
        <name>sell_asset</name>
        <param>
          <type>string</type>
          <declname>seller_account</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount_to_sell</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol_to_sell</declname>
        </param>
        <param>
          <type>string</type>
          <declname>min_to_receive</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol_to_receive</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout_sec</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fill_or_kill</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Place a limit order attempting to sell one asset for another.</para><para>Buying and selling are the same operation on DNA; if you want to buy DNA with USD, you should sell USD for DNA.</para><para>The blockchain will attempt to sell the <computeroutput>symbol_to_sell</computeroutput> for as much <computeroutput>symbol_to_receive</computeroutput> as possible, as long as the price is at least <computeroutput>min_to_receive</computeroutput> / <computeroutput>amount_to_sell</computeroutput>.</para><para>In addition to the transaction fees, market fees will apply as specified by the issuer of both the selling asset and the receiving asset as a percentage of the amount exchanged.</para><para>If either the selling asset or the receiving asset is whitelist restricted, the order will only be created if the seller is on the whitelist of the restricted asset type.</para><para>Market orders are matched in the order they are included in the block chain.</para><para><xrefsect id="todo_1_todo000006"><xreftitle>Todo</xreftitle><xrefdescription><para>Document default/max expiration time</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seller_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the account providing the asset being sold, and which will receive the proceeds of the sale. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount_to_sell</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of the asset being sold to sell (in nominal units) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol_to_sell</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset to sell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_to_receive</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum amount you are willing to receive in return for selling the entire amount_to_sell </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol_to_receive</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset you wish to receive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_sec</parametername>
</parameternamelist>
<parameterdescription>
<para>if the order does not fill immediately, this is the length of time the order will remain on the order books before it is cancelled and the un-spent funds are returned to the seller&apos;s account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fill_or_kill</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the order will only be included in the blockchain if it is filled immediately; if false, an open order will be left on the books to fill any amount that cannot be filled immediately. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction selling the funds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="986" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1294" bodyend="1305"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a289195f6aa33668056993ee3caeceb39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::borrow_asset</definition>
        <argsstring>(string borrower_name, string amount_to_borrow, string asset_symbol, string amount_of_collateral, bool broadcast=false)</argsstring>
        <name>borrow_asset</name>
        <param>
          <type>string</type>
          <declname>borrower_name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount_to_borrow</declname>
        </param>
        <param>
          <type>string</type>
          <declname>asset_symbol</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount_of_collateral</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Borrow an asset or update the debt/collateral ratio for the loan.</para><para>This is the first step in shorting an asset. Call <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1aeb0d71a0ed4c6d05a003e48c3a0cb6d3" kindref="member">sell_asset()</ref></computeroutput> to complete the short.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>borrower_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account associated with the transaction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount_to_borrow</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of the asset being borrowed. Make this value negative to pay back debt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the symbol or id of the asset being borrowed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount_of_collateral</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of the backing asset to add to your collateral position. Make this negative to claim back some of your collateral. The backing asset is defined in the <computeroutput>bitasset_options</computeroutput> for the asset being borrowed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction borrowing the asset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1009" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1307" bodyend="1312"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aada6ee16924870d86f662ccbad9f475a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::borrow_asset_ext</definition>
        <argsstring>(string borrower_name, string amount_to_borrow, string asset_symbol, string amount_of_collateral, call_order_update_operation::extensions_type extensions, bool broadcast=false)</argsstring>
        <name>borrow_asset_ext</name>
        <param>
          <type>string</type>
          <declname>borrower_name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount_to_borrow</declname>
        </param>
        <param>
          <type>string</type>
          <declname>asset_symbol</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount_of_collateral</declname>
        </param>
        <param>
          <type>call_order_update_operation::extensions_type</type>
          <declname>extensions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Borrow an asset or update the debt/collateral ratio for the loan, with additional options.</para><para>This is the first step in shorting an asset. Call <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1aeb0d71a0ed4c6d05a003e48c3a0cb6d3" kindref="member">sell_asset()</ref></computeroutput> to complete the short.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>borrower_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account associated with the transaction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount_to_borrow</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of the asset being borrowed. Make this value negative to pay back debt. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the symbol or id of the asset being borrowed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount_of_collateral</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of the backing asset to add to your collateral position. Make this negative to claim back some of your collateral. The backing asset is defined in the <computeroutput>bitasset_options</computeroutput> for the asset being borrowed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extensions</parametername>
</parameternamelist>
<parameterdescription>
<para>additional options </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction borrowing the asset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1027" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1314" bodyend="1322"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ab525bedb82547d7eafb77106fd26e251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::cancel_order</definition>
        <argsstring>(object_id_type order_id, bool broadcast=false)</argsstring>
        <name>cancel_order</name>
        <param>
          <type>object_id_type</type>
          <declname>order_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cancel an existing order</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>order_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of order to be cancelled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction canceling the order </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1038" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1324" bodyend="1328"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ae3028048916580695639fee8e9d815be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::create_asset</definition>
        <argsstring>(string issuer, string symbol, uint8_t precision, asset_options common, fc::optional&lt; bitasset_options &gt; bitasset_opts, bool broadcast=false)</argsstring>
        <name>create_asset</name>
        <param>
          <type>string</type>
          <declname>issuer</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>asset_options</type>
          <declname>common</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; bitasset_options &gt;</type>
          <declname>bitasset_opts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new user-issued or market-issued asset.</para><para>Many options can be changed later using <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a6c2a57593b39390b286efeecca2702d6" kindref="member">update_asset()</ref></computeroutput> </para><para>Right now this function is difficult to use because you must provide raw JSON data structures for the options objects, and those include prices and asset ids.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>issuer</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account who will pay the fee and become the issuer of the new asset. This can be updated later </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the ticker symbol of the new asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>precision</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of digits of precision to the right of the decimal point, must be less than or equal to 12 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>common</parametername>
</parameternamelist>
<parameterdescription>
<para>asset options required for all new assets. Note that core_exchange_rate technically needs to store the asset ID of this new asset. Since this ID is not known at the time this operation is created, create this price as though the new asset has instance ID 1, and the chain will overwrite it with the new asset&apos;s ID. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitasset_opts</parametername>
</parameternamelist>
<parameterdescription>
<para>options specific to BitAssets. This may be null unless the <computeroutput>market_issued</computeroutput> flag is set in common.flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction creating a new asset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1062" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="791" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ac4ff8075641a7469265122ff9a66e30e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::issue_asset</definition>
        <argsstring>(string to_account, string amount, string symbol, string memo, bool broadcast=false)</argsstring>
        <name>issue_asset</name>
        <param>
          <type>string</type>
          <declname>to_account</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>string</type>
          <declname>memo</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Issue new shares of an asset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>to_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account to receive the new shares </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount to issue, in nominal units </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the ticker symbol of the asset to issue </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memo</parametername>
</parameternamelist>
<parameterdescription>
<para>a memo to include in the transaction, readable by the recipient </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction issuing the new shares </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1078" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="780" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a6c2a57593b39390b286efeecca2702d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::update_asset</definition>
        <argsstring>(string symbol, optional&lt; string &gt; new_issuer, asset_options new_options, bool broadcast=false)</argsstring>
        <name>update_asset</name>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>optional&lt; string &gt;</type>
          <declname>new_issuer</declname>
        </param>
        <param>
          <type>asset_options</type>
          <declname>new_options</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the core options on an asset. There are a number of options which all assets in the network use. These options are enumerated in the asset_object::asset_options struct. This command is used to update these options for an existing asset.</para><para><simplesect kind="note"><para>This operation cannot be used to update BitAsset-specific options. For these options, <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1aebe4459f45a748739595939d60b95b6b" kindref="member">update_bitasset()</ref></computeroutput> instead.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_issuer</parametername>
</parameternamelist>
<parameterdescription>
<para>if changing the asset&apos;s issuer, the name or id of the new issuer. null if you wish to remain the issuer of the asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_options</parametername>
</parameternamelist>
<parameterdescription>
<para>the new asset_options object, which will entirely replace the existing options. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction updating the asset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1099" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="802" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aa42085004d8575c031d2694aad17971f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::update_asset_issuer</definition>
        <argsstring>(string symbol, string new_issuer, bool broadcast=false)</argsstring>
        <name>update_asset_issuer</name>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>string</type>
          <declname>new_issuer</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the issuer of an asset Since this call requires the owner authority of the current issuer to sign the transaction, a separated operation is used to change the issuer. This call simplifies the use of this action.</para><para><simplesect kind="note"><para>This operation requires the owner key to be available in the wallet.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_issuer</parametername>
</parameternamelist>
<parameterdescription>
<para>if changing the asset&apos;s issuer, the name or id of the new issuer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction updating the asset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1115" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="810" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aebe4459f45a748739595939d60b95b6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::update_bitasset</definition>
        <argsstring>(string symbol, bitasset_options new_options, bool broadcast=false)</argsstring>
        <name>update_bitasset</name>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>bitasset_options</type>
          <declname>new_options</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the options specific to a BitAsset.</para><para>BitAssets have some options which are not relevant to other asset types. This operation is used to update those options an an existing BitAsset.</para><para><simplesect kind="see"><para><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a6c2a57593b39390b286efeecca2702d6" kindref="member">update_asset()</ref></para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset to update, which must be a market-issued asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_options</parametername>
</parameternamelist>
<parameterdescription>
<para>the new bitasset_options object, which will entirely replace the existing options. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction updating the bitasset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1132" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="817" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a0ce4b8d15724a5f0d2e94a83288945cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::update_asset_feed_producers</definition>
        <argsstring>(string symbol, flat_set&lt; string &gt; new_feed_producers, bool broadcast=false)</argsstring>
        <name>update_asset_feed_producers</name>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>flat_set&lt; string &gt;</type>
          <declname>new_feed_producers</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the set of feed-producing accounts for a BitAsset.</para><para>BitAssets have price feeds selected by taking the median values of recommendations from a set of feed producers. This command is used to specify which accounts may produce feeds for a given BitAsset. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_feed_producers</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of account names or ids which are authorized to produce feeds for the asset. this list will completely replace the existing list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction updating the bitasset&apos;s feed producers </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1146" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="824" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ad7f049ecc3f83a80c6f27ec4f1a47beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::publish_asset_feed</definition>
        <argsstring>(string publishing_account, string symbol, price_feed feed, bool broadcast=false)</argsstring>
        <name>publish_asset_feed</name>
        <param>
          <type>string</type>
          <declname>publishing_account</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>price_feed</type>
          <declname>feed</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Publishes a price feed for the named asset.</para><para>Price feed providers use this command to publish their price feeds for market-issued assets. A price feed is used to tune the market for a particular market-issued asset. For each value in the feed, the median across all committee_member feeds for that asset is calculated and the market for the asset is configured with the median of that value.</para><para>The feed object in this command contains three prices: a call price limit, a short price limit, and a settlement price. The call limit price is structured as (collateral asset) / (debt asset) and the short limit price is structured as (asset for sale) / (collateral asset). Note that the asset IDs are opposite to eachother, so if we&apos;re publishing a feed for USD, the call limit price will be CORE/USD and the short limit price will be USD/CORE. The settlement price may be flipped either direction, as long as it is a ratio between the market-issued asset and its collateral.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>publishing_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the account publishing the price feed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset whose feed we&apos;re publishing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>feed</parametername>
</parameternamelist>
<parameterdescription>
<para>the price_feed object containing the three prices making up the feed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction updating the price feed for the given asset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1170" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="831" bodyend="837"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a207a4b4afe0cac8c7f797025eb08854e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::fund_asset_fee_pool</definition>
        <argsstring>(string from, string symbol, string amount, bool broadcast=false)</argsstring>
        <name>fund_asset_fee_pool</name>
        <param>
          <type>string</type>
          <declname>from</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pay into the fee pool for the given asset.</para><para>User-issued assets can optionally have a pool of the core asset which is automatically used to pay transaction fees for any transaction using that asset (using the asset&apos;s core exchange rate).</para><para>This command allows anyone to deposit the core asset into this fee pool.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account sending the core asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset whose fee pool you wish to fund </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of the core asset to deposit </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction funding the fee pool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1189" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="839" bodyend="845"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a4dbbe1852eb4ca83a68c798f988c9fb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::claim_asset_fee_pool</definition>
        <argsstring>(string symbol, string amount, bool broadcast=false)</argsstring>
        <name>claim_asset_fee_pool</name>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Claim funds from the fee pool for the given asset.</para><para>User-issued assets can optionally have a pool of the core asset which is automatically used to pay transaction fees for any transaction using that asset (using the asset&apos;s core exchange rate).</para><para>This command allows the issuer to withdraw those funds from the fee pool.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset whose fee pool you wish to claim </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of the core asset to withdraw </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction claiming from the fee pool </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1207" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="847" bodyend="852"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a6c6316f69afc3b8b78b669381fd96159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::reserve_asset</definition>
        <argsstring>(string from, string amount, string symbol, bool broadcast=false)</argsstring>
        <name>reserve_asset</name>
        <param>
          <type>string</type>
          <declname>from</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Burns an amount of given asset.</para><para>This command burns an amount of given asset to reduce the amount in circulation. <simplesect kind="note"><para>you cannot burn market-issued assets. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>the account containing the asset you wish to burn </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount to burn, in nominal units </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset to burn </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction burning the asset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1221" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="854" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ad35610a05a5f4cf0d70fd4d6e8f99937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::global_settle_asset</definition>
        <argsstring>(string symbol, price settle_price, bool broadcast=false)</argsstring>
        <name>global_settle_asset</name>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>price</type>
          <declname>settle_price</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Forces a global settling of the given asset (black swan or prediction markets).</para><para>In order to use this operation, asset_to_settle must have the global_settle flag set</para><para>When this operation is executed all open margin positions are called at the settle price. A pool will be formed containing the collateral got from the margin positions. Users owning an amount of the asset may use <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1a95a3baa4b0c83c1fce14827acbbddd62" kindref="member">settle_asset()</ref></computeroutput> to claim collateral instantly at the settle price from the pool. If this asset is used as backing for other bitassets, those bitassets will not be affected.</para><para><simplesect kind="note"><para>this operation is used only by the asset issuer.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset to globally settle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>settle_price</parametername>
</parameternamelist>
<parameterdescription>
<para>the price at which to settle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction settling the named asset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1243" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="862" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a95a3baa4b0c83c1fce14827acbbddd62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::settle_asset</definition>
        <argsstring>(string account_to_settle, string amount_to_settle, string symbol, bool broadcast=false)</argsstring>
        <name>settle_asset</name>
        <param>
          <type>string</type>
          <declname>account_to_settle</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount_to_settle</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Schedules a market-issued asset for automatic settlement.</para><para>Holders of market-issued assests may request a forced settlement for some amount of their asset. This means that the specified sum will be locked by the chain and held for the settlement period, after which time the chain will choose a margin posision holder and buy the settled asset using the margin&apos;s collateral. The price of this sale will be based on the feed price for the market-issued asset being settled. The exact settlement price will be the feed price at the time of settlement with an offset in favor of the margin position, where the offset is a blockchain parameter set in the global_property_object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_to_settle</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account owning the asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount_to_settle</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of the named asset to schedule for settlement </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the asset to settle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction settling the named asset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1265" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="869" bodyend="875"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ad12176791288314a59387df5d1492b25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::bid_collateral</definition>
        <argsstring>(string bidder_name, string debt_amount, string debt_symbol, string additional_collateral, bool broadcast=false)</argsstring>
        <name>bid_collateral</name>
        <param>
          <type>string</type>
          <declname>bidder_name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>debt_amount</declname>
        </param>
        <param>
          <type>string</type>
          <declname>debt_symbol</declname>
        </param>
        <param>
          <type>string</type>
          <declname>additional_collateral</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates or updates a bid on an MPA after global settlement.</para><para>In order to revive a market-pegged asset after global settlement (aka black swan), investors can bid collateral in order to take over part of the debt and the settlement fund, see BSIP-0018. Updating an existing bid to cover 0 debt will delete the bid.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bidder_name</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account making the bid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>debt_amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of debt of the named asset to bid for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>debt_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the MPA to bid for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>additional_collateral</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of additional collateral to bid for taking over debt_amount. The asset type of this amount is determined automatically from debt_symbol. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction creating/updating the bid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1286" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="877" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aa6483d143fecb817fad3c08ee982bda0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::whitelist_account</definition>
        <argsstring>(string authorizing_account, string account_to_list, account_whitelist_operation::account_listing new_listing_status, bool broadcast=false)</argsstring>
        <name>whitelist_account</name>
        <param>
          <type>string</type>
          <declname>authorizing_account</declname>
        </param>
        <param>
          <type>string</type>
          <declname>account_to_list</declname>
        </param>
        <param>
          <type>account_whitelist_operation::account_listing</type>
          <declname>new_listing_status</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Whitelist and blacklist accounts, primarily for transacting in whitelisted assets.</para><para>Accounts can freely specify opinions about other accounts, in the form of either whitelisting or blacklisting them. This information is used in chain validation only to determine whether an account is authorized to transact in an asset type which enforces a whitelist, but third parties can use this information for other uses as well, as long as it does not conflict with the use of whitelisted assets.</para><para>An asset which enforces a whitelist specifies a list of accounts to maintain its whitelist, and a list of accounts to maintain its blacklist. In order for a given account A to hold and transact in a whitelisted asset S, A must be whitelisted by at least one of S&apos;s whitelist_authorities and blacklisted by none of S&apos;s blacklist_authorities. If A receives a balance of S, and is later removed from the whitelist(s) which allowed it to hold S, or added to any blacklist S specifies as authoritative, A&apos;s balance of S will be frozen until A&apos;s authorization is reinstated.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>authorizing_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the account who is doing the whitelisting </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>account_to_list</parametername>
</parameternamelist>
<parameterdescription>
<para>the account being whitelisted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_listing_status</parametername>
</parameternamelist>
<parameterdescription>
<para>the new whitelisting status </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction changing the whitelisting status </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1309" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="885" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ad0c4d2890ab300fc2388bbe26bf15559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::create_committee_member</definition>
        <argsstring>(string owner_account, string url, bool broadcast=false)</argsstring>
        <name>create_committee_member</name>
        <param>
          <type>string</type>
          <declname>owner_account</declname>
        </param>
        <param>
          <type>string</type>
          <declname>url</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a committee_member object owned by the given account.</para><para>An account can have at most one committee_member object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account which is creating the committee_member </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>a URL to include in the committee_member record in the blockchain. Clients may display this when showing a list of committee_members. May be blank. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction registering a committee_member </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1324" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="893" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ae0cb01b3d7db811587ee51fa1e6c7e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, witness_id_type &gt;</type>
        <definition>map&lt; string, witness_id_type &gt; graphene::wallet::wallet_api::list_witnesses</definition>
        <argsstring>(const string &amp;lowerbound, uint32_t limit)</argsstring>
        <name>list_witnesses</name>
        <param>
          <type>const string &amp;</type>
          <declname>lowerbound</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lists all witnesses registered in the blockchain. This returns a list of all account names that own witnesses, and the associated witness id, sorted by name. This lists witnesses whether they are currently voted in or not.</para><para>Use the <computeroutput>lowerbound</computeroutput> and limit parameters to page through the list. To retrieve all witnesss, start by setting <computeroutput>lowerbound</computeroutput> to the empty string <computeroutput>&quot;&quot;</computeroutput>, and then each iteration, pass the last witness name returned as the <computeroutput>lowerbound</computeroutput> for the next <computeroutput>list_witnesss()</computeroutput> call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lowerbound</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the first witness to return. If the named witness does not exist, the list will start at the witness that comes after <computeroutput>lowerbound</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of witnesss to return (max: 1000) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a list of witnesss mapping witness names to witness ids </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1341" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="899" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ab08449f00d6b4147787b23afa7aa6af6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>map&lt; string, committee_member_id_type &gt;</type>
        <definition>map&lt; string, committee_member_id_type &gt; graphene::wallet::wallet_api::list_committee_members</definition>
        <argsstring>(const string &amp;lowerbound, uint32_t limit)</argsstring>
        <name>list_committee_members</name>
        <param>
          <type>const string &amp;</type>
          <declname>lowerbound</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lists all committee_members registered in the blockchain. This returns a list of all account names that own committee_members, and the associated committee_member id, sorted by name. This lists committee_members whether they are currently voted in or not.</para><para>Use the <computeroutput>lowerbound</computeroutput> and limit parameters to page through the list. To retrieve all committee_members, start by setting <computeroutput>lowerbound</computeroutput> to the empty string <computeroutput>&quot;&quot;</computeroutput>, and then each iteration, pass the last committee_member name returned as the <computeroutput>lowerbound</computeroutput> for the next <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1ab08449f00d6b4147787b23afa7aa6af6" kindref="member">list_committee_members()</ref></computeroutput> call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lowerbound</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the first committee_member to return. If the named committee_member does not exist, the list will start at the committee_member that comes after <computeroutput>lowerbound</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of committee_members to return (max: 1000) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a list of committee_members mapping committee_member names to committee_member ids </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1356" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="904" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a28f755aa12dca82f6e2e948cac014dcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1witness__object" kindref="compound">witness_object</ref></type>
        <definition>witness_object graphene::wallet::wallet_api::get_witness</definition>
        <argsstring>(string owner_account)</argsstring>
        <name>get_witness</name>
        <param>
          <type>string</type>
          <declname>owner_account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns information about the given witness. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the witness account owner, or the id of the witness </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the information about the witness stored in the block chain </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1362" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="909" bodyend="912"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1af7db75896d9b2b2f4c4585172eb7d4e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgraphene_1_1chain_1_1committee__member__object" kindref="compound">committee_member_object</ref></type>
        <definition>committee_member_object graphene::wallet::wallet_api::get_committee_member</definition>
        <argsstring>(string owner_account)</argsstring>
        <name>get_committee_member</name>
        <param>
          <type>string</type>
          <declname>owner_account</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns information about the given committee_member. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the committee_member account owner, or the id of the committee_member </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the information about the committee_member stored in the block chain </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1368" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="914" bodyend="917"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a73d443a0961938c685d29277a0e4830f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::create_witness</definition>
        <argsstring>(string owner_account, string url, bool broadcast=false)</argsstring>
        <name>create_witness</name>
        <param>
          <type>string</type>
          <declname>owner_account</declname>
        </param>
        <param>
          <type>string</type>
          <declname>url</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a witness object owned by the given account.</para><para>An account can have at most one witness object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account which is creating the witness </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>a URL to include in the witness record in the blockchain. Clients may display this when showing a list of witnesses. May be blank. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true to broadcast the transaction on the network </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction registering a witness </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1380" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="919" bodyend="924"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a8246cdc35c58a9776a011505684d66b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::update_witness</definition>
        <argsstring>(string witness_name, string url, string block_signing_key, bool broadcast=false)</argsstring>
        <name>update_witness</name>
        <param>
          <type>string</type>
          <declname>witness_name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>url</declname>
        </param>
        <param>
          <type>string</type>
          <declname>block_signing_key</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update a witness object owned by the given account.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>witness_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the witness&apos;s owner account. Also accepts the ID of the owner account or the ID of the witness. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>Same as for create_witness. The empty string makes it remain the same. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>block_signing_key</parametername>
</parameternamelist>
<parameterdescription>
<para>The new block signing public key. The empty string makes it remain the same. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1394" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="948" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a85d25eaf8c6f749420e93fad46bc79cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::create_worker</definition>
        <argsstring>(string owner_account, time_point_sec work_begin_date, time_point_sec work_end_date, share_type daily_pay, string name, string url, variant worker_settings, bool broadcast=false)</argsstring>
        <name>create_worker</name>
        <param>
          <type>string</type>
          <declname>owner_account</declname>
        </param>
        <param>
          <type>time_point_sec</type>
          <declname>work_begin_date</declname>
        </param>
        <param>
          <type>time_point_sec</type>
          <declname>work_end_date</declname>
        </param>
        <param>
          <type>share_type</type>
          <declname>daily_pay</declname>
        </param>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>url</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
          <declname>worker_settings</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a worker object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>owner_account</parametername>
</parameternamelist>
<parameterdescription>
<para>The account which owns the worker and will be paid </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work_begin_date</parametername>
</parameternamelist>
<parameterdescription>
<para>When the work begins </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>work_end_date</parametername>
</parameternamelist>
<parameterdescription>
<para>When the work ends </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>daily_pay</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of pay per day (NOT per maint interval) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Any text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>url</parametername>
</parameternamelist>
<parameterdescription>
<para>Any text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>worker_settings</parametername>
</parameternamelist>
<parameterdescription>
<para>{&quot;type&quot; : &quot;burn&quot;|&quot;refund&quot;|&quot;vesting&quot;, &quot;pay_vesting_period_days&quot; : x} </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1413" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="926" bodyend="938"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a4af1e9b3a5d70e1b7c5fde6a519cbd24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::update_worker_votes</definition>
        <argsstring>(string account, worker_vote_delta delta, bool broadcast=false)</argsstring>
        <name>update_worker_votes</name>
        <param>
          <type>string</type>
          <declname>account</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1wallet_1_1worker__vote__delta" kindref="compound">worker_vote_delta</ref></type>
          <declname>delta</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update your votes for workers</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>The account which will pay the fee and update votes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>{&quot;vote_for&quot; : [...], &quot;vote_against&quot; : [...], &quot;vote_abstain&quot; : [...]} </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1432" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="940" bodyend="946"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a2d95bc60b5c02386bdfe60a7bee32fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::htlc_create</definition>
        <argsstring>(string source, string destination, string amount, string asset_symbol, string hash_algorithm, const std::string &amp;preimage_hash, uint32_t preimage_size, const uint32_t claim_period_seconds, const std::string &amp;memo, bool broadcast=false)</argsstring>
        <name>htlc_create</name>
        <param>
          <type>string</type>
          <declname>source</declname>
        </param>
        <param>
          <type>string</type>
          <declname>destination</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>string</type>
          <declname>asset_symbol</declname>
        </param>
        <param>
          <type>string</type>
          <declname>hash_algorithm</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>preimage_hash</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>preimage_size</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>claim_period_seconds</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>memo</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a hashed time lock contract</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>The account that will reserve the funds (and pay the fee) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>destination</parametername>
</parameternamelist>
<parameterdescription>
<para>The account that will receive the funds if the preimage is presented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>the amount of the asset that is to be traded </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>The asset that is to be traded </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_algorithm</parametername>
</parameternamelist>
<parameterdescription>
<para>the algorithm used to generate the hash from the preimage. Can be RIPEMD160, SHA1 or SHA256. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preimage_hash</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash of the preimage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>preimage_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the preimage in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>claim_period_seconds</parametername>
</parameternamelist>
<parameterdescription>
<para>how long after creation until the lock expires </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memo</parametername>
</parameternamelist>
<parameterdescription>
<para>the memo </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1453" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="203" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1af34528f4f60d82210c3256433f2aaf18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::htlc_redeem</definition>
        <argsstring>(string htlc_id, string issuer, const std::string &amp;preimage, bool broadcast=false)</argsstring>
        <name>htlc_redeem</name>
        <param>
          <type>string</type>
          <declname>htlc_id</declname>
        </param>
        <param>
          <type>string</type>
          <declname>issuer</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>preimage</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1465" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="267" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ae8f0ab32a3be8f144bb2172ac117fa2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::htlc_extend</definition>
        <argsstring>(string htlc_id, string issuer, const uint32_t seconds_to_add, bool broadcast=false)</argsstring>
        <name>htlc_extend</name>
        <param>
          <type>string</type>
          <declname>htlc_id</declname>
        </param>
        <param>
          <type>string</type>
          <declname>issuer</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>seconds_to_add</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1477" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="274" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1abce0e5c4ae7fa1b93719a5865e3abb61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1wallet_1_1vesting__balance__object__with__info" kindref="compound">vesting_balance_object_with_info</ref> &gt;</type>
        <definition>vector&lt; vesting_balance_object_with_info &gt; graphene::wallet::wallet_api::get_vesting_balances</definition>
        <argsstring>(string account_name)</argsstring>
        <name>get_vesting_balances</name>
        <param>
          <type>string</type>
          <declname>account_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get information about a vesting balance object or vesting balance objects owned by an account.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_name</parametername>
</parameternamelist>
<parameterdescription>
<para>An account name, account ID, or vesting balance object ID. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a list of vesting balance objects with additional info </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1486" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="957" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a72d9316ead7ac6825fbcd62be81e235a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::withdraw_vesting</definition>
        <argsstring>(string witness_name, string amount, string asset_symbol, bool broadcast=false)</argsstring>
        <name>withdraw_vesting</name>
        <param>
          <type>string</type>
          <declname>witness_name</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>string</type>
          <declname>asset_symbol</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Withdraw a vesting balance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>witness_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The account name of the witness, also accepts account ID or vesting balance ID type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount to withdraw. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>asset_symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>The symbol of the asset to withdraw. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1497" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="962" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a9c2be055bd282ff68da3f3ce0f6b95fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::vote_for_committee_member</definition>
        <argsstring>(string voting_account, string committee_member, bool approve, bool broadcast=false)</argsstring>
        <name>vote_for_committee_member</name>
        <param>
          <type>string</type>
          <declname>voting_account</declname>
        </param>
        <param>
          <type>string</type>
          <declname>committee_member</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>approve</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vote for a given committee_member.</para><para>An account can publish a list of all committee_members they approve of. This command allows you to add or remove committee_members from this list. Each account&apos;s vote is weighted according to the number of shares of the core asset owned by that account at the time the votes are tallied.</para><para><simplesect kind="note"><para>you cannot vote against a committee_member, you can only vote for the committee_member or not vote for the committee_member.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voting_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account who is voting with their shares </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>committee_member</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the committee_member&apos; owner account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>approve</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to vote in favor of that committee_member, false to remove your vote in favor of that committee_member </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction changing your vote for the given committee_member </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1520" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="971" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a00370237863a234e2418f191ce006d0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::vote_for_witness</definition>
        <argsstring>(string voting_account, string witness, bool approve, bool broadcast=false)</argsstring>
        <name>vote_for_witness</name>
        <param>
          <type>string</type>
          <declname>voting_account</declname>
        </param>
        <param>
          <type>string</type>
          <declname>witness</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>approve</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Vote for a given witness.</para><para>An account can publish a list of all witnesses they approve of. This command allows you to add or remove witnesses from this list. Each account&apos;s vote is weighted according to the number of shares of the core asset owned by that account at the time the votes are tallied.</para><para><simplesect kind="note"><para>you cannot vote against a witness, you can only vote for the witness or not vote for the witness.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voting_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account who is voting with their shares </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>witness</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the witness&apos; owner account </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>approve</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to vote in favor of that witness, false to remove your vote in favor of that witness </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction changing your vote for the given witness </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1542" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="979" bodyend="985"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a444fd5cc7709e481be463393f78a2253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::set_voting_proxy</definition>
        <argsstring>(string account_to_modify, optional&lt; string &gt; voting_account, bool broadcast=false)</argsstring>
        <name>set_voting_proxy</name>
        <param>
          <type>string</type>
          <declname>account_to_modify</declname>
        </param>
        <param>
          <type>optional&lt; string &gt;</type>
          <declname>voting_account</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the voting proxy for an account.</para><para>If a user does not wish to take an active part in voting, they can choose to allow another account to vote their stake.</para><para>Setting a vote proxy does not remove your previous votes from the blockchain, they remain there but are ignored. If you later null out your vote proxy, your previous votes will take effect again.</para><para>This setting can be changed at any time.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_to_modify</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voting_account</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of an account authorized to vote account_to_modify&apos;s shares, or null to vote your own shares</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction changing your vote proxy settings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1565" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="987" bodyend="992"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a2d6765231f3bf9180ad64c5be085ba60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::set_desired_witness_and_committee_member_count</definition>
        <argsstring>(string account_to_modify, uint16_t desired_number_of_witnesses, uint16_t desired_number_of_committee_members, bool broadcast=false)</argsstring>
        <name>set_desired_witness_and_committee_member_count</name>
        <param>
          <type>string</type>
          <declname>account_to_modify</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>desired_number_of_witnesses</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>desired_number_of_committee_members</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set your vote for the number of witnesses and committee_members in the system.</para><para>Each account can voice their opinion on how many committee_members and how many witnesses there should be in the active committee_member/active witness list. These are independent of each other. You must vote your approval of at least as many committee_members or witnesses as you claim there should be (you can&apos;t say that there should be 20 committee_members but only vote for 10).</para><para>There are maximum values for each set in the blockchain parameters (currently defaulting to 1001).</para><para>This setting can be changed at any time. If your account has a voting proxy set, your preferences will be ignored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account_to_modify</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or id of the account to update </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desired_number_of_witnesses</parametername>
</parameternamelist>
<parameterdescription>
<para>desired number of active witnesses </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desired_number_of_committee_members</parametername>
</parameternamelist>
<parameterdescription>
<para>desired number of active committee members</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction changing your vote proxy settings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1590" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="994" bodyend="1001"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a4c2cfac7553688e32fa64b6f4464142a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::sign_transaction</definition>
        <argsstring>(signed_transaction tx, bool broadcast=false)</argsstring>
        <name>sign_transaction</name>
        <param>
          <type>signed_transaction</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signs a transaction.</para><para>Given a fully-formed transaction that is only lacking signatures, this signs the transaction with the necessary keys and optionally broadcasts the transaction <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx</parametername>
</parameternamelist>
<parameterdescription>
<para>the unsigned transaction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed version of the transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1603" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1008" bodyend="1011"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a242f799046bb5b98f54508709ba20d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::sign_transaction2</definition>
        <argsstring>(signed_transaction tx, const vector&lt; public_key_type &gt; &amp;signing_keys=vector&lt; public_key_type &gt;(), bool broadcast=true)</argsstring>
        <name>sign_transaction2</name>
        <param>
          <type>signed_transaction</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>const vector&lt; public_key_type &gt; &amp;</type>
          <declname>signing_keys</declname>
          <defval>vector&lt; public_key_type &gt;()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signs a transaction.</para><para>Given a fully-formed transaction that is only lacking signatures, this signs the transaction with the inferred necessary keys and the explicitly provided keys, and optionally broadcasts the transaction <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx</parametername>
</parameternamelist>
<parameterdescription>
<para>the unsigned transaction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signing_keys</parametername>
</parameternamelist>
<parameterdescription>
<para>Keys that must be used when signing the transaction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed version of the transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1615" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1013" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a5a1edfa30f224391475ff2a6e37c6098" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>flat_set&lt; public_key_type &gt;</type>
        <definition>flat_set&lt; public_key_type &gt; graphene::wallet::wallet_api::get_transaction_signers</definition>
        <argsstring>(const signed_transaction &amp;tx) const </argsstring>
        <name>get_transaction_signers</name>
        <param>
          <type>const signed_transaction &amp;</type>
          <declname>tx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get transaction signers.</para><para>Returns information about who signed the transaction, specifically, the corresponding public keys of the private keys used to sign the transaction. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx</parametername>
</parameternamelist>
<parameterdescription>
<para>the signed transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the set of public_keys </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1627" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1019" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a8bb894f77e6245f617e3b97246f19259" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; flat_set&lt; account_id_type &gt; &gt;</type>
        <definition>vector&lt; flat_set&lt; account_id_type &gt; &gt; graphene::wallet::wallet_api::get_key_references</definition>
        <argsstring>(const vector&lt; public_key_type &gt; &amp;keys) const </argsstring>
        <name>get_key_references</name>
        <param>
          <type>const vector&lt; public_key_type &gt; &amp;</type>
          <declname>keys</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get key references.</para><para>Returns accounts related to given public keys. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keys</parametername>
</parameternamelist>
<parameterdescription>
<para>public keys to search for related accounts </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the set of related accounts </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1635" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1024" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1af52e5370f7895cb69d5f38427a11dbaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>operation</type>
        <definition>operation graphene::wallet::wallet_api::get_prototype_operation</definition>
        <argsstring>(string operation_type)</argsstring>
        <name>get_prototype_operation</name>
        <param>
          <type>string</type>
          <declname>operation_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an uninitialized object representing a given blockchain operation.</para><para>This returns a default-initialized object of the given type; it can be used during early development of the wallet when we don&apos;t yet have custom commands for creating all of the operations the blockchain supports.</para><para>Any operation the blockchain supports can be created using the transaction builder&apos;s <computeroutput><ref refid="classgraphene_1_1wallet_1_1wallet__api_1ab5cd568be3fd1c283e0ed2c1fd3c5469" kindref="member">add_operation_to_builder_transaction()</ref></computeroutput> , but to do that from the CLI you need to know what the JSON form of the operation looks like. This will give you a template you can fill in. It&apos;s better than nothing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>operation_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of operation to return, must be one of the operations defined in <computeroutput><ref refid="operations_8hpp" kindref="compound">graphene/protocol/operations.hpp</ref></computeroutput> (e.g., &quot;global_parameters_update_operation&quot;) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a default-constructed operation of the given type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1653" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1029" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a2238d380c7d5f2361533f31d996964b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::propose_parameter_change</definition>
        <argsstring>(const string &amp;proposing_account, fc::time_point_sec expiration_time, const variant_object &amp;changed_values, bool broadcast=false)</argsstring>
        <name>propose_parameter_change</name>
        <param>
          <type>const string &amp;</type>
          <declname>proposing_account</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>expiration_time</declname>
        </param>
        <param>
          <type>const variant_object &amp;</type>
          <declname>changed_values</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a transaction to propose a parameter change.</para><para>Multiple parameters can be specified if an atomic change is desired.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proposing_account</parametername>
</parameternamelist>
<parameterdescription>
<para>The account paying the fee to propose the tx </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiration_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp specifying when the proposal will either take effect or expire. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>changed_values</parametername>
</parameternamelist>
<parameterdescription>
<para>The values to change; all other chain parameters are filled in with default values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed version of the transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1666" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1082" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a9716675c16f6bc9c35371e8f2b28ada4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::propose_fee_change</definition>
        <argsstring>(const string &amp;proposing_account, fc::time_point_sec expiration_time, const variant_object &amp;changed_values, bool broadcast=false)</argsstring>
        <name>propose_fee_change</name>
        <param>
          <type>const string &amp;</type>
          <declname>proposing_account</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">fc::time_point_sec</ref></type>
          <declname>expiration_time</declname>
        </param>
        <param>
          <type>const variant_object &amp;</type>
          <declname>changed_values</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Propose a fee change.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proposing_account</parametername>
</parameternamelist>
<parameterdescription>
<para>The account paying the fee to propose the tx </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expiration_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp specifying when the proposal will either take effect or expire. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>changed_values</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of operation type to new fee. Operations may be specified by name or ID. The &quot;scale&quot; key changes the scale. All other operations will maintain current values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed version of the transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1681" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1092" bodyend="1100"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a4d550262671c5d2a3ca8ea76b41722ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::approve_proposal</definition>
        <argsstring>(const string &amp;fee_paying_account, const string &amp;proposal_id, const approval_delta &amp;delta, bool broadcast)</argsstring>
        <name>approve_proposal</name>
        <param>
          <type>const string &amp;</type>
          <declname>fee_paying_account</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>proposal_id</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1wallet_1_1approval__delta" kindref="compound">approval_delta</ref> &amp;</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Approve or disapprove a proposal.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fee_paying_account</parametername>
</parameternamelist>
<parameterdescription>
<para>The account paying the fee for the op. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proposal_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The proposal to modify. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>Members contain approvals to create or remove. In JSON you can leave empty members undefined. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed version of the transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1695" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1102" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1aec509856a009b78f01fed4ad15f8662f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1app_1_1order__book" kindref="compound">order_book</ref></type>
        <definition>order_book graphene::wallet::wallet_api::get_order_book</definition>
        <argsstring>(const string &amp;base, const string &amp;quote, unsigned limit=50)</argsstring>
        <name>get_order_book</name>
        <param>
          <type>const string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>quote</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>limit</declname>
          <defval>50</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the order book for the market base:quote. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the base asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quote</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol name or ID of the quote asset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>depth of the order book to retrieve, for bids and asks each, capped at 50 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Order book of the market </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1709" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1912" bodyend="1915"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a73942cb3f51d64832b550dfaaf59246e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::add_transaction_signature</definition>
        <argsstring>(signed_transaction tx, bool broadcast=false)</argsstring>
        <name>add_transaction_signature</name>
        <param>
          <type>signed_transaction</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signs a transaction.</para><para>Given a fully-formed transaction with or without signatures, signs the transaction with the owned keys and optionally broadcasts the transaction.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tx</parametername>
</parameternamelist>
<parameterdescription>
<para>the unsigned transaction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the signed transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1722" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1122" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a9813f219562a086e2586e0a395aa6b7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::dbg_make_uia</definition>
        <argsstring>(string creator, string symbol)</argsstring>
        <name>dbg_make_uia</name>
        <param>
          <type>string</type>
          <declname>creator</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1725" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1034" bodyend="1038"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1ad37b6842388187c302edde035b373925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::dbg_make_mia</definition>
        <argsstring>(string creator, string symbol)</argsstring>
        <name>dbg_make_mia</name>
        <param>
          <type>string</type>
          <declname>creator</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1726" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1040" bodyend="1044"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a235b4361834b5c834fee5df754f40438" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::dbg_push_blocks</definition>
        <argsstring>(std::string src_filename, uint32_t count)</argsstring>
        <name>dbg_push_blocks</name>
        <param>
          <type>std::string</type>
          <declname>src_filename</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1727" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1046" bodyend="1049"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a965c5c1c73dfc75e7ab5d6f7f8f4e913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::dbg_generate_blocks</definition>
        <argsstring>(std::string debug_wif_key, uint32_t count)</argsstring>
        <name>dbg_generate_blocks</name>
        <param>
          <type>std::string</type>
          <declname>debug_wif_key</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1728" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1051" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a4a1edc6c6cd2a7d73f9ba233bc49e1e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::dbg_stream_json_objects</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>dbg_stream_json_objects</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1729" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1056" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a9ae0c1eaa21b17abf1f76b2ea1ef06dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::dbg_update_object</definition>
        <argsstring>(fc::variant_object update)</argsstring>
        <name>dbg_update_object</name>
        <param>
          <type><ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref></type>
          <declname>update</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1730" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1061" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a1549ccd41a14f1a1e9c8dcc19813ad7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::flood_network</definition>
        <argsstring>(string prefix, uint32_t number_of_transactions)</argsstring>
        <name>flood_network</name>
        <param>
          <type>string</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>number_of_transactions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1732" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1076" bodyend="1080"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a751a4c02552be8c312efb86c3886faf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::network_add_nodes</definition>
        <argsstring>(const vector&lt; string &gt; &amp;nodes)</argsstring>
        <name>network_add_nodes</name>
        <param>
          <type>const vector&lt; string &gt; &amp;</type>
          <declname>nodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1734" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1066" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a25e97582cdd7c8ff2da00c01a45661bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &gt;</type>
        <definition>vector&lt; variant &gt; graphene::wallet::wallet_api::network_get_connected_peers</definition>
        <argsstring>()</argsstring>
        <name>network_get_connected_peers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1735" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1071" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1afef588f960e80bfdc628a870206fbb7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1wallet_1_1blind__confirmation" kindref="compound">blind_confirmation</ref></type>
        <definition>blind_confirmation graphene::wallet::wallet_api::blind_transfer_help</definition>
        <argsstring>(string from_key_or_label, string to_key_or_label, string amount, string symbol, bool broadcast=false, bool to_temp=false)</argsstring>
        <name>blind_transfer_help</name>
        <param>
          <type>string</type>
          <declname>from_key_or_label</declname>
        </param>
        <param>
          <type>string</type>
          <declname>to_key_or_label</declname>
        </param>
        <param>
          <type>string</type>
          <declname>amount</declname>
        </param>
        <param>
          <type>string</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>to_temp</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used to transfer from one set of blinded balances to another </para>        </detaileddescription>
        <inbodydescription>
<para>commitments must be in sorted order </para>        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1740" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1552" bodyend="1722"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a97cdfacc553fafc5e71c03447012d10e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::map&lt; string, std::function&lt; string(<ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref>, const <ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">fc::variants</ref> &amp;)&gt; &gt;</type>
        <definition>std::map&lt; string, std::function&lt; string(fc::variant, const fc::variants &amp;)&gt; &gt; graphene::wallet::wallet_api::get_result_formatters</definition>
        <argsstring>() const </argsstring>
        <name>get_result_formatters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1748" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1225" bodyend="1228"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a00e6ac75e8dc86221d62bf6c7c87d4e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::wallet::wallet_api::encrypt_keys</definition>
        <argsstring>()</argsstring>
        <name>encrypt_keys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1752" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1239" bodyend="1242"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1afe754d0a3c603383cb1f15425825719c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>signed_transaction</type>
        <definition>signed_transaction graphene::wallet::wallet_api::account_store_map</definition>
        <argsstring>(string account, string catalog, bool remove, flat_map&lt; string, optional&lt; string &gt;&gt; key_values, bool broadcast)</argsstring>
        <name>account_store_map</name>
        <param>
          <type>string</type>
          <declname>account</declname>
        </param>
        <param>
          <type>string</type>
          <declname>catalog</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>remove</declname>
        </param>
        <param>
          <type>flat_map&lt; string, optional&lt; string &gt;&gt;</type>
          <declname>key_values</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>broadcast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Manage account storage map(key-&gt;value) by using the custom operations plugin.</para><para>Each account can optionally add random information in the form of a key-value map to be retrieved by any interested party.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>The account ID or name that we are adding additional information to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>catalog</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the catalog the operation will insert data to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>remove</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you want to remove stuff from a catalog. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key_values</parametername>
</parameternamelist>
<parameterdescription>
<para>The map to be inserted/removed to/from the catalog </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>broadcast</parametername>
</parameternamelist>
<parameterdescription>
<para>true if you wish to broadcast the transaction</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The signed transaction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1768" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1918" bodyend="1922"/>
      </memberdef>
      <memberdef kind="function" id="classgraphene_1_1wallet_1_1wallet__api_1a05615119803924d58cffbcbcdb155f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="structgraphene_1_1custom__operations_1_1account__storage__object" kindref="compound">account_storage_object</ref> &gt;</type>
        <definition>vector&lt; account_storage_object &gt; graphene::wallet::wallet_api::get_account_storage</definition>
        <argsstring>(string account, string catalog)</argsstring>
        <name>get_account_storage</name>
        <param>
          <type>string</type>
          <declname>account</declname>
        </param>
        <param>
          <type>string</type>
          <declname>catalog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get <computeroutput>account_storage_object</computeroutput> of an account by using the custom operations plugin.</para><para>Storage data added to the map with <ref refid="classgraphene_1_1wallet_1_1wallet__api_1afe754d0a3c603383cb1f15425825719c" kindref="member">account_store_map</ref> will be returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>account</parametername>
</parameternamelist>
<parameterdescription>
<para>Account ID or name to get contact data from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>catalog</parametername>
</parameternamelist>
<parameterdescription>
<para>The catalog to retrieve.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An <computeroutput>account_storage_object</computeroutput> or empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="1781" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1924" bodyend="1927"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This wallet assumes it is connected to the database server with a high-bandwidth, low-latency connection and performs minimal caching. This API could be provided locally to be used by a web interface. </para>    </detaileddescription>
    <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="51" column="1" bodyfile="libraries/wallet/include/graphene/wallet/wallet.hpp" bodystart="50" bodyend="1783"/>
    <listofallmembers>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a031e794f42365f2f9bc6fb89eefa7586" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>about</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1afe754d0a3c603383cb1f15425825719c" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>account_store_map</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ab5cd568be3fd1c283e0ed2c1fd3c5469" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>add_operation_to_builder_transaction</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a73942cb3f51d64832b550dfaaf59246e" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>add_transaction_signature</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a4d550262671c5d2a3ca8ea76b41722ca" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>approve_proposal</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a796a8e4cd719edcf5e2c6d2d2cb8b3d7" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>begin_builder_transaction</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ad12176791288314a59387df5d1492b25" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>bid_collateral</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a5ff47c6fd55fb231cf5b5a5fe36354b2" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>blind_history</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a85e46a0471d5f9ae0ea122a70a7ce335" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>blind_transfer</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1afef588f960e80bfdc628a870206fbb7f" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>blind_transfer_help</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a289195f6aa33668056993ee3caeceb39" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>borrow_asset</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aada6ee16924870d86f662ccbad9f475a" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>borrow_asset_ext</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a5ec9190af98a7f7bb62ac94cd29f6ab4" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>broadcast_transaction</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ab525bedb82547d7eafb77106fd26e251" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>cancel_order</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a4dbbe1852eb4ca83a68c798f988c9fb6" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>claim_asset_fee_pool</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a3b0edcbb6c620a617dbd0368eaba258a" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>copy_wallet_file</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ac27928f7ca6db74e0ec4aee3ff0c545e" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>create_account_with_brain_key</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ae3028048916580695639fee8e9d815be" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>create_asset</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a85d711119140bbe2ff73599baee48866" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>create_blind_account</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ad0c4d2890ab300fc2388bbe26bf15559" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>create_committee_member</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a73d443a0961938c685d29277a0e4830f" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>create_witness</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a85d25eaf8c6f749420e93fad46bc79cb" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>create_worker</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a965c5c1c73dfc75e7ab5d6f7f8f4e913" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>dbg_generate_blocks</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ad37b6842388187c302edde035b373925" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>dbg_make_mia</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a9813f219562a086e2586e0a395aa6b7d" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>dbg_make_uia</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a235b4361834b5c834fee5df754f40438" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>dbg_push_blocks</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a4a1edc6c6cd2a7d73f9ba233bc49e1e0" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>dbg_stream_json_objects</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a9ae0c1eaa21b17abf1f76b2ea1ef06dd" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>dbg_update_object</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aa36b1f559efa4930b69df66a8f2139cf" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>derive_owner_keys_from_brain_key</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a68486a7124976524f0809d5b466f7c56" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>derive_private_key</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a98369ea6e10699066c7beb181996a219" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>dump_private_keys</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a00e6ac75e8dc86221d62bf6c7c87d4e5" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>encrypt_keys</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a1549ccd41a14f1a1e9c8dcc19813ad7d" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>flood_network</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a207a4b4afe0cac8c7f797025eb08854e" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>fund_asset_fee_pool</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a479f699f7b704636e80a44bf8397d341" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_account</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aff94b2efa8e9e414aa08374769315cf6" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_account_count</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a61434b0b141c6237e6dd89c0346885ee" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_account_history</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a8198534910a41929ea401923b557a355" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_account_history_by_operations</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a0aab972c0e2640b5f589ac041c5d8253" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_account_id</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1af026816d789c452b9e38012bc0b4646f" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_account_limit_orders</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a05615119803924d58cffbcbcdb155f14" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_account_storage</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a14e3f7632e2d69ac100ce8525cd3784f" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_asset</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a621b81a9c9f059f18a550ca07d4a39ee" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_asset_count</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a2c164acf648bfdcae13c5224c45dfff1" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_asset_id</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a5884b3a9407f8dc7ab08fdf301972ebd" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_bitasset_data</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aa7105abcc8f5f3541f328bbe8a7fed16" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_blind_accounts</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a3d11320f5123684b2855685021372d08" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_blind_balances</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a16ade564115023fe9c2e4f88f0d3ddc5" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_block</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1acd90cfe6b46f2944985bc2b104d646c0" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_call_orders</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ab93e82d352c59e25a4d35a42068e7d5c" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_collateral_bids</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1af7db75896d9b2b2f4c4585172eb7d4e4" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_committee_member</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ab050f5ee3b059a96f9a13878b671b2bf" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_dynamic_global_properties</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a6148caf19e01e31f805d62c56ba30cbb" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_full_account</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a85481b478b00eec558b21e43b917738f" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_global_properties</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a64ac5c974a7d5f1d921c78ddd892981f" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_htlc</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1af8d216d17b6d39a395960fafc02a44c7" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_key_label</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a8bb894f77e6245f617e3b97246f19259" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_key_references</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a25164d9daf13b626c1afbe2c6c60dd5e" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_limit_orders</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a99d741652cb0bb283333e4a5c6c83766" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_market_history</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a4b1af6cb547f5dd40976b7d9c8a54035" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_my_blind_accounts</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a986966705420db7db5b7744956f763fe" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_object</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aec509856a009b78f01fed4ad15f8662f" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_order_book</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ae1843016c140c0c05858c9d68a11cc2e" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_private_key</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1af52e5370f7895cb69d5f38427a11dbaf" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_prototype_operation</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a18336179d0c3c63ccac13aaec5fcf1ce" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_public_key</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a6079cc173693ccf3f40ac22d2de47410" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_relative_account_history</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a97cdfacc553fafc5e71c03447012d10e" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_result_formatters</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a29b8b1e1e30f24dc14b5575124e61b83" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_settle_orders</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ad53d506571c99dff3b8a4adec3fbe232" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_transaction_id</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a5a1edfa30f224391475ff2a6e37c6098" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_transaction_signers</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1abce0e5c4ae7fa1b93719a5865e3abb61" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_vesting_balances</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a2ab55fe7127b25f3196729bb354198e5" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_wallet_filename</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a28f755aa12dca82f6e2e948cac014dcb" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>get_witness</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ab3287df20de1e203f0377f244408ee05" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>gethelp</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ad35610a05a5f4cf0d70fd4d6e8f99937" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>global_settle_asset</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1adbae0438ea4f0d49b5910cfab35e7f5a" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>help</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a2d95bc60b5c02386bdfe60a7bee32fe8" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>htlc_create</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ae8f0ab32a3be8f144bb2172ac117fa2a" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>htlc_extend</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1af34528f4f60d82210c3256433f2aaf18" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>htlc_redeem</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a51d29f90e8ff286e4bd128a5191fe662" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>import_account_keys</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a3e40e2e27d9b153fd411a7cc181ce39a" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>import_accounts</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ac70989a765d5f84ff3d8d6444a398512" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>import_balance</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a45e93f4a83143cb8ec6a09b67f91f4bb" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>import_key</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1af68da8c88a5d85ffa0bab63e0bc0a189" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>info</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ac9e44c26f1c4a0e447c94b503095ef57" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>is_locked</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a1c25bb3451d9d7c22970330d3eb94442" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>is_new</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a27682f7e29f1e8dbc93b4a9146be2b2e" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>is_public_key_registered</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ac4ff8075641a7469265122ff9a66e30e" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>issue_asset</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a36320ec4d8646bf2149bb4e383b291b5" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>list_account_balances</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ade01cfbd19d3aa965d96ce4931880e40" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>list_accounts</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a623e5f810219db8bdecd897a8e646d43" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>list_assets</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ab08449f00d6b4147787b23afa7aa6af6" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>list_committee_members</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1acc5f625ee9aa8ba0685eb2a52b330b27" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>list_my_accounts</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ae0cb01b3d7db811587ee51fa1e6c7e51" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>list_witnesses</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ae07628816935423a1fed072fc28b54f5" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>load_wallet_file</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a5e7950c9039f0c59e1266d6732d94e09" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>lock</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a333834072c4aaa8f25d7ea52b39a76bd" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>lock_changed</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aeab4e8b61f9c2fce7e69f0da7d2bd14a" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>my</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a751a4c02552be8c312efb86c3886faf0" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>network_add_nodes</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a25e97582cdd7c8ff2da00c01a45661bd" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>network_get_connected_peers</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a8dc203f5755a74eba6e7713ff837eb1c" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>normalize_brain_key</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a52d1cc372fd10bc659402400d527d215" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>preview_builder_transaction</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1acd0cbe740362f4b83f3b97f9192039f6" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>propose_builder_transaction</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ad33bc4056cefd13bca5d74f4cc0c017f" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>propose_builder_transaction2</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a9716675c16f6bc9c35371e8f2b28ada4" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>propose_fee_change</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a2238d380c7d5f2361533f31d996964b2" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>propose_parameter_change</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ad7f049ecc3f83a80c6f27ec4f1a47beb" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>publish_asset_feed</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a98aa6fd434297e5bdaf294bc08893eca" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>quit</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a146f9779a48184ea2b64036f2c6838d3" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>read_memo</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aed63fa0d4cbf06a4810e436482f5d5ea" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>receive_blind_transfer</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aba1c5e3025f44273fb19e264c2b3ec2f" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>register_account</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a92c1c80c0f7b7176d35a5a910ed7e7f5" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>remove_builder_transaction</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ad8cc33d09f58920917736d46ef73d05e" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>replace_operation_in_builder_transaction</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a6c6316f69afc3b8b78b669381fd96159" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>reserve_asset</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1addf3cfcb96bd878e6c850d3a961de9e6" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>save_wallet_file</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aeb0d71a0ed4c6d05a003e48c3a0cb6d3" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>sell_asset</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ae2e94bccc4e0257f5c16b7bd879e85d6" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>serialize_transaction</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a2d6765231f3bf9180ad64c5be085ba60" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>set_desired_witness_and_committee_member_count</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a5013c612e234e0169a9953c8ee9ce898" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>set_fees_on_builder_transaction</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a33146d388f60a77c23ee4d85f949859e" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>set_key_label</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a2a5d174ec4fde8633b8e962fabc00804" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>set_password</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a444fd5cc7709e481be463393f78a2253" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>set_voting_proxy</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aa5804e1ee29ff8f2c3bcc668ad2bfbcd" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>set_wallet_filename</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a95a3baa4b0c83c1fce14827acbbddd62" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>settle_asset</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aaadd5bace87a5db813c3bd78ef1e8529" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>sign_builder_transaction</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1af047e740bd6dc8669e135e1b72a54528" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>sign_builder_transaction2</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ab7b2304c5b2f57444e02a7d28b27da5d" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>sign_memo</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a95ccdec1dabd343aebc19e3a93ba2370" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>sign_message</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a4c2cfac7553688e32fa64b6f4464142a" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>sign_transaction</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a242f799046bb5b98f54508709ba20d8e" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>sign_transaction2</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a3062c701e73acd60c6ffa74ea47c5cc1" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>suggest_brain_key</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a338fc74bb723d9c649f161b5279e41f0" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>transfer</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a52bd06d61575ff4cfc208d887db3d8ff" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>transfer2</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a8b38899a509b43720d344172323d2069" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>transfer_from_blind</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a6209fb37844e23c339c959a7afe996df" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>transfer_to_blind</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1ae16994a63cfdef1616b6b968117fd29d" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>unlock</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a6c2a57593b39390b286efeecca2702d6" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>update_asset</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a0ce4b8d15724a5f0d2e94a83288945cd" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>update_asset_feed_producers</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aa42085004d8575c031d2694aad17971f" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>update_asset_issuer</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aebe4459f45a748739595939d60b95b6b" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>update_bitasset</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a8246cdc35c58a9776a011505684d66b8" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>update_witness</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a4af1e9b3a5d70e1b7c5fde6a519cbd24" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>update_worker_votes</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1af2145755728919d7e4aaf0f02d7c4e82" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>upgrade_account</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a3dd732b007ff7b833771a839e9833d00" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>verify_encapsulated_message</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1af6ef27b2bae5da2e275be804cba04240" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>verify_message</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a06a431183349351ccab9ced50b88dd5e" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>verify_signed_message</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a9c2be055bd282ff68da3f3ce0f6b95fb" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>vote_for_committee_member</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a00370237863a234e2418f191ce006d0c" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>vote_for_witness</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a90ce4b5ba822654ad14a096ac4814fe6" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>wallet_api</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1aa6483d143fecb817fad3c08ee982bda0" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>whitelist_account</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a72d9316ead7ac6825fbcd62be81e235a" prot="public" virt="non-virtual"><scope>graphene::wallet::wallet_api</scope><name>withdraw_vesting</name></member>
      <member refid="classgraphene_1_1wallet_1_1wallet__api_1a78315fd1d0d042032b2ceba25d5dc07d" prot="public" virt="virtual"><scope>graphene::wallet::wallet_api</scope><name>~wallet_api</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
