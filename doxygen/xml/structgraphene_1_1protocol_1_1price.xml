<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="structgraphene_1_1protocol_1_1price" kind="struct" language="C++" prot="public">
    <compoundname>graphene::protocol::price</compoundname>
    <includes refid="asset_8hpp" local="no">asset.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1price_1a43023c1d8ee6bc86c4ffff6a0974613b" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::price::base</definition>
        <argsstring></argsstring>
        <name>base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="119" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structgraphene_1_1protocol_1_1price_1ac90206af84510ce20366019a8c7bb4f1" prot="public" static="no" mutable="no">
        <type><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref></type>
        <definition>asset graphene::protocol::price::quote</definition>
        <argsstring></argsstring>
        <name>quote</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="120" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1price_1a824fb92be6c857ebc2228c6d60a3eeb5" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>graphene::protocol::price::price</definition>
        <argsstring>(const asset &amp;_base=asset(), const asset &amp;_quote=asset())</argsstring>
        <name>price</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>_base</declname>
          <defval><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref>()</defval>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>_quote</declname>
          <defval><ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="116" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="116" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1price_1a95a84af831d510de82b657755ba17656" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::price::max</definition>
        <argsstring>() const </argsstring>
        <name>max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="130" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1price_1a9c8d7966067f8186f49da1f9aceff05b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::price::min</definition>
        <argsstring>() const </argsstring>
        <name>min</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="131" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1price_1a9a78b98326b4d7536c7331561c94e238" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double graphene::protocol::price::to_real</definition>
        <argsstring>() const </argsstring>
        <name>to_real</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="133" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1price_1a567983c0c85a612c9222f9d49613e9cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool graphene::protocol::price::is_null</definition>
        <argsstring>() const </argsstring>
        <name>is_null</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="135" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1price_1add6aa3df0601e69fc11fc386905501ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void graphene::protocol::price::validate</definition>
        <argsstring>() const </argsstring>
        <name>validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="136" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="231" bodyend="236"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1price_1a3f7ada477aad1255a7c1c084cc2a7b59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::price::max</definition>
        <argsstring>(asset_id_type base, asset_id_type quote)</argsstring>
        <name>max</name>
        <param>
          <type>asset_id_type</type>
          <declname>base</declname>
        </param>
        <param>
          <type>asset_id_type</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="122" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1price_1af31bdb9e5ce13664795a955b242a5b04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::price::min</definition>
        <argsstring>(asset_id_type base, asset_id_type quote)</argsstring>
        <name>min</name>
        <param>
          <type>asset_id_type</type>
          <declname>base</declname>
        </param>
        <param>
          <type>asset_id_type</type>
          <declname>quote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="123" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1price_1a6dc82051b6bad5b90c2cd968abf81f83" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>price graphene::protocol::price::call_price</definition>
        <argsstring>(const asset &amp;debt, const asset &amp;collateral, uint16_t collateral_ratio)</argsstring>
        <name>call_price</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>debt</declname>
        </param>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1asset" kindref="compound">asset</ref> &amp;</type>
          <declname>collateral</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>collateral_ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The black swan price is defined as debt/collateral, we want to perform a margin call before debt == collateral. Given a debt/collateral ratio of 1 USD / CORE and a maintenance collateral requirement of 2x we can define the call price to be 2 USD / CORE.</para><para>This method divides the collateral by the maintenance collateral ratio to derive a call price for the given black swan ratio.</para><para>There exists some cases where the debt and collateral values are so small that dividing by the collateral ratio will result in a 0 price or really poor rounding errors. No matter what the collateral part of the price ratio can never go to 0 and the debt can never go more than GRAPHENE_MAX_SHARE_SUPPLY</para><para>CR * DEBT/COLLAT or DEBT/(COLLAT/CR)</para><para>Note: this function is only used before core-1270 hard fork. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="125" column="1" bodyfile="libraries/protocol/asset.cpp" bodystart="212" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="structgraphene_1_1protocol_1_1price_1af7da4b4f58613cb400bfe587232e091f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structgraphene_1_1protocol_1_1price" kindref="compound">price</ref></type>
        <definition>static price graphene::protocol::price::unit_price</definition>
        <argsstring>(asset_id_type a=asset_id_type())</argsstring>
        <name>unit_price</name>
        <param>
          <type>asset_id_type</type>
          <declname>a</declname>
          <defval>asset_id_type()</defval>
        </param>
        <briefdescription>
<para>The unit price for an asset type A is defined to be a price such that for any asset m, m*A=m. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="128" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="128" bodyend="128"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The price struct stores asset prices in the DNA system. </para>    </briefdescription>
    <detaileddescription>
<para>A price is defined as a ratio between two assets, and represents a possible exchange rate between those two assets. prices are generally not stored in any simplified form, i.e. a price of (1000 CORE)/(20 USD) is perfectly normal.</para><para>The assets within a price are labeled base and quote. Throughout the DNA code base, the convention used is that the base asset is the asset being sold, and the quote asset is the asset being purchased, where the price is represented as base/quote, so in the example price above the seller is looking to sell CORE asset and get USD in return. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="5195">
        <label>graphene::protocol::price</label>
        <link refid="structgraphene_1_1protocol_1_1price"/>
        <childnode refid="5196" relation="usage">
          <edgelabel>base</edgelabel>
          <edgelabel>quote</edgelabel>
        </childnode>
      </node>
      <node id="5197">
        <label>fc::safe&lt; int64_t &gt;</label>
        <link refid="structfc_1_1safe"/>
      </node>
      <node id="5196">
        <label>graphene::protocol::asset</label>
        <link refid="structgraphene_1_1protocol_1_1asset"/>
        <childnode refid="5197" relation="usage">
          <edgelabel>amount</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libraries/protocol/include/graphene/protocol/asset.hpp" line="115" column="1" bodyfile="libraries/protocol/include/graphene/protocol/asset.hpp" bodystart="114" bodyend="137"/>
    <listofallmembers>
      <member refid="structgraphene_1_1protocol_1_1price_1a43023c1d8ee6bc86c4ffff6a0974613b" prot="public" virt="non-virtual"><scope>graphene::protocol::price</scope><name>base</name></member>
      <member refid="structgraphene_1_1protocol_1_1price_1a6dc82051b6bad5b90c2cd968abf81f83" prot="public" virt="non-virtual"><scope>graphene::protocol::price</scope><name>call_price</name></member>
      <member refid="structgraphene_1_1protocol_1_1price_1a567983c0c85a612c9222f9d49613e9cb" prot="public" virt="non-virtual"><scope>graphene::protocol::price</scope><name>is_null</name></member>
      <member refid="structgraphene_1_1protocol_1_1price_1a3f7ada477aad1255a7c1c084cc2a7b59" prot="public" virt="non-virtual"><scope>graphene::protocol::price</scope><name>max</name></member>
      <member refid="structgraphene_1_1protocol_1_1price_1a95a84af831d510de82b657755ba17656" prot="public" virt="non-virtual"><scope>graphene::protocol::price</scope><name>max</name></member>
      <member refid="structgraphene_1_1protocol_1_1price_1af31bdb9e5ce13664795a955b242a5b04" prot="public" virt="non-virtual"><scope>graphene::protocol::price</scope><name>min</name></member>
      <member refid="structgraphene_1_1protocol_1_1price_1a9c8d7966067f8186f49da1f9aceff05b" prot="public" virt="non-virtual"><scope>graphene::protocol::price</scope><name>min</name></member>
      <member refid="structgraphene_1_1protocol_1_1price_1a824fb92be6c857ebc2228c6d60a3eeb5" prot="public" virt="non-virtual"><scope>graphene::protocol::price</scope><name>price</name></member>
      <member refid="structgraphene_1_1protocol_1_1price_1ac90206af84510ce20366019a8c7bb4f1" prot="public" virt="non-virtual"><scope>graphene::protocol::price</scope><name>quote</name></member>
      <member refid="structgraphene_1_1protocol_1_1price_1a9a78b98326b4d7536c7331561c94e238" prot="public" virt="non-virtual"><scope>graphene::protocol::price</scope><name>to_real</name></member>
      <member refid="structgraphene_1_1protocol_1_1price_1af7da4b4f58613cb400bfe587232e091f" prot="public" virt="non-virtual"><scope>graphene::protocol::price</scope><name>unit_price</name></member>
      <member refid="structgraphene_1_1protocol_1_1price_1add6aa3df0601e69fc11fc386905501ef" prot="public" virt="non-virtual"><scope>graphene::protocol::price</scope><name>validate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
