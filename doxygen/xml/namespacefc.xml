<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="namespacefc" kind="namespace" language="C++">
    <compoundname>fc</compoundname>
    <innerclass refid="classfc_1_1aes__decoder" prot="public">fc::aes_decoder</innerclass>
    <innerclass refid="classfc_1_1aes__encoder" prot="public">fc::aes_encoder</innerclass>
    <innerclass refid="classfc_1_1api" prot="public">fc::api</innerclass>
    <innerclass refid="classfc_1_1api__base" prot="public">fc::api_base</innerclass>
    <innerclass refid="classfc_1_1api__connection" prot="public">fc::api_connection</innerclass>
    <innerclass refid="classfc_1_1appender" prot="public">fc::appender</innerclass>
    <innerclass refid="structfc_1_1appender__config" prot="public">fc::appender_config</innerclass>
    <innerclass refid="classfc_1_1appender__factory" prot="public">fc::appender_factory</innerclass>
    <innerclass refid="classfc_1_1bigint" prot="public">fc::bigint</innerclass>
    <innerclass refid="structfc_1_1blob" prot="public">fc::blob</innerclass>
    <innerclass refid="classfc_1_1bloom__filter" prot="public">fc::bloom_filter</innerclass>
    <innerclass refid="classfc_1_1bloom__parameters" prot="public">fc::bloom_parameters</innerclass>
    <innerclass refid="classfc_1_1buffered__istream" prot="public">fc::buffered_istream</innerclass>
    <innerclass refid="classfc_1_1buffered__ostream" prot="public">fc::buffered_ostream</innerclass>
    <innerclass refid="classfc_1_1cerr__t" prot="public">fc::cerr_t</innerclass>
    <innerclass refid="structfc_1_1cin__buffer" prot="public">fc::cin_buffer</innerclass>
    <innerclass refid="classfc_1_1cin__t" prot="public">fc::cin_t</innerclass>
    <innerclass refid="classfc_1_1comma__numpunct" prot="public">fc::comma_numpunct</innerclass>
    <innerclass refid="classfc_1_1console__appender" prot="public">fc::console_appender</innerclass>
    <innerclass refid="structfc_1_1context" prot="public">fc::context</innerclass>
    <innerclass refid="classfc_1_1cout__t" prot="public">fc::cout_t</innerclass>
    <innerclass refid="classfc_1_1datastream" prot="public">fc::datastream</innerclass>
    <innerclass refid="classfc_1_1datastream_3_01size__t_01_4" prot="public">fc::datastream&lt; size_t &gt;</innerclass>
    <innerclass refid="structfc_1_1diffie__hellman" prot="public">fc::diffie_hellman</innerclass>
    <innerclass refid="classfc_1_1directory__iterator" prot="public">fc::directory_iterator</innerclass>
    <innerclass refid="classfc_1_1enum__type" prot="public">fc::enum_type</innerclass>
    <innerclass refid="classfc_1_1exception" prot="public">fc::exception</innerclass>
    <innerclass refid="classfc_1_1exception__factory" prot="public">fc::exception_factory</innerclass>
    <innerclass refid="structfc_1_1field__reflection" prot="public">fc::field_reflection</innerclass>
    <innerclass refid="classfc_1_1file__appender" prot="public">fc::file_appender</innerclass>
    <innerclass refid="classfc_1_1file__mapping" prot="public">fc::file_mapping</innerclass>
    <innerclass refid="structfc_1_1from__static__variant" prot="public">fc::from_static_variant</innerclass>
    <innerclass refid="classfc_1_1from__variant__visitor" prot="public">fc::from_variant_visitor</innerclass>
    <innerclass refid="classfc_1_1future" prot="public">fc::future</innerclass>
    <innerclass refid="classfc_1_1future_3_01void_01_4" prot="public">fc::future&lt; void &gt;</innerclass>
    <innerclass refid="classfc_1_1fwd" prot="public">fc::fwd</innerclass>
    <innerclass refid="classfc_1_1gelf__appender" prot="public">fc::gelf_appender</innerclass>
    <innerclass refid="classfc_1_1generic__api" prot="public">fc::generic_api</innerclass>
    <innerclass refid="structfc_1_1get__comma__separated__typenames" prot="public">fc::get_comma_separated_typenames</innerclass>
    <innerclass refid="structfc_1_1get__comma__separated__typenames_3_01_t_01_4" prot="public">fc::get_comma_separated_typenames&lt; T &gt;</innerclass>
    <innerclass refid="structfc_1_1get__comma__separated__typenames_3_01_t_00_01_ts_8_8_8_01_4" prot="public">fc::get_comma_separated_typenames&lt; T, Ts... &gt;</innerclass>
    <innerclass refid="structfc_1_1get__comma__separated__typenames_3_4" prot="public">fc::get_comma_separated_typenames&lt;&gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename" prot="public">fc::get_typename</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01bool_01_4" prot="public">fc::get_typename&lt; bool &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01char_01_4" prot="public">fc::get_typename&lt; char &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01const_01_t_01_5_01_4" prot="public">fc::get_typename&lt; const T * &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01double_01_4" prot="public">fc::get_typename&lt; double &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01fc_1_1exception_01_4" prot="public">fc::get_typename&lt; fc::exception &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01flat__map_3_01_t_00_01_u_01_4_01_4" prot="public">fc::get_typename&lt; flat_map&lt; T, U &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01flat__set_3_01static__variant_3_01_ts_8_8_8_01_4_00_01typename_01s9f6a549510ed9e25a31f7014ee9ce601" prot="public">fc::get_typename&lt; flat_set&lt; static_variant&lt; Ts... &gt;, typename static_variant&lt; Ts... &gt;::type_lt &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01flat__set_3_01_t_01_4_01_4" prot="public">fc::get_typename&lt; flat_set&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01float_01_4" prot="public">fc::get_typename&lt; float &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01graphene_1_1db_1_1object__id_3_01_space_i_d_00_01_type_i_d_01_4_01_4" prot="public">fc::get_typename&lt; graphene::db::object_id&lt; SpaceID, TypeID &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01graphene_1_1protocol_1_1extension_3_01_t_01_4_01_4" prot="public">fc::get_typename&lt; graphene::protocol::extension&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01hash160_01_4" prot="public">fc::get_typename&lt; hash160 &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01int16__t_01_4" prot="public">fc::get_typename&lt; int16_t &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01int32__t_01_4" prot="public">fc::get_typename&lt; int32_t &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01int64__t_01_4" prot="public">fc::get_typename&lt; int64_t &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01int8__t_01_4" prot="public">fc::get_typename&lt; int8_t &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01optional_3_01_t_01_4_01_4" prot="public">fc::get_typename&lt; optional&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01path_01_4" prot="public">fc::get_typename&lt; path &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01static__variant_3_01_t_8_8_8_01_4_01_4" prot="public">fc::get_typename&lt; static_variant&lt; T... &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01std_1_1array_3_01_t_00_01_n_01_4_01_4" prot="public">fc::get_typename&lt; std::array&lt; T, N &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01std_1_1deque_3_01_t_01_4_01_4" prot="public">fc::get_typename&lt; std::deque&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01std_1_1map_3_01_k_00_01_v_01_4_01_4" prot="public">fc::get_typename&lt; std::map&lt; K, V &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01std_1_1pair_3_01_a_00_01_b_01_4_01_4" prot="public">fc::get_typename&lt; std::pair&lt; A, B &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01std_1_1set_3_01_e_01_4_01_4" prot="public">fc::get_typename&lt; std::set&lt; E &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01std_1_1shared__ptr_3_01const_01graphene_1_1protocol_1_1fee__schedule_01_4_01_4" prot="public">fc::get_typename&lt; std::shared_ptr&lt; const graphene::protocol::fee_schedule &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01std_1_1shared__ptr_3_01graphene_1_1protocol_1_1fee__schedule_01_4_01_4" prot="public">fc::get_typename&lt; std::shared_ptr&lt; graphene::protocol::fee_schedule &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01std_1_1string_01_4" prot="public">fc::get_typename&lt; std::string &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01std_1_1vector_3_01char_01_4_01_4" prot="public">fc::get_typename&lt; std::vector&lt; char &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01std_1_1vector_3_01_t_01_4_01_4" prot="public">fc::get_typename&lt; std::vector&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01_t_01_5_01_4" prot="public">fc::get_typename&lt; T * &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01uint160__t_01_4" prot="public">fc::get_typename&lt; uint160_t &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01uint16__t_01_4" prot="public">fc::get_typename&lt; uint16_t &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01uint32__t_01_4" prot="public">fc::get_typename&lt; uint32_t &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01uint64__t_01_4" prot="public">fc::get_typename&lt; uint64_t &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01uint8__t_01_4" prot="public">fc::get_typename&lt; uint8_t &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01unsigned__int_01_4" prot="public">fc::get_typename&lt; unsigned_int &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01value_01_4" prot="public">fc::get_typename&lt; value &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01variant__object_01_4" prot="public">fc::get_typename&lt; variant_object &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01void_01_4" prot="public">fc::get_typename&lt; void &gt;</innerclass>
    <innerclass refid="structfc_1_1get__typename_3_01zero__initialized__array_3_01_t_00_01_n_01_4_01_4" prot="public">fc::get_typename&lt; zero_initialized_array&lt; T, N &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1graphene__extension__from__variant__visitor" prot="public">fc::graphene_extension_from_variant_visitor</innerclass>
    <innerclass refid="structfc_1_1graphene__extension__to__variant__visitor" prot="public">fc::graphene_extension_to_variant_visitor</innerclass>
    <innerclass refid="classfc_1_1hash160" prot="public">fc::hash160</innerclass>
    <innerclass refid="classfc_1_1hmac" prot="public">fc::hmac</innerclass>
    <innerclass refid="structfc_1_1identity__member__with__optionals" prot="public">fc::identity_member_with_optionals</innerclass>
    <innerclass refid="structfc_1_1if__enum" prot="public">fc::if_enum</innerclass>
    <innerclass refid="structfc_1_1if__enum_3_01_t_00_01std_1_1enable__if__t_3_01std_1_1is__enum_3_01_t_01_4_1_1value_01_4_01_4" prot="public">fc::if_enum&lt; T, std::enable_if_t&lt; std::is_enum&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structfc_1_1if__enum_3_01_t_00_01std_1_1enable__if__t_3_9std_1_1is__enum_3_01_t_01_4_1_1value_01_4_01_4" prot="public">fc::if_enum&lt; T, std::enable_if_t&lt;!std::is_enum&lt; T &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="classfc_1_1ifstream" prot="public">fc::ifstream</innerclass>
    <innerclass refid="structfc_1_1inherited__field__reflection" prot="public">fc::inherited_field_reflection</innerclass>
    <innerclass refid="classfc_1_1iostream" prot="public">fc::iostream</innerclass>
    <innerclass refid="classfc_1_1istream" prot="public">fc::istream</innerclass>
    <innerclass refid="classfc_1_1json" prot="public">fc::json</innerclass>
    <innerclass refid="classfc_1_1limited__mutable__variant__object" prot="public">fc::limited_mutable_variant_object</innerclass>
    <innerclass refid="classfc_1_1local__api__connection" prot="public">fc::local_api_connection</innerclass>
    <innerclass refid="classfc_1_1log__context" prot="public">fc::log_context</innerclass>
    <innerclass refid="classfc_1_1log__level" prot="public">fc::log_level</innerclass>
    <innerclass refid="classfc_1_1log__message" prot="public">fc::log_message</innerclass>
    <innerclass refid="classfc_1_1logger" prot="public">fc::logger</innerclass>
    <innerclass refid="structfc_1_1logger__config" prot="public">fc::logger_config</innerclass>
    <innerclass refid="structfc_1_1logging__config" prot="public">fc::logging_config</innerclass>
    <innerclass refid="classfc_1_1mapped__region" prot="public">fc::mapped_region</innerclass>
    <innerclass refid="classfc_1_1microseconds" prot="public">fc::microseconds</innerclass>
    <innerclass refid="classfc_1_1mutable__url" prot="public">fc::mutable_url</innerclass>
    <innerclass refid="classfc_1_1mutable__variant__object" prot="public">fc::mutable_variant_object</innerclass>
    <innerclass refid="classfc_1_1mutex" prot="public">fc::mutex</innerclass>
    <innerclass refid="classfc_1_1non__preemptable__scope__check" prot="public">fc::non_preemptable_scope_check</innerclass>
    <innerclass refid="classfc_1_1ofstream" prot="public">fc::ofstream</innerclass>
    <innerclass refid="structfc_1_1openssl__scope" prot="public">fc::openssl_scope</innerclass>
    <innerclass refid="structfc_1_1openssl__thread__config" prot="public">fc::openssl_thread_config</innerclass>
    <innerclass refid="classfc_1_1optional" prot="public">fc::optional</innerclass>
    <innerclass refid="classfc_1_1ostream" prot="public">fc::ostream</innerclass>
    <innerclass refid="classfc_1_1path" prot="public">fc::path</innerclass>
    <innerclass refid="classfc_1_1priority" prot="public">fc::priority</innerclass>
    <innerclass refid="classfc_1_1promise" prot="public">fc::promise</innerclass>
    <innerclass refid="classfc_1_1promise_3_01void_01_4" prot="public">fc::promise&lt; void &gt;</innerclass>
    <innerclass refid="classfc_1_1promise__base" prot="public">fc::promise_base</innerclass>
    <innerclass refid="classfc_1_1rate__limiting__group" prot="public">fc::rate_limiting_group</innerclass>
    <innerclass refid="classfc_1_1recursive__directory__iterator" prot="public">fc::recursive_directory_iterator</innerclass>
    <innerclass refid="structfc_1_1reflector" prot="public">fc::reflector</innerclass>
    <innerclass refid="structfc_1_1reflector_3_01graphene_1_1db_1_1object__id_3_01_space_i_d_00_01_type_i_d_01_4_01_4" prot="public">fc::reflector&lt; graphene::db::object_id&lt; SpaceID, TypeID &gt; &gt;</innerclass>
    <innerclass refid="classfc_1_1ripemd160" prot="public">fc::ripemd160</innerclass>
    <innerclass refid="structfc_1_1safe" prot="public">fc::safe</innerclass>
    <innerclass refid="classfc_1_1scoped__lock" prot="public">fc::scoped_lock</innerclass>
    <innerclass refid="classfc_1_1serial__valve" prot="public">fc::serial_valve</innerclass>
    <innerclass refid="classfc_1_1sha1" prot="public">fc::sha1</innerclass>
    <innerclass refid="classfc_1_1sha224" prot="public">fc::sha224</innerclass>
    <innerclass refid="classfc_1_1sha256" prot="public">fc::sha256</innerclass>
    <innerclass refid="classfc_1_1sha512" prot="public">fc::sha512</innerclass>
    <innerclass refid="structfc_1_1sleep__priority__less" prot="public">fc::sleep_priority_less</innerclass>
    <innerclass refid="classfc_1_1spin__lock" prot="public">fc::spin_lock</innerclass>
    <innerclass refid="classfc_1_1spin__yield__lock" prot="public">fc::spin_yield_lock</innerclass>
    <innerclass refid="structfc_1_1ssl__bignum" prot="public">fc::ssl_bignum</innerclass>
    <innerclass refid="structfc_1_1ssl__wrapper" prot="public">fc::ssl_wrapper</innerclass>
    <innerclass refid="classfc_1_1static__variant" prot="public">fc::static_variant</innerclass>
    <innerclass refid="classfc_1_1static__variant_3_01typelist_1_1list_3_01_types_8_8_8_01_4_01_4" prot="public">fc::static_variant&lt; typelist::list&lt; Types... &gt; &gt;</innerclass>
    <innerclass refid="classfc_1_1static__variant_3_4" prot="public">fc::static_variant&lt;&gt;</innerclass>
    <innerclass refid="classfc_1_1stringstream" prot="public">fc::stringstream</innerclass>
    <innerclass refid="classfc_1_1task" prot="public">fc::task</innerclass>
    <innerclass refid="classfc_1_1task_3_01void_00_01_functor_size_01_4" prot="public">fc::task&lt; void, FunctorSize &gt;</innerclass>
    <innerclass refid="classfc_1_1task__base" prot="public">fc::task_base</innerclass>
    <innerclass refid="classfc_1_1task__specific__ptr" prot="public">fc::task_specific_ptr</innerclass>
    <innerclass refid="classfc_1_1tcp__server" prot="public">fc::tcp_server</innerclass>
    <innerclass refid="classfc_1_1tcp__socket" prot="public">fc::tcp_socket</innerclass>
    <innerclass refid="classfc_1_1tcp__socket__io__hooks" prot="public">fc::tcp_socket_io_hooks</innerclass>
    <innerclass refid="classfc_1_1temp__directory" prot="public">fc::temp_directory</innerclass>
    <innerclass refid="classfc_1_1temp__file" prot="public">fc::temp_file</innerclass>
    <innerclass refid="classfc_1_1temp__file__base" prot="public">fc::temp_file_base</innerclass>
    <innerclass refid="classfc_1_1thread" prot="public">fc::thread</innerclass>
    <innerclass refid="classfc_1_1thread__d" prot="public">fc::thread_d</innerclass>
    <innerclass refid="classfc_1_1thread__idle__notifier" prot="public">fc::thread_idle_notifier</innerclass>
    <innerclass refid="classfc_1_1thread__specific__ptr" prot="public">fc::thread_specific_ptr</innerclass>
    <innerclass refid="classfc_1_1time__point" prot="public">fc::time_point</innerclass>
    <innerclass refid="classfc_1_1time__point__sec" prot="public">fc::time_point_sec</innerclass>
    <innerclass refid="structfc_1_1to__static__variant" prot="public">fc::to_static_variant</innerclass>
    <innerclass refid="classfc_1_1to__variant__visitor" prot="public">fc::to_variant_visitor</innerclass>
    <innerclass refid="structfc_1_1try__to__lock__t" prot="public">fc::try_to_lock_t</innerclass>
    <innerclass refid="classfc_1_1udp__socket" prot="public">fc::udp_socket</innerclass>
    <innerclass refid="classfc_1_1unhandled__exception" prot="public">fc::unhandled_exception</innerclass>
    <innerclass refid="classfc_1_1unique__lock" prot="public">fc::unique_lock</innerclass>
    <innerclass refid="structfc_1_1unsigned__int" prot="public">fc::unsigned_int</innerclass>
    <innerclass refid="classfc_1_1url" prot="public">fc::url</innerclass>
    <innerclass refid="classfc_1_1variant" prot="public">fc::variant</innerclass>
    <innerclass refid="classfc_1_1variant__object" prot="public">fc::variant_object</innerclass>
    <innerclass refid="structfc_1_1void__t" prot="public">fc::void_t</innerclass>
    <innerclass refid="structfc_1_1vtable" prot="public">fc::vtable</innerclass>
    <innerclass refid="structfc_1_1vtable__copy__visitor" prot="public">fc::vtable_copy_visitor</innerclass>
    <innerclass refid="classfc_1_1zero__initialized__array" prot="public">fc::zero_initialized_array</innerclass>
    <innerclass refid="classfc_1_1zero__initialized__array_3_01unsigned_01char_00_01_n_01_4" prot="public">fc::zero_initialized_array&lt; unsigned char, N &gt;</innerclass>
    <innernamespace refid="namespacefc_1_1asio">fc::asio</innernamespace>
    <innernamespace refid="namespacefc_1_1detail">fc::detail</innernamespace>
    <innernamespace refid="namespacefc_1_1ecc">fc::ecc</innernamespace>
    <innernamespace refid="namespacefc_1_1http">fc::http</innernamespace>
    <innernamespace refid="namespacefc_1_1impl">fc::impl</innernamespace>
    <innernamespace refid="namespacefc_1_1ip">fc::ip</innernamespace>
    <innernamespace refid="namespacefc_1_1json__relaxed">fc::json_relaxed</innernamespace>
    <innernamespace refid="namespacefc_1_1member__names">fc::member_names</innernamespace>
    <innernamespace refid="namespacefc_1_1raw">fc::raw</innernamespace>
    <innernamespace refid="namespacefc_1_1rpc">fc::rpc</innernamespace>
    <innernamespace refid="namespacefc_1_1typelist">fc::typelist</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacefc_1ab52b42f18c442a260897c74c66c3d35c" prot="public" static="no">
        <name>exception_code</name>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca54c3c8b9caa13270a23c57af7bf9c52c" prot="public">
          <name>unspecified_exception_code</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>for exceptions we threw that don&apos;t have an assigned code </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca10adcbd9bf1986da4c289d2f0210cd85" prot="public">
          <name>unhandled_exception_code</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>for unhandled 3rd party exceptions </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca0269f214acef1ad4c7531974bc011893" prot="public">
          <name>timeout_exception_code</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>timeout exceptions </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca39cab94a272e08bc5cdc93f64bf42807" prot="public">
          <name>file_not_found_exception_code</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca5b91c403f2d77988e737fedf17bbd412" prot="public">
          <name>parse_error_exception_code</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca68eb1b23cb82c44ef0f142c5dfc0d904" prot="public">
          <name>invalid_arg_exception_code</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca727029291eee67ac62d1a0878e94070c" prot="public">
          <name>key_not_found_exception_code</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca0c4ff755a0bba3982b4e737470bf1d39" prot="public">
          <name>bad_cast_exception_code</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35caf972859aafe0f2ea87fb5a12f2cad5fa" prot="public">
          <name>out_of_range_exception_code</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35cab00067de165140788c7d542c04e14f4d" prot="public">
          <name>canceled_exception_code</name>
          <initializer>= 9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca0609f726018df8d223cd932c85d31b6c" prot="public">
          <name>assert_exception_code</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35cae485cf170ef74efe7bb8f48e01d68637" prot="public">
          <name>eof_exception_code</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca969f910e4a1ec90bac8bf8eca1a8cec0" prot="public">
          <name>std_exception_code</name>
          <initializer>= 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35caf862720abffe585a5f5f8d7162c39e2c" prot="public">
          <name>invalid_operation_exception_code</name>
          <initializer>= 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca04557e59532fe8ed76a7b27678f3a596" prot="public">
          <name>unknown_host_exception_code</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca594c9e76fdd2f38b1a829a2dff2f0cf8" prot="public">
          <name>null_optional_code</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca1eb51dcf3fc25d83e37600fcdfb6bc17" prot="public">
          <name>aes_error_code</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35cafcfd5276f3288a4d5728f3d3d748cec3" prot="public">
          <name>overflow_code</name>
          <initializer>= 19</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35cafe347d7697fa66fd53f6c55db8bfa275" prot="public">
          <name>underflow_code</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca20077a699d37a68d7eeeda0b0d1ac169" prot="public">
          <name>divide_by_zero_code</name>
          <initializer>= 21</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca3716ecbe70314a83c0f39fc0b07d4ce0" prot="public">
          <name>method_not_found_exception_code</name>
          <initializer>= 22</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="17" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="16" bodyend="40"/>
      </memberdef>
      <memberdef kind="enum" id="namespacefc_1a3d8a2be677709cc41f09aa7925f2d55f" prot="public" static="no">
        <name>mode_t</name>
        <enumvalue id="namespacefc_1a3d8a2be677709cc41f09aa7925f2d55fad6bcd1364809e1b881bb22334d14cd56" prot="public">
          <name>read_only</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1a3d8a2be677709cc41f09aa7925f2d55fa3c38f5762b0b9c673d147a85f15b8d62" prot="public">
          <name>write_only</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacefc_1a3d8a2be677709cc41f09aa7925f2d55fa4eaf6936474fac52a87743f3de041c42" prot="public">
          <name>read_write</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/interprocess/file_mapping.hpp" line="13" column="1" bodyfile="libraries/fc/include/fc/interprocess/file_mapping.hpp" bodystart="13" bodyend="17"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacefc_1a18e9e0bd9c0a52896425ae1172bc4e2b" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t fc::api_id_type</definition>
        <argsstring></argsstring>
        <name>api_id_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="124" column="1" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1abc7fa69d18531d7645307d15b3102886" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1api__base" kindref="compound">api_base</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt; api_base &gt; fc::api_ptr</definition>
        <argsstring></argsstring>
        <name>api_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/api.hpp" line="140" column="1" bodyfile="libraries/fc/include/fc/api.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a9613d15e9a53e421a260a92769c1acfb" prot="public" static="no">
        <type><ref refid="classfc_1_1hmac" kindref="compound">hmac</ref>&lt; <ref refid="classfc_1_1sha224" kindref="compound">fc::sha224</ref> &gt;</type>
        <definition>typedef hmac&lt;fc::sha224&gt; fc::hmac_sha224</definition>
        <argsstring></argsstring>
        <name>hmac_sha224</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/hmac.hpp" line="57" column="1" bodyfile="libraries/fc/include/fc/crypto/hmac.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a9b621124067e1f4c8f3dcdce8afa150d" prot="public" static="no">
        <type><ref refid="classfc_1_1hmac" kindref="compound">hmac</ref>&lt; <ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref> &gt;</type>
        <definition>typedef hmac&lt;fc::sha256&gt; fc::hmac_sha256</definition>
        <argsstring></argsstring>
        <name>hmac_sha256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/hmac.hpp" line="58" column="1" bodyfile="libraries/fc/include/fc/crypto/hmac.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a4faeb3fdc0252035fbd10ea94b230f35" prot="public" static="no">
        <type><ref refid="classfc_1_1hmac" kindref="compound">hmac</ref>&lt; <ref refid="classfc_1_1sha512" kindref="compound">fc::sha512</ref> &gt;</type>
        <definition>typedef hmac&lt;fc::sha512&gt; fc::hmac_sha512</definition>
        <argsstring></argsstring>
        <name>hmac_sha512</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/hmac.hpp" line="59" column="1" bodyfile="libraries/fc/include/fc/crypto/hmac.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a5d143859f1f34b560f2f2f13d9d078d4" prot="public" static="no">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref></type>
        <definition>typedef ripemd160 fc::uint160_t</definition>
        <argsstring></argsstring>
        <name>uint160_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/ripemd160.hpp" line="92" column="1" bodyfile="libraries/fc/include/fc/crypto/ripemd160.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a617e6e51560e0b0863d3fa56784ec21a" prot="public" static="no">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref></type>
        <definition>typedef ripemd160 fc::uint160</definition>
        <argsstring></argsstring>
        <name>uint160</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/ripemd160.hpp" line="93" column="1" bodyfile="libraries/fc/include/fc/crypto/ripemd160.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1afdba39e66ca1f13c0f2e7efd1f9f7d82" prot="public" static="no">
        <type><ref refid="classfc_1_1sha256" kindref="compound">sha256</ref></type>
        <definition>typedef sha256 fc::uint256</definition>
        <argsstring></argsstring>
        <name>uint256</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha256.hpp" line="88" column="1" bodyfile="libraries/fc/include/fc/crypto/sha256.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1aea50020ff4559adf099d43533cd5dbe7" prot="public" static="no">
        <type><ref refid="classfc_1_1sha512" kindref="compound">fc::sha512</ref></type>
        <definition>typedef fc::sha512 fc::uint512</definition>
        <argsstring></argsstring>
        <name>uint512</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha512.hpp" line="84" column="1" bodyfile="libraries/fc/include/fc/crypto/sha512.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a15170d1be1e682691dfe6ae09790edce" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1exception" kindref="compound">exception</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;exception&gt; fc::exception_ptr</definition>
        <argsstring></argsstring>
        <name>exception_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="131" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a16f272a3d05d2641cb2bf67bac4673dc" prot="public" static="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; <ref refid="classfc_1_1exception" kindref="compound">exception</ref> &gt;</type>
        <definition>typedef optional&lt;exception&gt; fc::oexception</definition>
        <argsstring></argsstring>
        <name>oexception</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="133" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a1de1d095ba3c29dc0ced564bc8f45123" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1buffered__istream" kindref="compound">buffered_istream</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;buffered_istream&gt; fc::buffered_istream_ptr</definition>
        <argsstring></argsstring>
        <name>buffered_istream_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/buffered_iostream.hpp" line="46" column="1" bodyfile="libraries/fc/include/fc/io/buffered_iostream.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a95f13893819c9b7254bd8dc1f906c497" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1buffered__ostream" kindref="compound">buffered_ostream</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;buffered_ostream&gt; fc::buffered_ostream_ptr</definition>
        <argsstring></argsstring>
        <name>buffered_ostream_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/buffered_iostream.hpp" line="72" column="1" bodyfile="libraries/fc/include/fc/io/buffered_iostream.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a989db13519a666ba07e85898065f442c" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1istream" kindref="compound">istream</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;istream&gt; fc::istream_ptr</definition>
        <argsstring></argsstring>
        <name>istream_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="35" column="1" bodyfile="libraries/fc/include/fc/io/iostream.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a5ac0fab282e9b3eb115cf8204906f840" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;ostream&gt; fc::ostream_ptr</definition>
        <argsstring></argsstring>
        <name>ostream_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="59" column="1" bodyfile="libraries/fc/include/fc/io/iostream.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a54370140f7c964a12e90393d525605d1" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classfc_1_1log__message" kindref="compound">log_message</ref> &gt;</type>
        <definition>typedef std::vector&lt;log_message&gt; fc::log_messages</definition>
        <argsstring></argsstring>
        <name>log_messages</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/log/log_message.hpp" line="132" column="1" bodyfile="libraries/fc/include/fc/log/log_message.hpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a291b2d8156224ee698348250d67809f2" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1rate__limiting__group" kindref="compound">rate_limiting_group</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;rate_limiting_group&gt; fc::rate_limiting_group_ptr</definition>
        <argsstring></argsstring>
        <name>rate_limiting_group_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/rate_limiting.hpp" line="38" column="1" bodyfile="libraries/fc/include/fc/network/rate_limiting.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a3d25a352f40fdcbb73a40449e872d42a" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1tcp__socket" kindref="compound">tcp_socket</ref> &gt;</type>
        <definition>typedef std::shared_ptr&lt;tcp_socket&gt; fc::tcp_socket_ptr</definition>
        <argsstring></argsstring>
        <name>tcp_socket_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/tcp_socket.hpp" line="61" column="1" bodyfile="libraries/fc/include/fc/network/tcp_socket.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1ae6325fac6e1f347087ba4bd17327a223" prot="public" static="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; std::string &gt;</type>
        <definition>typedef fc::optional&lt; std::string &gt; fc::ostring</definition>
        <argsstring></argsstring>
        <name>ostring</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/url.hpp" line="10" column="1" bodyfile="libraries/fc/include/fc/network/url.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a454f339e33678107b206f925ddb7237b" prot="public" static="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &gt;</type>
        <definition>typedef fc::optional&lt;fc::path&gt; fc::opath</definition>
        <argsstring></argsstring>
        <name>opath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/url.hpp" line="11" column="1" bodyfile="libraries/fc/include/fc/network/url.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1acbb95eb9af4c73366c47e15ad4c5a183" prot="public" static="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classfc_1_1variant__object" kindref="compound">fc::variant_object</ref> &gt;</type>
        <definition>typedef fc::optional&lt;fc::variant_object&gt; fc::ovariant_object</definition>
        <argsstring></argsstring>
        <name>ovariant_object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/url.hpp" line="12" column="1" bodyfile="libraries/fc/include/fc/network/url.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a6c2f257e2f2f1a64dbdfe8b7b5e0f411" prot="public" static="no">
        <type>boost::signals2::signal&lt; T &gt;</type>
        <definition>using fc::signal = typedef boost::signals2::signal&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>signal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/signals.hpp" line="20" column="1" bodyfile="libraries/fc/include/fc/signals.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1ab664699ec38ccad4e689cd838a3d9d35" prot="public" static="no">
        <type>boost::signals2::scoped_connection</type>
        <definition>using fc::scoped_connection = typedef boost::signals2::scoped_connection</definition>
        <argsstring></argsstring>
        <name>scoped_connection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/signals.hpp" line="22" column="1" bodyfile="libraries/fc/include/fc/signals.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1acb5e8b1c238084c288156f135678ba6a" prot="public" static="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">fc::optional</ref>&lt; <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &gt;</type>
        <definition>typedef fc::optional&lt;time_point&gt; fc::otime_point</definition>
        <argsstring></argsstring>
        <name>otime_point</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="125" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &gt;</type>
        <definition>typedef std::vector&lt;variant&gt; fc::variants</definition>
        <argsstring></argsstring>
        <name>variants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="170" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a19fe720f3bd477ddabfa64af0197880b" prot="public" static="no">
        <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &gt;</type>
        <definition>typedef optional&lt;variant&gt; fc::ovariant</definition>
        <argsstring></argsstring>
        <name>ovariant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="376" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a1b3b274949f105f85361886e7a71c4b3" prot="public" static="no">
        <type>const <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> *</type>
        <definition>typedef const variant_object* fc::const_variant_object_ptr</definition>
        <argsstring></argsstring>
        <name>const_variant_object_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/variant.cpp" line="176" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1aadd61a2cdda27916a87e371eca11ca65" prot="public" static="no">
        <type>const <ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">variants</ref> *</type>
        <definition>typedef const variants* fc::const_variants_ptr</definition>
        <argsstring></argsstring>
        <name>const_variants_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/variant.cpp" line="177" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1ad704d5db30b44013543e951d889ca437" prot="public" static="no">
        <type>const <ref refid="structfc_1_1blob" kindref="compound">blob</ref> *</type>
        <definition>typedef const blob* fc::const_blob_ptr</definition>
        <argsstring></argsstring>
        <name>const_blob_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/variant.cpp" line="178" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacefc_1a36d22c779fd1bc3b3635166055cb025f" prot="public" static="no">
        <type>const string *</type>
        <definition>typedef const string* fc::const_string_ptr</definition>
        <argsstring></argsstring>
        <name>const_string_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/variant.cpp" line="179" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="179" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacefc_1a762e180b7b98110b076b6351716a59d6" prot="public" static="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t fc::bits_per_char</definition>
        <argsstring></argsstring>
        <name>bits_per_char</name>
        <initializer>= 0x08</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="34" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1ae8cfbd9585447589844655cc451b2143" prot="public" static="yes" mutable="no">
        <type>const unsigned char</type>
        <definition>const unsigned char fc::bit_mask[bits_per_char]</definition>
        <argsstring>[bits_per_char]</argsstring>
        <name>bit_mask</name>
        <initializer>= {
                                                       0x01,
                                                       0x02,
                                                       0x04,
                                                       0x08,
                                                       0x10,
                                                       0x20,
                                                       0x40,
                                                       0x80
                                                     }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="35" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a3cc0ae501000dcf3ad7ad8124b985b05" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fc::enable_record_assert_trip</definition>
        <argsstring></argsstring>
        <name>enable_record_assert_trip</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="327" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a4f854ac27726fd97dac06554cc368e8f" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const fc::git_revision_sha</definition>
        <argsstring></argsstring>
        <name>git_revision_sha</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/git_revision.hpp" line="6" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a0a92e49b2dffa85ef9c6264e493e70b0" prot="public" static="no" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t fc::git_revision_unix_timestamp</definition>
        <argsstring></argsstring>
        <name>git_revision_unix_timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/git_revision.hpp" line="7" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a1bf3875d7e931362d181f93f3e2f4ec0" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1cout__t" kindref="compound">cout_t</ref> &amp;</type>
        <definition>cout_t &amp; fc::cout</definition>
        <argsstring></argsstring>
        <name>cout</name>
        <initializer>= *<ref refid="namespacefc_1a3a753380461b9fa46ca87d0b5a0cf498" kindref="member">cout_ptr</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/stdio.hpp" line="32" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1aefe8a91d814982b15144ee62dfa9a80b" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1cerr__t" kindref="compound">cerr_t</ref> &amp;</type>
        <definition>cerr_t &amp; fc::cerr</definition>
        <argsstring></argsstring>
        <name>cerr</name>
        <initializer>= *<ref refid="namespacefc_1a8d46ba0c66f420e452d874e537dbbb9b" kindref="member">cerr_ptr</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/stdio.hpp" line="33" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a7715ec94058242100a17bb9f66437a05" prot="public" static="no" mutable="no">
        <type><ref refid="classfc_1_1cin__t" kindref="compound">cin_t</ref> &amp;</type>
        <definition>cin_t &amp; fc::cin</definition>
        <argsstring></argsstring>
        <name>cin</name>
        <initializer>= *<ref refid="namespacefc_1ab98708653740a1d85bd3f6e01b556e16" kindref="member">cin_ptr</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/stdio.hpp" line="34" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1ab98708653740a1d85bd3f6e01b556e16" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1cin__t" kindref="compound">cin_t</ref> &gt;</type>
        <definition>std::shared_ptr&lt; cin_t &gt; fc::cin_ptr</definition>
        <argsstring></argsstring>
        <name>cin_ptr</name>
        <initializer>= std::make_shared&lt;<ref refid="classfc_1_1cin__t" kindref="compound">cin_t</ref>&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/stdio.hpp" line="36" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a3a753380461b9fa46ca87d0b5a0cf498" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1cout__t" kindref="compound">cout_t</ref> &gt;</type>
        <definition>std::shared_ptr&lt; cout_t &gt; fc::cout_ptr</definition>
        <argsstring></argsstring>
        <name>cout_ptr</name>
        <initializer>= std::make_shared&lt;<ref refid="classfc_1_1cout__t" kindref="compound">cout_t</ref>&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/stdio.hpp" line="37" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a8d46ba0c66f420e452d874e537dbbb9b" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1cerr__t" kindref="compound">cerr_t</ref> &gt;</type>
        <definition>std::shared_ptr&lt; cerr_t &gt; fc::cerr_ptr</definition>
        <argsstring></argsstring>
        <name>cerr_ptr</name>
        <initializer>= std::make_shared&lt;<ref refid="classfc_1_1cerr__t" kindref="compound">cerr_t</ref>&gt;()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/stdio.hpp" line="38" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a395c1448795f686a45a9a153caecca25" prot="public" static="no" mutable="no">
        <type><ref refid="structfc_1_1openssl__thread__config" kindref="compound">openssl_thread_config</ref></type>
        <definition>openssl_thread_config fc::openssl_thread_config_manager</definition>
        <argsstring></argsstring>
        <name>openssl_thread_config_manager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/aes.cpp" line="402" column="1" bodyfile="libraries/fc/src/crypto/aes.cpp" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a3df628b70d5045c97ab83609f1087f7a" prot="public" static="yes" mutable="no">
        <type>const uint64_t</type>
        <definition>const uint64_t fc::k0</definition>
        <argsstring></argsstring>
        <name>k0</name>
        <initializer>= 0xc3a5c85c97cb3127ULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="130" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a1d04928614aa7391f66ed4c524c5da36" prot="public" static="yes" mutable="no">
        <type>const uint64_t</type>
        <definition>const uint64_t fc::k1</definition>
        <argsstring></argsstring>
        <name>k1</name>
        <initializer>= 0xb492b66fbe98f273ULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="131" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a578f4a7e84278fc612ec60715bf07564" prot="public" static="yes" mutable="no">
        <type>const uint64_t</type>
        <definition>const uint64_t fc::k2</definition>
        <argsstring></argsstring>
        <name>k2</name>
        <initializer>= 0x9ae16a3b2f90404fULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="132" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a731db0cad74cd98d481eeaa5d4bd4f31" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t fc::c1</definition>
        <argsstring></argsstring>
        <name>c1</name>
        <initializer>= 0xcc9e2d51</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="135" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a3a610222f4aa3e93002dda0b3f35b762" prot="public" static="yes" mutable="no">
        <type>const uint32_t</type>
        <definition>const uint32_t fc::c2</definition>
        <argsstring></argsstring>
        <name>c2</name>
        <initializer>= 0x1b873593</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="136" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a9a695c50e9134025e913e761da433762" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool fc::reg_console_appender</definition>
        <argsstring></argsstring>
        <name>reg_console_appender</name>
        <initializer>= <ref refid="classfc_1_1appender_1a0be600b57778bf1c4e2d8d3a7e6347fc" kindref="member">appender::register_appender</ref>&lt;<ref refid="classfc_1_1console__appender" kindref="compound">console_appender</ref>&gt;( &quot;console&quot; )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/log/appender.cpp" line="47" column="1" bodyfile="libraries/fc/src/log/appender.cpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1ae9717c598b0fa8cd88118a7bd29b19e9" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool fc::reg_file_appender</definition>
        <argsstring></argsstring>
        <name>reg_file_appender</name>
        <initializer>= <ref refid="classfc_1_1appender_1a0be600b57778bf1c4e2d8d3a7e6347fc" kindref="member">appender::register_appender</ref>&lt;<ref refid="classfc_1_1file__appender" kindref="compound">file_appender</ref>&gt;( &quot;file&quot; )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/log/appender.cpp" line="48" column="1" bodyfile="libraries/fc/src/log/appender.cpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1acffad1884b0df85f27d2206aba6861db" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool fc::reg_gelf_appender</definition>
        <argsstring></argsstring>
        <name>reg_gelf_appender</name>
        <initializer>= <ref refid="classfc_1_1appender_1a0be600b57778bf1c4e2d8d3a7e6347fc" kindref="member">appender::register_appender</ref>&lt;<ref refid="classfc_1_1gelf__appender" kindref="compound">gelf_appender</ref>&gt;( &quot;gelf&quot; )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/log/appender.cpp" line="49" column="1" bodyfile="libraries/fc/src/log/appender.cpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacefc_1a09b72f5710fe4238d40356661996b8b6" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fc::do_default_config</definition>
        <argsstring></argsstring>
        <name>do_default_config</name>
        <initializer>= <ref refid="namespacefc_1ad64fa786e47f4f646fb607f1a039c680" kindref="member">configure_logging</ref>( <ref refid="structfc_1_1logging__config_1a8af01d185dda6259354f127c526902d5" kindref="member">logging_config::default_config</ref>() )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/log/logger.cpp" line="77" column="1" bodyfile="libraries/fc/src/log/logger.cpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacefc_1aeae8690e0c938b502873268a71e02f8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref></type>
        <definition>bloom_filter fc::operator&amp;</definition>
        <argsstring>(const bloom_filter &amp;a, const bloom_filter &amp;b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="596" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="596" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a55c88e95ca029e7156bc0c883a280eb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref></type>
        <definition>bloom_filter fc::operator|</definition>
        <argsstring>(const bloom_filter &amp;a, const bloom_filter &amp;b)</argsstring>
        <name>operator|</name>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="603" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="603" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab64622edd2e839b6ed7a293a08698a80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref></type>
        <definition>bloom_filter fc::operator^</definition>
        <argsstring>(const bloom_filter &amp;a, const bloom_filter &amp;b)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1bloom__filter" kindref="compound">bloom_filter</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/bloom_filter.hpp" line="610" column="1" bodyfile="libraries/fc/include/fc/bloom_filter.hpp" bodystart="610" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aba55449a0a9043d5a4041c6761b684af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::zlib_compress</definition>
        <argsstring>(const std::string &amp;in)</argsstring>
        <name>zlib_compress</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/compress/zlib.hpp" line="8" column="1" bodyfile="libraries/fc/src/compress/zlib.cpp" bodystart="7" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1add1e54b0e6cdefb3544f58e6888d29ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const flat_set&lt; T, A... &gt; &amp;var, variant &amp;vo, uint32_t _max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const flat_set&lt; T, A... &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/container/flat.hpp" line="105" column="1" bodyfile="libraries/fc/include/fc/container/flat.hpp" bodystart="105" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a7fad1781925faf69eca1fc23228158cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, flat_set&lt; T, A... &gt; &amp;vo, uint32_t _max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>flat_set&lt; T, A... &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/container/flat.hpp" line="116" column="1" bodyfile="libraries/fc/include/fc/container/flat.hpp" bodystart="116" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5b13b412cf8ff031be2e6a20f9d82060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const flat_map&lt; K, T... &gt; &amp;var, variant &amp;vo, uint32_t _max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const flat_map&lt; K, T... &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/container/flat.hpp" line="128" column="1" bodyfile="libraries/fc/include/fc/container/flat.hpp" bodystart="128" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a47a625b6d52557d2639292798c63a40e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, flat_map&lt; K, T, A... &gt; &amp;vo, uint32_t _max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>flat_map&lt; K, T, A... &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/container/flat.hpp" line="139" column="1" bodyfile="libraries/fc/include/fc/container/flat.hpp" bodystart="139" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1addbc2fa89df8d01a1a4d0dc8631d07bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const zero_initialized_array&lt; unsigned char, N &gt; &amp;bi, variant &amp;v, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1zero__initialized__array" kindref="compound">zero_initialized_array</ref>&lt; unsigned char, N &gt; &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/container/zeroed_array.hpp" line="52" column="1" bodyfile="libraries/fc/include/fc/container/zeroed_array.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1662f39d849243539b9c8c2bc71373cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, zero_initialized_array&lt; unsigned char, N &gt; &amp;bi, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1zero__initialized__array" kindref="compound">zero_initialized_array</ref>&lt; unsigned char, N &gt; &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/container/zeroed_array.hpp" line="57" column="1" bodyfile="libraries/fc/include/fc/container/zeroed_array.hpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a71eea521fccf7c6c7a01402d66de6a3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned fc::aes_encrypt</definition>
        <argsstring>(unsigned char *plaintext, int plaintext_len, unsigned char *key, unsigned char *iv, unsigned char *ciphertext)</argsstring>
        <name>aes_encrypt</name>
        <param>
          <type>unsigned char *</type>
          <declname>plaintext</declname>
        </param>
        <param>
          <type>int</type>
          <declname>plaintext_len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>ciphertext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>example method from wiki.opensslfoundation.com </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/aes.hpp" line="40" column="1" bodyfile="libraries/fc/src/crypto/aes.cpp" bodystart="181" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a17a540884c97b458fd605c12222e8070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned fc::aes_decrypt</definition>
        <argsstring>(unsigned char *ciphertext, int ciphertext_len, unsigned char *key, unsigned char *iv, unsigned char *plaintext)</argsstring>
        <name>aes_decrypt</name>
        <param>
          <type>unsigned char *</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ciphertext_len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>plaintext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/aes.hpp" line="42" column="1" bodyfile="libraries/fc/src/crypto/aes.cpp" bodystart="230" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a34e6438dfb3596540f7bf52faf97bbd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned fc::aes_cfb_decrypt</definition>
        <argsstring>(unsigned char *ciphertext, int ciphertext_len, unsigned char *key, unsigned char *iv, unsigned char *plaintext)</argsstring>
        <name>aes_cfb_decrypt</name>
        <param>
          <type>unsigned char *</type>
          <declname>ciphertext</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ciphertext_len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>iv</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>plaintext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/aes.hpp" line="44" column="1" bodyfile="libraries/fc/src/crypto/aes.cpp" bodystart="279" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1af00401a48f0a79a846a8f6db60591d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt; char &gt; fc::aes_encrypt</definition>
        <argsstring>(const fc::sha512 &amp;key, const std::vector&lt; char &gt; &amp;plain_text)</argsstring>
        <name>aes_encrypt</name>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">fc::sha512</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>plain_text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/aes.hpp" line="47" column="1" bodyfile="libraries/fc/src/crypto/aes.cpp" bodystart="328" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1abaec8d5ba81a275a867004314358730c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt; char &gt; fc::aes_decrypt</definition>
        <argsstring>(const fc::sha512 &amp;key, const std::vector&lt; char &gt; &amp;cipher_text)</argsstring>
        <name>aes_decrypt</name>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">fc::sha512</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>cipher_text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/aes.hpp" line="48" column="1" bodyfile="libraries/fc/src/crypto/aes.cpp" bodystart="339" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8373bafd21e20c371b433c3a4ea2161f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::aes_save</definition>
        <argsstring>(const fc::path &amp;file, const fc::sha512 &amp;key, std::vector&lt; char &gt; plain_text)</argsstring>
        <name>aes_save</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">fc::sha512</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>std::vector&lt; char &gt;</type>
          <declname>plain_text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>encrypts plain_text and then includes a checksum that enables us to verify the integrety of the file / key prior to decryption. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/aes.hpp" line="53" column="1" bodyfile="libraries/fc/src/crypto/aes.cpp" bodystart="353" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a971e5743b54d7c728f068af266a9e6f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt; char &gt; fc::aes_load</definition>
        <argsstring>(const fc::path &amp;file, const fc::sha512 &amp;key)</argsstring>
        <name>aes_load</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">fc::sha512</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>recovers the plain_text saved via <ref refid="namespacefc_1a8373bafd21e20c371b433c3a4ea2161f" kindref="member">aes_save()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/aes.hpp" line="58" column="1" bodyfile="libraries/fc/src/crypto/aes.cpp" bodystart="369" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad2cac4c10fd7906fd43da935e2a59740" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::to_base58</definition>
        <argsstring>(const char *d, size_t s)</argsstring>
        <name>to_base58</name>
        <param>
          <type>const char *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/base58.hpp" line="6" column="1" bodyfile="libraries/fc/src/crypto/base58.cpp" bodystart="612" bodyend="614"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ae3ae440d44e0f67d60cb985a336cb4ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::to_base58</definition>
        <argsstring>(const std::vector&lt; char &gt; &amp;data)</argsstring>
        <name>to_base58</name>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/base58.hpp" line="7" column="1" bodyfile="libraries/fc/src/crypto/base58.cpp" bodystart="616" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab9aa48ceb035b5fc4b0ff9e48b40bc1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt; char &gt; fc::from_base58</definition>
        <argsstring>(const std::string &amp;base58_str)</argsstring>
        <name>from_base58</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>base58_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/base58.hpp" line="8" column="1" bodyfile="libraries/fc/src/crypto/base58.cpp" bodystart="622" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6f54a8adb9386444b669df3240e4f60d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fc::from_base58</definition>
        <argsstring>(const std::string &amp;base58_str, char *out_data, size_t out_data_len)</argsstring>
        <name>from_base58</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>base58_str</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>out_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>out_data_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of bytes decoded </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/base58.hpp" line="9" column="1" bodyfile="libraries/fc/src/crypto/base58.cpp" bodystart="633" bodyend="644"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3668095306e6c6c4c53de5d7701e4dde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::base64_encode</definition>
        <argsstring>(unsigned char const *bytes_to_encode, unsigned int in_len)</argsstring>
        <name>base64_encode</name>
        <param>
          <type>unsigned char const *</type>
          <declname>bytes_to_encode</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>in_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/base64.hpp" line="5" column="1" bodyfile="libraries/fc/src/crypto/base64.cpp" bodystart="51" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a803d5375415a7eb021f108a11639e718" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::base64_encode</definition>
        <argsstring>(char const *bytes_to_encode, unsigned int in_len)</argsstring>
        <name>base64_encode</name>
        <param>
          <type>char const *</type>
          <declname>bytes_to_encode</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>in_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/base64.hpp" line="6" column="1" bodyfile="libraries/fc/include/fc/crypto/base64.hpp" bodystart="6" bodyend="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a7007f44b8d50af43e7cc0874ceaed58e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::base64_encode</definition>
        <argsstring>(const std::string &amp;enc)</argsstring>
        <name>base64_encode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>enc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/base64.hpp" line="7" column="1" bodyfile="libraries/fc/src/crypto/base64.cpp" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ae8deb03ba4f32aa68c5dcc62578ea2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::base64_decode</definition>
        <argsstring>(const std::string &amp;encoded_string)</argsstring>
        <name>base64_decode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoded_string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/base64.hpp" line="8" column="1" bodyfile="libraries/fc/src/crypto/base64.cpp" bodystart="96" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a19c8141219756d008e1822043b0423b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const bigint &amp;bi, variant &amp;v, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1bigint" kindref="compound">bigint</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>encodes the big int as base64 string, or a number </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/bigint.hpp" line="72" column="1" bodyfile="libraries/fc/src/crypto/bigint.cpp" bodystart="215" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9eeb787baa414631bd43dfbdbf2b2215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, bigint &amp;bi, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1bigint" kindref="compound">bigint</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>decodes the big int as base64 string, or a number </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/bigint.hpp" line="74" column="1" bodyfile="libraries/fc/src/crypto/bigint.cpp" bodystart="222" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8bc1967c65aedd6545bf78fe6ffde635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t fc::city_hash64</definition>
        <argsstring>(const char *buf, size_t len)</argsstring>
        <name>city_hash64</name>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/city.hpp" line="53" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="375" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a61954d69e71a9a610cdb843823459d35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t fc::city_hash32</definition>
        <argsstring>(const char *buf, size_t len)</argsstring>
        <name>city_hash32</name>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/city.hpp" line="58" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="198" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a7b219440c7949d024ec8d150261ea9c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fc::city_hash_size_t</definition>
        <argsstring>(const char *buf, size_t len)</argsstring>
        <name>city_hash_size_t</name>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/city.hpp" line="59" column="1" bodyfile="libraries/fc/include/fc/crypto/city.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1af753d92e60a5eba8b60493145cccf14c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint128_t</type>
        <definition>uint128_t fc::city_hash_crc_128</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>city_hash_crc_128</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/city.hpp" line="63" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="649" bodyend="657"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a150ca4cd9c0318ca45dc0dc7df5d58b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1sha256" kindref="compound">fc::sha256</ref></type>
        <definition>fc::sha256 fc::digest</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>digest</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/digest.hpp" line="9" column="1" bodyfile="libraries/fc/include/fc/crypto/digest.hpp" bodystart="9" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad8839e8d1e1c7edfd7b2cd7ee4c4404a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const ecc::private_key &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">ecc::private_key</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="232" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="381" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a91d579d01d148400106ab4694a8a120e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, ecc::private_key &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1ecc_1_1private__key" kindref="compound">ecc::private_key</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="233" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="386" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac6d9983f5ca617aa09d74df0a3eba4f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const ecc::public_key &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">ecc::public_key</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="234" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="393" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a7e8de69142fec2450e5b442831b97f16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, ecc::public_key &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1ecc_1_1public__key" kindref="compound">ecc::public_key</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/elliptic.hpp" line="235" column="1" bodyfile="libraries/fc/src/crypto/elliptic_common.cpp" bodystart="398" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a96facd340a87c8ba5cb5c3a7b66f58c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const hash160 &amp;bi, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/hash160.hpp" line="108" column="1" bodyfile="libraries/fc/src/crypto/hash160.cpp" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a058f3a8af955109f23da590097710913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, hash160 &amp;bi, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/hash160.hpp" line="109" column="1" bodyfile="libraries/fc/src/crypto/hash160.cpp" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6a0fb5b79914774be4ab66462362b292" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t fc::from_hex</definition>
        <argsstring>(char c)</argsstring>
        <name>from_hex</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/hex.hpp" line="7" column="1" bodyfile="libraries/fc/src/crypto/hex.cpp" bodystart="6" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aab567c89004d329f560014d9943afcd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::to_hex</definition>
        <argsstring>(const char *d, uint32_t s)</argsstring>
        <name>to_hex</name>
        <param>
          <type>const char *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/hex.hpp" line="8" column="1" bodyfile="libraries/fc/src/crypto/hex.cpp" bodystart="17" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a4b5763cec58ad289f6668a00b42793a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::to_hex</definition>
        <argsstring>(const std::vector&lt; char &gt; &amp;data)</argsstring>
        <name>to_hex</name>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/hex.hpp" line="9" column="1" bodyfile="libraries/fc/src/crypto/hex.cpp" bodystart="42" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1abe219d04ddc713eadcab68e22f2d35db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t fc::from_hex</definition>
        <argsstring>(const std::string &amp;hex_str, char *out_data, size_t out_data_len)</argsstring>
        <name>from_hex</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>hex_str</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>out_data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>out_data_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of bytes decoded </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/hex.hpp" line="14" column="1" bodyfile="libraries/fc/src/crypto/hex.cpp" bodystart="27" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab3fe255763535cb35384ce63a6514739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::store_configuration_path</definition>
        <argsstring>(const path &amp;filePath)</argsstring>
        <name>store_configuration_path</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>filePath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows to explicitly specify OpenSSL configuration file path to be loaded at OpenSSL library init. If not set OpenSSL will try to load the conf. file (openssl.cnf) from the path it was configured with what caused serious Keyhotee startup bugs on some Win7, Win8 machines. <simplesect kind="warning"><para>to be effective this method should be used before any part using OpenSSL, especially before init_openssl call </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/openssl.hpp" line="65" column="1" bodyfile="libraries/fc/src/crypto/openssl.cpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5bf0ca50d51c3ac0f7a0e182bab7d234" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fc::init_openssl</definition>
        <argsstring>()</argsstring>
        <name>init_openssl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/openssl.hpp" line="66" column="1" bodyfile="libraries/fc/src/crypto/openssl.cpp" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a76f700374df97faaacb54ebe324ca384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::rand_bytes</definition>
        <argsstring>(char *buf, int count)</argsstring>
        <name>rand_bytes</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/rand.hpp" line="6" column="1" bodyfile="libraries/fc/src/crypto/rand.cpp" bodystart="9" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ade422cff1252ddc714c086022a9a72a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const ripemd160 &amp;bi, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/ripemd160.hpp" line="89" column="1" bodyfile="libraries/fc/src/crypto/ripemd160.cpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a7f6fd72a93ef8c1ac1565ad99537db01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, ripemd160 &amp;bi, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/ripemd160.hpp" line="90" column="1" bodyfile="libraries/fc/src/crypto/ripemd160.cpp" bodystart="106" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a67d6fb32d51eb0949c2f184a039a548e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const sha1 &amp;bi, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="86" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a11e5362c57eb81ff073ab1f15bcff1c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, sha1 &amp;bi, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha1.hpp" line="87" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="90" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab968c98e3fe24d09022eda886a369598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const sha224 &amp;bi, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha224.hpp" line="86" column="1" bodyfile="libraries/fc/src/crypto/sha224.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1132f763f5045d1afbb4824577ba87cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, sha224 &amp;bi, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha224.hpp" line="87" column="1" bodyfile="libraries/fc/src/crypto/sha224.cpp" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aec54815326dd9615f291b20849bc732f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const sha256 &amp;bi, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha256.hpp" line="91" column="1" bodyfile="libraries/fc/src/crypto/sha256.cpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5b8bc3210132b0c118a4e89193bd108e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, sha256 &amp;bi, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha256.hpp" line="92" column="1" bodyfile="libraries/fc/src/crypto/sha256.cpp" bodystart="106" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6b40563781b4086ab9094af8360bfded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const sha512 &amp;bi, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha512.hpp" line="87" column="1" bodyfile="libraries/fc/src/crypto/sha512.cpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5bc0a20b634ab359a2edf74ba0695def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, sha512 &amp;bi, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/crypto/sha512.hpp" line="88" column="1" bodyfile="libraries/fc/src/crypto/sha512.cpp" bodystart="92" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1abf14262fd2be64b59f90a5227655b78b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const exception &amp;e, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1exception" kindref="compound">exception</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="129" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="145" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac958b1d15deff0f239a17ceb8f58dd10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;e, exception &amp;ll, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1exception" kindref="compound">exception</ref> &amp;</type>
          <declname>ll</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="130" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="158" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1647dced269f496f726a7fe5181b35d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacefc_1a15170d1be1e682691dfe6ae09790edce" kindref="member">fc::exception_ptr</ref></type>
        <definition>fc::exception_ptr fc::copy_exception</definition>
        <argsstring>(T &amp;&amp;e)</argsstring>
        <name>copy_exception</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="165" column="1" bodyfile="libraries/fc/include/fc/exception/exception.hpp" bodystart="165" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad2302d8c8fcb9e9814a2da640741b3fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(timeout_exception, timeout_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>timeout_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca0269f214acef1ad4c7531974bc011893" kindref="member">timeout_exception_code</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a782610f0bec3e55ad275ffaf07d31bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(file_not_found_exception, file_not_found_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>file_not_found_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca39cab94a272e08bc5cdc93f64bf42807" kindref="member">file_not_found_exception_code</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aadd3004e2d562e2d6c18c1c79859b941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(parse_error_exception, parse_error_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>parse_error_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca5b91c403f2d77988e737fedf17bbd412" kindref="member">parse_error_exception_code</ref></type>
        </param>
        <briefdescription>
<para>reports parse errors </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8266435782441e1d28f1f1870b006ff4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(invalid_arg_exception, invalid_arg_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>invalid_arg_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca68eb1b23cb82c44ef0f142c5dfc0d904" kindref="member">invalid_arg_exception_code</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6b73c07266267e7872e7783af4b43605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(key_not_found_exception, key_not_found_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>key_not_found_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca727029291eee67ac62d1a0878e94070c" kindref="member">key_not_found_exception_code</ref></type>
        </param>
        <briefdescription>
<para>reports when a key, guid, or other item is not found. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1adfb230021de27f62a2bd0be0e752879a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(bad_cast_exception, bad_cast_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>bad_cast_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca0c4ff755a0bba3982b4e737470bf1d39" kindref="member">bad_cast_exception_code</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab42ef400d527917aaa43450016f68f06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(out_of_range_exception, out_of_range_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>out_of_range_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35caf972859aafe0f2ea87fb5a12f2cad5fa" kindref="member">out_of_range_exception_code</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1abb9e08ba5fe2951cb7d7fd4a654580c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(method_not_found_exception, method_not_found_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>method_not_found_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca3716ecbe70314a83c0f39fc0b07d4ce0" kindref="member">method_not_found_exception_code</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a94c6566c961bc205611192eb11884859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(invalid_operation_exception, invalid_operation_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>invalid_operation_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35caf862720abffe585a5f5f8d7162c39e2c" kindref="member">invalid_operation_exception_code</ref></type>
        </param>
        <briefdescription>
<para>if an operation is unsupported or not valid this may be thrown </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1acae529bb04e7a2fe9762bc495c4185d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(unknown_host_exception, unknown_host_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>unknown_host_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca04557e59532fe8ed76a7b27678f3a596" kindref="member">unknown_host_exception_code</ref></type>
        </param>
        <briefdescription>
<para>if an host name can not be resolved this may be thrown </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1d7efeed98e6be9985e959f98aed7bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(canceled_exception, canceled_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>canceled_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35cab00067de165140788c7d542c04e14f4d" kindref="member">canceled_exception_code</ref></type>
        </param>
        <briefdescription>
<para>used to report a canceled Operation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1afb0fdf3168123857611c63716a4f8d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(assert_exception, assert_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>assert_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca0609f726018df8d223cd932c85d31b6c" kindref="member">assert_exception_code</ref></type>
        </param>
        <briefdescription>
<para>used inplace of assert() to report violations of pre conditions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0de30e05c44005a66dc0fd86f510a5be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(eof_exception, eof_exception_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>eof_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35cae485cf170ef74efe7bb8f48e01d68637" kindref="member">eof_exception_code</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a00afbde9d4e553571485af0a03616cf7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(null_optional, null_optional_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>null_optional</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca594c9e76fdd2f38b1a829a2dff2f0cf8" kindref="member">null_optional_code</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa0080a2ec89e25f849fbe26d5f12e0b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(aes_exception, aes_error_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>aes_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca1eb51dcf3fc25d83e37600fcdfb6bc17" kindref="member">aes_error_code</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1af82561ceba80b6be68745a6267e50d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(overflow_exception, overflow_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>overflow_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35cafcfd5276f3288a4d5728f3d3d748cec3" kindref="member">overflow_code</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aad3fa0c8cc445abe1f5c812d71417bd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(underflow_exception, underflow_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type><ref refid="namespacefc_1a3dfcc06566081f07db5677dd267b90f5" kindref="member">underflow_exception</ref></type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35cafe347d7697fa66fd53f6c55db8bfa275" kindref="member">underflow_code</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1af8c4b03fd97f69eef9ce24991c26e970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_DECLARE_EXCEPTION</definition>
        <argsstring>(divide_by_zero_exception, divide_by_zero_code)</argsstring>
        <name>FC_DECLARE_EXCEPTION</name>
        <param>
          <type>divide_by_zero_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca20077a699d37a68d7eeeda0b0d1ac169" kindref="member">divide_by_zero_code</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1acb8e84d548a5e095a3dac99170d859d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::except_str</definition>
        <argsstring>()</argsstring>
        <name>except_str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="319" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="272" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a4e83f6ac6009aff9e3cef3db1cc6b605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::record_assert_trip</definition>
        <argsstring>(const char *filename, uint32_t lineno, const char *expr)</argsstring>
        <name>record_assert_trip</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>lineno</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/exception/exception.hpp" line="321" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="313" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3fcf0d920aea28014aacae50a51d8485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::exists</definition>
        <argsstring>(const path &amp;p)</argsstring>
        <name>exists</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="147" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab123bfeadf918cc293ecad88bca7c499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::is_directory</definition>
        <argsstring>(const path &amp;p)</argsstring>
        <name>is_directory</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="148" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6855142912d4cfb89281ba0c7f4938a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::is_regular_file</definition>
        <argsstring>(const path &amp;p)</argsstring>
        <name>is_regular_file</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="149" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a76b0787468a9f403087b71a894c07ce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::create_directories</definition>
        <argsstring>(const path &amp;p)</argsstring>
        <name>create_directories</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="150" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="210" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a50ad24e0099358d167967f9df2e368fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::remove_all</definition>
        <argsstring>(const path &amp;p)</argsstring>
        <name>remove_all</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="151" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="240" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab76ad94ec93db365293a67053393fbb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1path" kindref="compound">path</ref></type>
        <definition>fc::path fc::absolute</definition>
        <argsstring>(const path &amp;p)</argsstring>
        <name>absolute</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="152" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9fcdf886a023ef71441fd2f02ef3dc04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1path" kindref="compound">path</ref></type>
        <definition>fc::path fc::make_relative</definition>
        <argsstring>(const path &amp;from, const path &amp;to)</argsstring>
        <name>make_relative</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="153" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="346" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac7ca5987762ad2fba3d278b956067171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1path" kindref="compound">path</ref></type>
        <definition>fc::path fc::canonical</definition>
        <argsstring>(const path &amp;p)</argsstring>
        <name>canonical</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="154" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="334" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aae3e907b120751591ca6919ac66c384b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t fc::file_size</definition>
        <argsstring>(const path &amp;p)</argsstring>
        <name>file_size</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="155" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="219" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab533ebf0126ab57947f79946c342acec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t fc::directory_size</definition>
        <argsstring>(const path &amp;p)</argsstring>
        <name>directory_size</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="156" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="221" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0db76f35dc060918029b16de918b1e84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::remove</definition>
        <argsstring>(const path &amp;p)</argsstring>
        <name>remove</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="157" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="327" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a79771837fffd80fcc4bc658ee2fc4b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::copy</definition>
        <argsstring>(const path &amp;from, const path &amp;to)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="158" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="241" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a067b275100894b82b6cf3aa85e804ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::rename</definition>
        <argsstring>(const path &amp;from, const path &amp;to)</argsstring>
        <name>rename</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="159" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="302" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab25ea24552f2c490047c335a102f12fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::resize_file</definition>
        <argsstring>(const path &amp;file, size_t s)</argsstring>
        <name>resize_file</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="160" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="258" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad02fa8571ca999725dfcaa871b672230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::chmod</definition>
        <argsstring>(const path &amp;p, int perm)</argsstring>
        <name>chmod</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>perm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="165" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="278" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9bc83475f555620274c3b776ea38af2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::create_hard_link</definition>
        <argsstring>(const path &amp;from, const path &amp;to)</argsstring>
        <name>create_hard_link</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="167" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="319" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a887060cd05d29b1ed9dec83ec97ee8e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1path" kindref="compound">path</ref></type>
        <definition>path fc::unique_path</definition>
        <argsstring>()</argsstring>
        <name>unique_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="169" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="342" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1afe3ee0e7b733d87469a967ac456302dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1path" kindref="compound">path</ref></type>
        <definition>path fc::temp_directory_path</definition>
        <argsstring>()</argsstring>
        <name>temp_directory_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="170" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="343" bodyend="343"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a638386a755d79377ef4c5c779c731e43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
        <definition>const fc::path &amp; fc::home_path</definition>
        <argsstring>()</argsstring>
        <name>home_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the home directory on Linux and OS X and the Profile directory on Windows </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="173" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="448" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3e2cb20721f4d3404ec07ff31694153e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classfc_1_1path" kindref="compound">path</ref> &amp;</type>
        <definition>const fc::path &amp; fc::app_path</definition>
        <argsstring>()</argsstring>
        <name>app_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the <ref refid="namespacefc_1a638386a755d79377ef4c5c779c731e43" kindref="member">home_path()</ref> on Linux, <ref refid="namespacefc_1a638386a755d79377ef4c5c779c731e43" kindref="member">home_path()</ref>/Library/Application Support/ on OS X, and APPDATA on windows </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="178" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="480" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6e83f7c8488e348511224442f4591d33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
        <definition>const fc::path &amp; fc::current_path</definition>
        <argsstring>()</argsstring>
        <name>current_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>application executable path </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="181" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="498" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1afdae6cfbce3ead9ac530deb56e36b4b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const fc::path &amp;, fc::variant &amp;, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <defname>path_to_convert</defname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <defname>variant_output</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="184" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a594ecddc17790c1b7c132fc2e9eda06e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;, fc::path &amp;, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <defname>variant_to_convert</defname>
        </param>
        <param>
          <type><ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <defname>path_output</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/filesystem.hpp" line="185" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a2b8e30247189705c9bd2a495eec53229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fc::operator+</definition>
        <argsstring>(const fwd&lt; T, S, A &gt; &amp;x, U &amp;&amp;u) -&gt; typename detail::add&lt; T, U &gt;::type</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classfc_1_1fwd" kindref="compound">fwd</ref>&lt; T, S, A &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd_impl.hpp" line="44" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a2db96673fde8ae64be589f48e8bf158e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fc::operator-</definition>
        <argsstring>(const fwd&lt; T, S, A &gt; &amp;x, U &amp;&amp;u) -&gt; typename detail::sub&lt; T, U &gt;::type</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classfc_1_1fwd" kindref="compound">fwd</ref>&lt; T, S, A &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>U &amp;&amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd_impl.hpp" line="47" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a77d311915918f07a27b2f90fc95fc61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fc::operator&lt;&lt;</definition>
        <argsstring>(U &amp;u, const fwd&lt; T, S, A &gt; &amp;f) -&gt; typename detail::insert_op&lt; U, T &gt;::type</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>U &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1fwd" kindref="compound">fwd</ref>&lt; T, S, A &gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd_impl.hpp" line="50" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9607b0bf485e8d787f5ad99655e07dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fc::operator&gt;&gt;</definition>
        <argsstring>(U &amp;u, fwd&lt; T, S, A &gt; &amp;f) -&gt; typename detail::extract_op&lt; U, T &gt;::type</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>U &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1fwd" kindref="compound">fwd</ref>&lt; T, S, A &gt; &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd_impl.hpp" line="53" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a38801b38281743a0d544ad21d0a4aaba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint64_t</type>
            <declname>RequiredSize</declname>
            <defname>RequiredSize</defname>
          </param>
          <param>
            <type>uint64_t</type>
            <declname>ProvidedSize</declname>
            <defname>ProvidedSize</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::check_size</definition>
        <argsstring>()</argsstring>
        <name>check_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/fwd_impl.hpp" line="60" column="1" bodyfile="libraries/fc/include/fc/fwd_impl.hpp" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac9ed963763d3f7747c718cda0ca7ea34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; boost::asio::signal_set &gt;</type>
        <definition>std::shared_ptr&lt; boost::asio::signal_set &gt; fc::set_signal_handler</definition>
        <argsstring>(std::function&lt; void(int)&gt; handler, int signal_num)</argsstring>
        <name>set_signal_handler</name>
        <param>
          <type>std::function&lt; void(int)&gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>int</type>
          <declname>signal_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a handler to process an IPC (inter process communication) signal. Handler will be called from ASIO thread. <simplesect kind="return"><para>shared pointer to the signal_set that holds the handler </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/interprocess/signals.hpp" line="10" column="1" bodyfile="libraries/fc/src/interprocess/signals.cpp" bodystart="6" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a04fece3a66c81285466d0faa0812fa0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType</type>
          </param>
          <param>
            <type>typename EnumType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const enum_type&lt; IntType, EnumType &gt; &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref>&lt; IntType, EnumType &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="51" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aaaf7d6f0ef36bf2baf6bf24bede65256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType</type>
          </param>
          <param>
            <type>typename EnumType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, enum_type&lt; IntType, EnumType &gt; &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1enum__type" kindref="compound">enum_type</ref>&lt; IntType, EnumType &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/enum_type.hpp" line="56" column="1" bodyfile="libraries/fc/include/fc/io/enum_type.hpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a23ea7ee1b75c710ca0ba138e94395ed1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::read_file_contents</definition>
        <argsstring>(const fc::path &amp;filename, std::string &amp;result)</argsstring>
        <name>read_file_contents</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Grab the full contents of a file into a string object. NB reading a full file into memory is a poor choice if the file may be very large. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/fstream.hpp" line="55" column="1" bodyfile="libraries/fc/src/io/fstream.cpp" bodystart="107" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac61269e2611b57c4b2adff0d65ca27f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">fc::istream</ref> &amp;</type>
        <definition>fc::istream &amp; fc::getline</definition>
        <argsstring>(fc::istream &amp;, std::string &amp;, char delim= &apos;\n&apos;)</argsstring>
        <name>getline</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">fc::istream</ref> &amp;</type>
          <defname>i</defname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <defname>s</defname>
        </param>
        <param>
          <type>char</type>
          <declname>delim</declname>
          <defval>&apos;\n&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="63" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="78" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1abce067119c23a10a59c076cc95f3c8c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream&amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, char(&amp;array)[N])</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>char(&amp;)</type>
          <declname>array</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="66" column="1" bodyfile="libraries/fc/include/fc/io/iostream.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0debe1d8d901021ba1b8271fda0241bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, char)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>char</type>
          <defname>v</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="71" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="180" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6af9bae689d7eee526920967b657cf5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const char *v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="72" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a997cfa81321bd84e883d3c28359d40ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const std::string &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="73" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="191" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab8147c662ef7605eb04469d05e01e74c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const double &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="75" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="197" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a4fa808965e71aee9e593126e865fa8e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const float &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const float &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="76" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa4ddcb9025c4051e8e5cf1f6531609da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const int64_t &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const int64_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="77" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6aaa07ae86c7fe7da00b572e854cc57c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const uint64_t &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const uint64_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="78" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1f16880509e7f593f99e3c9e41fa5d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const int32_t &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const int32_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="79" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ae0228bd550c8b9924dab83829a27ebbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const uint32_t &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="80" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0d9bda0baf1dbc90d7ca1204d886240a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const int16_t &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const int16_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="81" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="227" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1e672f4b9b78d6bfdb14ef6c19d9189d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const uint16_t &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const uint16_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="82" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="232" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aca68066a3f7ab241ea744c6129f31c4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const int8_t &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const int8_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="83" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6b1fa132a41ec04dcb364610cb2bfd19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream &amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const uint8_t &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const uint8_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="84" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a271c8579c69becb9261b87b9f6a0a406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
        <definition>ostream&amp; fc::operator&lt;&lt;</definition>
        <argsstring>(ostream &amp;o, const size_t &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>const size_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aecba272559ff7df4f9f537046a3eb914" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
        <definition>istream &amp; fc::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;o, std::string &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="89" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="255" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9a533c04bdd1dbf40dcc5b380ecf4bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
        <definition>istream &amp; fc::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;o, char &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>char &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="91" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="261" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a4abb07dfe37d2a35690896809574cd38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
        <definition>istream&amp; fc::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;o, double &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0b9856ea075272925b7e357b6f6fa47b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
        <definition>istream&amp; fc::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;o, float &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a976add01e9d0dabf0b0f2f9e0e96bd55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
        <definition>istream&amp; fc::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;o, int64_t &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a149cd6c925a0fc81e26bfc4412fdc942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
        <definition>istream&amp; fc::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;o, uint64_t &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>uint64_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a00a8b4f032fb21c6ab949ce747bf4973" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
        <definition>istream&amp; fc::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;o, int32_t &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>int32_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aebc6e1d032dc8c7039bf5b006dc9a254" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
        <definition>istream&amp; fc::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;o, uint32_t &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6073ca1d1dc155f2dd6973f3bc54c8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
        <definition>istream&amp; fc::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;o, int16_t &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>int16_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a95d82afd31e2d546ab75f3fbe61c6dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
        <definition>istream&amp; fc::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;o, uint16_t &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>uint16_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab7d9552df746fb3894473b3f8774e2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
        <definition>istream&amp; fc::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;o, int8_t &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>int8_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a90c80e1a768e22c5b61a5a1dd4c7993b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
        <definition>istream&amp; fc::operator&gt;&gt;</definition>
        <argsstring>(istream &amp;o, uint8_t &amp;v)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classfc_1_1istream" kindref="compound">istream</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>uint8_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/iostream.hpp" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9ef3ca3c3ff7dcf101d401272963ab7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const unsigned_int &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structfc_1_1unsigned__int" kindref="compound">unsigned_int</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/varint.hpp" line="46" column="1" bodyfile="libraries/fc/src/io/varint.cpp" bodystart="6" bodyend="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad41add077c51119cc29a0fbbda190344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, unsigned_int &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structfc_1_1unsigned__int" kindref="compound">unsigned_int</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/io/varint.hpp" line="47" column="1" bodyfile="libraries/fc/src/io/varint.cpp" bodystart="7" bodyend="7"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a23792ef9c38095ef15eba39a0777f928" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(log_level e, variant &amp;v, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type><ref refid="classfc_1_1log__level" kindref="compound">log_level</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/log/log_message.hpp" line="47" column="1" bodyfile="libraries/fc/src/log/log_message.cpp" bodystart="113" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab634958c40b14130d28f3d482b7e368f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;e, log_level &amp;ll, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1log__level" kindref="compound">log_level</ref> &amp;</type>
          <declname>ll</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/log/log_message.hpp" line="48" column="1" bodyfile="libraries/fc/src/log/log_message.cpp" bodystart="137" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5b8890b9a616b07413e95068b201f126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const log_context &amp;l, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1log__context" kindref="compound">log_context</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/log/log_message.hpp" line="85" column="1" bodyfile="libraries/fc/src/log/log_message.cpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ae5fb701132d0b0d7465ff83fcd094bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;l, log_context &amp;c, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1log__context" kindref="compound">log_context</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/log/log_message.hpp" line="86" column="1" bodyfile="libraries/fc/src/log/log_message.cpp" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ae71d291d978e780e5dd3bfe2c9d9dbfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const log_message &amp;l, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1log__message" kindref="compound">log_message</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/log/log_message.hpp" line="129" column="1" bodyfile="libraries/fc/src/log/log_message.cpp" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a641888fe08aa2def1ee8e7f711904924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;l, log_message &amp;c, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1log__message" kindref="compound">log_message</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/log/log_message.hpp" line="130" column="1" bodyfile="libraries/fc/src/log/log_message.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad64fa786e47f4f646fb607f1a039c680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::configure_logging</definition>
        <argsstring>(const fc::path &amp;log_config)</argsstring>
        <name>configure_logging</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>log_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/log/logger_config.hpp" line="42" column="1" bodyfile="libraries/fc/src/log/logger_config.cpp" bodystart="18" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ace3814ab7420ae02c6ed8876e7c5c570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::configure_logging</definition>
        <argsstring>(const logging_config &amp;l)</argsstring>
        <name>configure_logging</name>
        <param>
          <type>const <ref refid="structfc_1_1logging__config" kindref="compound">logging_config</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/log/logger_config.hpp" line="43" column="1" bodyfile="libraries/fc/src/log/logger_config.cpp" bodystart="22" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad94888140f80dbd0456deaa36667db8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const ip::endpoint &amp;var, variant &amp;vo, uint32_t _max_depth=2)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">ip::endpoint</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_max_depth</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="75" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1abdb577ea13437722067a272cc325d8dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, ip::endpoint &amp;vo, uint32_t _max_depth=2)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">ip::endpoint</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_max_depth</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="76" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a2bbf51cd4cae9ee4ff90c49e8a330434" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const ip::address &amp;var, variant &amp;vo, uint32_t _max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1address" kindref="compound">ip::address</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="78" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1afb7ce5bbe889b17afed4b1dccc923a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, ip::address &amp;vo, uint32_t _max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1ip_1_1address" kindref="compound">ip::address</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>_max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/ip.hpp" line="79" column="1" bodyfile="libraries/fc/src/network/ip.cpp" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac36ba63a95bd4188a3fad366fc8b8104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &gt;</type>
        <definition>std::vector&lt; fc::ip::endpoint &gt; fc::resolve</definition>
        <argsstring>(const std::string &amp;host, uint16_t port)</argsstring>
        <name>resolve</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/resolve.hpp" line="6" column="1" bodyfile="libraries/fc/src/network/resolve.cpp" bodystart="7" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aba5c6702ca140b2499a083aeea6830e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const url &amp;u, fc::variant &amp;v, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1url" kindref="compound">url</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/url.hpp" line="57" column="1" bodyfile="libraries/fc/src/network/url.cpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a64856a79f8489d1865ab1cfb8527c1ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;v, url &amp;u, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1url" kindref="compound">url</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/network/url.hpp" line="58" column="1" bodyfile="libraries/fc/src/network/url.cpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a502c84013067df84967aefc8a3adad0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::assert_optional</definition>
        <argsstring>(bool is_valid)</argsstring>
        <name>assert_optional</name>
        <param>
          <type>bool</type>
          <declname>is_valid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/optional.hpp" line="11" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="290" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a7c6b8e843dc3df1c07026ef017de30de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const optional&lt; T &gt; &amp;left, const optional&lt; T &gt; &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/optional.hpp" line="245" column="1" bodyfile="libraries/fc/include/fc/optional.hpp" bodystart="245" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ade470f35e3b94eec40c2c77e8c724ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const optional&lt; T &gt; &amp;left, const U &amp;u)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/optional.hpp" line="249" column="1" bodyfile="libraries/fc/include/fc/optional.hpp" bodystart="249" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8c032350dd4129ac8c3534712105a098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const optional&lt; T &gt; &amp;left, const optional&lt; T &gt; &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/optional.hpp" line="253" column="1" bodyfile="libraries/fc/include/fc/optional.hpp" bodystart="253" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a95149a471d15fff2da7f523d1b2e26fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const optional&lt; T &gt; &amp;left, const U &amp;u)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/optional.hpp" line="257" column="1" bodyfile="libraries/fc/include/fc/optional.hpp" bodystart="257" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a15ddfb2333159740ba27ec878229ec90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t fc::popcount</definition>
        <argsstring>(uint64_t v)</argsstring>
        <name>popcount</name>
        <param>
          <type>uint64_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/popcount.hpp" line="35" column="1" bodyfile="libraries/fc/src/popcount.cpp" bodystart="31" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8c194193a99133171624d8358cf86346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t fc::popcount</definition>
        <argsstring>(const fc::uint128_t &amp;v)</argsstring>
        <name>popcount</name>
        <param>
          <type>const fc::uint128_t &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/popcount.hpp" line="38" column="1" bodyfile="libraries/fc/src/popcount.cpp" bodystart="48" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a68077fb0265729efb10412aa4261628c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::throw_bad_enum_cast</definition>
        <argsstring>(int64_t i, const char *e)</argsstring>
        <name>throw_bad_enum_cast</name>
        <param>
          <type>int64_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="179" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="277" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad235d09561c970aa9a8de9d5b75bd487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::throw_bad_enum_cast</definition>
        <argsstring>(const char *k, const char *e)</argsstring>
        <name>throw_bad_enum_cast</name>
        <param>
          <type>const char *</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/reflect.hpp" line="180" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="283" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a33626b1fed8aa81e60dda03c2b69ea2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const T &amp;o, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const T &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/variant.hpp" line="8" column="1" bodyfile="libraries/fc/include/fc/reflect/variant.hpp" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6bfc4f6e15bd7551d853dcf8f5fef6df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, T &amp;o, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/reflect/variant.hpp" line="10" column="1" bodyfile="libraries/fc/include/fc/reflect/variant.hpp" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5b0327526feaf964512d20b8be2274f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T fc::wait</definition>
        <argsstring>(boost::signals2::signal&lt; void(T)&gt; &amp;sig, const microseconds &amp;timeout_us=microseconds::maximum())</argsstring>
        <name>wait</name>
        <param>
          <type>boost::signals2::signal&lt; void(T)&gt; &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <declname>timeout_us</declname>
          <defval><ref refid="classfc_1_1microseconds_1a83490e326e43e94a2b9f2d23b5645455" kindref="member">microseconds::maximum</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/signals.hpp" line="38" column="1" bodyfile="libraries/fc/include/fc/signals.hpp" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a7d1fe3f6fac3ad2e80a822f38878bcad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::wait</definition>
        <argsstring>(boost::signals2::signal&lt; void()&gt; &amp;sig, const microseconds &amp;timeout_us=microseconds::maximum())</argsstring>
        <name>wait</name>
        <param>
          <type>boost::signals2::signal&lt; void()&gt; &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <declname>timeout_us</declname>
          <defval><ref refid="classfc_1_1microseconds_1a83490e326e43e94a2b9f2d23b5645455" kindref="member">microseconds::maximum</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/signals.hpp" line="44" column="1" bodyfile="libraries/fc/include/fc/signals.hpp" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8773f344ca8b89f4fdbdc99c9dd769a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::print_stacktrace</definition>
        <argsstring>(std::ostream &amp;out)</argsstring>
        <name>print_stacktrace</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/stacktrace.hpp" line="13" column="1" bodyfile="libraries/fc/src/stacktrace.cpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a90e03292f425318486ca747e120f4ba8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::print_stacktrace_on_segfault</definition>
        <argsstring>()</argsstring>
        <name>print_stacktrace_on_segfault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/stacktrace.hpp" line="14" column="1" bodyfile="libraries/fc/src/stacktrace.cpp" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a21431afe41a7a5b2d3e05288347dd76d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const fc::static_variant&lt; T... &gt; &amp;s, fc::variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1static__variant" kindref="compound">fc::static_variant</ref>&lt; T... &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="352" column="1" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="352" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ae4f1c10e5715484f34d2f038d27ad1dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;v, fc::static_variant&lt; T... &gt; &amp;s, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1static__variant" kindref="compound">fc::static_variant</ref>&lt; T... &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/static_variant.hpp" line="360" column="1" bodyfile="libraries/fc/include/fc/static_variant.hpp" bodystart="360" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad7890dfee6afa71305ef41138d755523" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t fc::to_int64</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>to_int64</name>
        <param>
          <type>const std::string &amp;</type>
          <defname>i</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="10" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="34" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad05349723d18f721a1d3cf170c213666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t fc::to_uint64</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>to_uint64</name>
        <param>
          <type>const std::string &amp;</type>
          <defname>i</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="11" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="47" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0ff498ee18a19a7aae211b74948cc656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double fc::to_double</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>to_double</name>
        <param>
          <type>const std::string &amp;</type>
          <defname>i</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="12" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="60" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3607fb50b467964cea3b368f8b39cf73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::to_string</definition>
        <argsstring>(double)</argsstring>
        <name>to_string</name>
        <param>
          <type>double</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="13" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="73" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa4c97bb2bb2b88acc00144bbd457083f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::to_string</definition>
        <argsstring>(uint64_t)</argsstring>
        <name>to_string</name>
        <param>
          <type>uint64_t</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="14" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a300749ed98b5d1f27755037db1f66746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::to_string</definition>
        <argsstring>(int64_t)</argsstring>
        <name>to_string</name>
        <param>
          <type>int64_t</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="15" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1acb533d3ef2e014c75232ffcde193d9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::to_string</definition>
        <argsstring>(uint16_t)</argsstring>
        <name>to_string</name>
        <param>
          <type>uint16_t</type>
          <defname>d</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="16" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a46cafa3f625d3f454c2206d59a2e0729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::to_pretty_string</definition>
        <argsstring>(int64_t)</argsstring>
        <name>to_pretty_string</name>
        <param>
          <type>int64_t</type>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="17" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6dcb51183eabc6c29e6c474360e7085e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::to_string</definition>
        <argsstring>(int32_t v)</argsstring>
        <name>to_string</name>
        <param>
          <type>int32_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="18" column="1" bodyfile="libraries/fc/include/fc/string.hpp" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa271606e6bc47913131bccc3c4f188b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::to_string</definition>
        <argsstring>(uint32_t v)</argsstring>
        <name>to_string</name>
        <param>
          <type>uint32_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="19" column="1" bodyfile="libraries/fc/include/fc/string.hpp" bodystart="19" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa2e5e2038b2bec1baa2c8ecae46d2e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::format_string</definition>
        <argsstring>(const std::string &amp;, const variant_object &amp;, uint32_t max_object_depth=200)</argsstring>
        <name>format_string</name>
        <param>
          <type>const std::string &amp;</type>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> &amp;</type>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_object_depth</declname>
          <defval>200</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="26" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aff6d001e51847f83b853e9901022c391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::trim</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>trim</name>
        <param>
          <type>const std::string &amp;</type>
          <defname>s</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="27" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a4881f12c48e57c2a4294a489114aaccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::to_lower</definition>
        <argsstring>(const std::string &amp;)</argsstring>
        <name>to_lower</name>
        <param>
          <type>const std::string &amp;</type>
          <defname>s</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="28" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="98" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa2b3e86f5465c64d8496958a2f892e43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string fc::trim_and_normalize_spaces</definition>
        <argsstring>(const string &amp;s)</argsstring>
        <name>trim_and_normalize_spaces</name>
        <param>
          <type>const string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="29" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="104" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6d4cd120a6598fd5ad35037cfd732b2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t fc::parse_size</definition>
        <argsstring>(const string &amp;s)</argsstring>
        <name>parse_size</name>
        <param>
          <type>const string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parses a size including an optional multiplicative suffix.</para><para>M -&gt; 1024*1024 bytes MB -&gt; 1000*1000 bytes MiB -&gt; 1024*1024 bytes</para><para>The &apos;M&apos; may be any of KMGTPEZY (upper or lower case) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/string.hpp" line="31" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="121" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a95c689bb719860cd7c9d058bc3e8f80f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fc::do_parallel</definition>
        <argsstring>(Functor &amp;&amp;f, const char *desc FC_TASK_NAME_DEFAULT_ARG) -&gt; fc::future&lt; decltype(f())&gt;</argsstring>
        <name>do_parallel</name>
        <param>
          <type>Functor &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const char *desc</type>
          <declname>FC_TASK_NAME_DEFAULT_ARG</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calls function <computeroutput>f</computeroutput> in a separate thread and returns a future that can be used to wait on the result.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation to perform </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/parallel.hpp" line="97" column="1" bodyfile="libraries/fc/include/fc/thread/parallel.hpp" bodystart="97" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3a48cafb982a1e516977ed4ce71bea36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::yield</definition>
        <argsstring>()</argsstring>
        <name>yield</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Yields to other ready tasks before returning. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="197" column="1" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="365" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aafec5a7ed98de32b63b7dc9cb0a586e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::usleep</definition>
        <argsstring>(const microseconds &amp;u)</argsstring>
        <name>usleep</name>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Yields to other ready tasks for u microseconds. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="202" column="1" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="368" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab0d93099911be8b6234183cf96558daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::sleep_until</definition>
        <argsstring>(const time_point &amp;tp)</argsstring>
        <name>sleep_until</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Yields until the specified time in the future. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="207" column="1" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="371" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a34b3d9ea08d7699bfd7428caeec12cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::exec</definition>
        <argsstring>()</argsstring>
        <name>exec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enters the main loop processing tasks until quit() is called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="212" column="1" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="375" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a49b106a86353c2a6d8fe566aa7c3eeda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T1</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int fc::wait_any</definition>
        <argsstring>(const fc::future&lt; T1 &gt; &amp;f1, const fc::future&lt; T2 &gt; &amp;f2, const microseconds timeout_us=microseconds::maximum())</argsstring>
        <name>wait_any</name>
        <param>
          <type>const <ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; T1 &gt; &amp;</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1future" kindref="compound">fc::future</ref>&lt; T2 &gt; &amp;</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref></type>
          <declname>timeout_us</declname>
          <defval><ref refid="classfc_1_1microseconds_1a83490e326e43e94a2b9f2d23b5645455" kindref="member">microseconds::maximum</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait until either f1 or f2 is ready.</para><para><simplesect kind="return"><para>0 if f1 is ready, 1 if f2 is ready or throw on error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="220" column="1" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac74d420c9d624fae4739262fba19b32f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fc::wait_any</definition>
        <argsstring>(std::vector&lt; promise_base::ptr &gt; &amp;&amp;v, const microseconds &amp;timeout_us=microseconds::maximum())</argsstring>
        <name>wait_any</name>
        <param>
          <type>std::vector&lt; <ref refid="classfc_1_1promise__base_1a981f5f6eb5de005018991933ca06580d" kindref="member">promise_base::ptr</ref> &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref> &amp;</type>
          <declname>timeout_us</declname>
          <defval><ref refid="classfc_1_1microseconds_1a83490e326e43e94a2b9f2d23b5645455" kindref="member">microseconds::maximum</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="223" column="1" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="380" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a634f75af65f0315c57f911fbb845b3b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fc::wait_any_until</definition>
        <argsstring>(std::vector&lt; promise_base::ptr &gt; &amp;&amp;v, const time_point &amp;tp)</argsstring>
        <name>wait_any_until</name>
        <param>
          <type>std::vector&lt; <ref refid="classfc_1_1promise__base_1a981f5f6eb5de005018991933ca06580d" kindref="member">promise_base::ptr</ref> &gt; &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>tp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="224" column="1" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a009206175c2cd7ef2c0fde6c4ae061b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fc::async</definition>
        <argsstring>(Functor &amp;&amp;f, const char *desc FC_TASK_NAME_DEFAULT_ARG, priority prio=priority()) -&gt; fc::future&lt; decltype(f())&gt;</argsstring>
        <name>async</name>
        <param>
          <type>Functor &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const char *desc</type>
          <declname>FC_TASK_NAME_DEFAULT_ARG</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1priority" kindref="compound">priority</ref></type>
          <declname>prio</declname>
          <defval><ref refid="classfc_1_1priority" kindref="compound">priority</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="227" column="1" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="227" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a2b1d2230b4cabfe826b8e037e31a6d58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fc::schedule</definition>
        <argsstring>(Functor &amp;&amp;f, const fc::time_point &amp;t, const char *desc FC_TASK_NAME_DEFAULT_ARG, priority prio=priority()) -&gt; fc::future&lt; decltype(f())&gt;</argsstring>
        <name>schedule</name>
        <param>
          <type>Functor &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">fc::time_point</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const char *desc</type>
          <declname>FC_TASK_NAME_DEFAULT_ARG</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1priority" kindref="compound">priority</ref></type>
          <declname>prio</declname>
          <defval><ref refid="classfc_1_1priority" kindref="compound">priority</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="231" column="1" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="231" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a03eff46e65a0e3aa3fadb1e949ef18ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Functor</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fc::sync_call</definition>
        <argsstring>(thread *t, Functor &amp;&amp;f, const char *desc FC_TASK_NAME_DEFAULT_ARG, priority prio=priority()) -&gt; decltype(f())</argsstring>
        <name>sync_call</name>
        <param>
          <type><ref refid="classfc_1_1thread" kindref="compound">thread</ref> *</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Functor &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const char *desc</type>
          <declname>FC_TASK_NAME_DEFAULT_ARG</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1priority" kindref="compound">priority</ref></type>
          <declname>prio</declname>
          <defval><ref refid="classfc_1_1priority" kindref="compound">priority</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call f() in thread t and block the current thread until it returns.</para><para>If t is null, simply execute f in the current thread. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/thread/thread.hpp" line="241" column="1" bodyfile="libraries/fc/include/fc/thread/thread.hpp" bodystart="241" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6447b06684687d72d89cedbe704b1807" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds fc::seconds</definition>
        <argsstring>(int64_t s)</argsstring>
        <name>seconds</name>
        <param>
          <type>int64_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="34" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="34" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1adf330adc63ec4112134b4c202e60b266" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds fc::milliseconds</definition>
        <argsstring>(int64_t s)</argsstring>
        <name>milliseconds</name>
        <param>
          <type>int64_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="35" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad5b1acda09cd46291dbbbe2e8c31aba3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds fc::minutes</definition>
        <argsstring>(int64_t m)</argsstring>
        <name>minutes</name>
        <param>
          <type>int64_t</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="36" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1af741a355115c21ab9359c63578ac20c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds fc::hours</definition>
        <argsstring>(int64_t h)</argsstring>
        <name>hours</name>
        <param>
          <type>int64_t</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="37" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1af2754cadb384a916df4b0c5664f4585e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfc_1_1microseconds" kindref="compound">microseconds</ref></type>
        <definition>microseconds fc::days</definition>
        <argsstring>(int64_t d)</argsstring>
        <name>days</name>
        <param>
          <type>int64_t</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="38" column="1" bodyfile="libraries/fc/include/fc/time.hpp" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab10bf2b8fd5011906332cb282086916a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const fc::microseconds &amp;, fc::variant &amp;, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1microseconds" kindref="compound">fc::microseconds</ref> &amp;</type>
          <defname>input_microseconds</defname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <defname>output_variant</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="41" column="1" bodyfile="libraries/fc/src/time.cpp" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5553f22dbe1d833c98fa96c4967d15d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;, fc::microseconds &amp;, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <defname>input_variant</defname>
        </param>
        <param>
          <type><ref refid="classfc_1_1microseconds" kindref="compound">fc::microseconds</ref> &amp;</type>
          <defname>output_microseconds</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="42" column="1" bodyfile="libraries/fc/src/time.cpp" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac76f6058bf7a33bb07ab1a147eeb24bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string fc::get_approximate_relative_time_string</definition>
        <argsstring>(const time_point_sec &amp;event_time, const time_point_sec &amp;relative_to_time=fc::time_point::now(), const std::string &amp;ago=&quot; ago&quot;)</argsstring>
        <name>get_approximate_relative_time_string</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>relative_to_time</declname>
          <defval><ref refid="classfc_1_1time__point_1aa164ff1268a16d4b32afcff181f6100e" kindref="member">fc::time_point::now</ref>()</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ago</declname>
          <defval>&quot; ago&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return a human-readable approximate time, relative to now() e.g., &quot;4 hours ago&quot;, &quot;2 months ago&quot;, etc. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="130" column="1" bodyfile="libraries/fc/src/time.cpp" bodystart="70" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1af05f153d4d325d4186d87d2fab5ae3dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>string fc::get_approximate_relative_time_string</definition>
        <argsstring>(const time_point &amp;event_time, const time_point &amp;relative_to_time=fc::time_point::now(), const std::string &amp;ago=&quot; ago&quot;)</argsstring>
        <name>get_approximate_relative_time_string</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>event_time</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>relative_to_time</declname>
          <defval><ref refid="classfc_1_1time__point_1aa164ff1268a16d4b32afcff181f6100e" kindref="member">fc::time_point::now</ref>()</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ago</declname>
          <defval>&quot; ago&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/time.hpp" line="133" column="1" bodyfile="libraries/fc/src/time.cpp" bodystart="130" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a96e3ca4e413687364f320cc45e94adf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t fc::uint128_lo64</definition>
        <argsstring>(const uint128_t &amp;x)</argsstring>
        <name>uint128_lo64</name>
        <param>
          <type>const uint128_t &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/uint128.hpp" line="54" column="1" bodyfile="libraries/fc/include/fc/uint128.hpp" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac6064cfe8865259995c46e605f998992" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t fc::uint128_hi64</definition>
        <argsstring>(const uint128_t &amp;x)</argsstring>
        <name>uint128_hi64</name>
        <param>
          <type>const uint128_t &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/uint128.hpp" line="57" column="1" bodyfile="libraries/fc/include/fc/uint128.hpp" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6e3c787a9d146f27eeb7753ad3aa764f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint128_t</type>
        <definition>uint128_t fc::uint128</definition>
        <argsstring>(const uint64_t hi, const uint64_t lo)</argsstring>
        <name>uint128</name>
        <param>
          <type>const uint64_t</type>
          <declname>hi</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>lo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/uint128.hpp" line="67" column="1" bodyfile="libraries/fc/include/fc/uint128.hpp" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1af47cedbc58d10fc7e0e290d29a183197" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::prune_invalid_utf8</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>prune_invalid_utf8</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/utf8.hpp" line="11" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aaf4d63bbbb10975bd89ddfd661733f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::is_utf8</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>is_utf8</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/utf8.hpp" line="13" column="1" bodyfile="libraries/fc/src/utf8.cpp" bodystart="14" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a440b80d7907f475f1380eb76f054ed05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::decodeUtf8</definition>
        <argsstring>(const std::string &amp;input, std::wstring *storage)</argsstring>
        <name>decodeUtf8</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::wstring *</type>
          <declname>storage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decodes utf 8 std::string into unicode string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>- input string to be decoded and stored in &apos;storage&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>storage</parametername>
</parameternamelist>
<parameterdescription>
<para>- buffer for converted text. Cannot be nullptr. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/utf8.hpp" line="19" column="1" bodyfile="libraries/fc/src/utf8.cpp" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a929646b3a8b7feb5688409ddef1897c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::encodeUtf8</definition>
        <argsstring>(const std::wstring &amp;input, std::string *storage)</argsstring>
        <name>encodeUtf8</name>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>storage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Encodes given wide (unicode) string into UTF-8 representation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>- input string to be encoded and stored in &apos;storage&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>storage</parametername>
</parameternamelist>
<parameterdescription>
<para>- buffer for converted text. Cannot be nullptr. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/utf8.hpp" line="25" column="1" bodyfile="libraries/fc/src/utf8.cpp" bodystart="42" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ae14293312305e5f4a85a28877e6771d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::throw_assertion_failure</definition>
        <argsstring>(const std::string &amp;message)</argsstring>
        <name>throw_assertion_failure</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="28" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="308" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1ae651009f79f65bd5a5ac549f206eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const blob &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structfc_1_1blob" kindref="compound">blob</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a57d9bb3271bb6f5d2bc5ea148db122cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, blob &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structfc_1_1blob" kindref="compound">blob</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa348ac419347638558205eaed6d24a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const boost::multi_index_container&lt; T, Args... &gt; &amp;s, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const boost::multi_index_container&lt; T, Args... &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="64" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="642" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a2696b340d994739c3b686cd87f1188a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, boost::multi_index_container&lt; T, Args... &gt; &amp;s, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>boost::multi_index_container&lt; T, Args... &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="65" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="653" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1abf1fa187b2ee25e63a3670ec69ffa425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const safe&lt; T &gt; &amp;s, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structfc_1_1safe" kindref="compound">safe</ref>&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="67" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="632" bodyend="634"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab51d45bfddb80493e46aabb6de5136bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, safe&lt; T &gt; &amp;s, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="structfc_1_1safe" kindref="compound">safe</ref>&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="68" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="637" bodyend="639"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac15e34371f2fbd82e4c0625439eadaa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::unique_ptr&lt; T &gt; &amp;s, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::unique_ptr&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="69" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="608" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a60e7be022a476c67c1db6b1ea408efff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, std::unique_ptr&lt; T &gt; &amp;s, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; T &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="70" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="619" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0e2f424311954cb1f5fab2bfff726ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const uint8_t &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const uint8_t &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="75" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="597" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aab20c2edd052ce872dc99e76c82ea8c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, uint8_t &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint8_t &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="76" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="599" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a703f231216ea29a0257da1b0e1b64a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const int8_t &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const int8_t &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="77" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="601" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac493d09a44cc28da7db6d504fd3bfde2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, int8_t &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int8_t &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="78" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="603" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3e8712b01d6e1552da3e150edd660a4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const uint16_t &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const uint16_t &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="80" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="605" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad6f209272348d3b20b9eac26cd5f2bd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, uint16_t &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint16_t &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="81" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="607" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8b34dc8ccc8da433895f97ac559844ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const int16_t &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const int16_t &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="82" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="609" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa3b4fc324c6d408ccb8ee92ff2412465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, int16_t &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int16_t &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="83" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="611" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ae80a95d93b7ff6153a0f5e6f2d61d75a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const uint32_t &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="85" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="613" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0fdbfd60bae275d6737fb540b1ac96ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, uint32_t &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint32_t &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="87" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="614" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1c1ef600c6f1a823670e37840c3bc067" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const int32_t &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const int32_t &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="88" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="619" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aaa668d663547eb0a1abc6a5bf3176b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, int32_t &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int32_t &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="90" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="620" bodyend="623"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1afd199947b84d558dc4634acbcb5121ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const uint64_t &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const uint64_t &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="92" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="631" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6c741b3d3a74979b376b375711f206f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const int64_t &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const int64_t &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="93" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="625" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a169044fff369eda77ffae8e6b68d6c56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const bool &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const bool &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="95" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="637" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0c1c5031dc6ec0087dd8e4daf6fb2fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const variant_object &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="97" column="1" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a02e13d6f0940f07e8a08eeb36324e9c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, variant_object &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="98" column="1" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="170" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa425cd4631b37bdf496a4c05c4d517e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const mutable_variant_object &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="99" column="1" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="400" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa6f0d5eb38add31e4714f605b3f77d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, mutable_variant_object &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1mutable__variant__object" kindref="compound">mutable_variant_object</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="100" column="1" bodyfile="libraries/fc/src/variant_object.cpp" bodystart="405" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3b1322f40242c777653acabf884c09fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::vector&lt; char &gt; &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::vector&lt; char &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="101" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="663" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a60a09429ee8a7d68cfad571e32f09b22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, std::vector&lt; char &gt; &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>std::vector&lt; char &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="102" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="669" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab7f788ef21cc7c55eae36baa4a6568f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::unordered_map&lt; K, T &gt; &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::unordered_map&lt; K, T &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="105" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="428" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a328af1d8726abe7079daa4392a0851e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, std::unordered_map&lt; K, T &gt; &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>std::unordered_map&lt; K, T &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="107" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="438" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8cd68138ee48d4a33f54ed826d4f7c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::map&lt; K, T &gt; &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::map&lt; K, T &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="115" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="448" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a7cef1ca0f7d7923505e8d4d4454e24c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, std::map&lt; K, T &gt; &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>std::map&lt; K, T &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="117" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="458" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6a331caf03f3025d4c0b32cd20879ffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::multimap&lt; K, T &gt; &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::multimap&lt; K, T &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="119" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="468" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6d9775e3a4106529a619cd07acf0a1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename K</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, std::multimap&lt; K, T &gt; &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>std::multimap&lt; K, T &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="121" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="478" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1afee011adaecc4182ea8aa3d36ca3064e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::unordered_set&lt; T &gt; &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::unordered_set&lt; T &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="125" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="406" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac8c06827ce0fea0c3b6e8d7fca4331ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, std::unordered_set&lt; T &gt; &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>std::unordered_set&lt; T &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="127" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="416" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a06774477b9cfa049118a1e385f5c23f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::deque&lt; T &gt; &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::deque&lt; T &gt; &amp;</type>
          <declname>var</declname>
          <defname>src</defname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
          <defname>v</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="130" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="522" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa2577fc9e708da98c426d785845b1765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, std::deque&lt; T &gt; &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>std::deque&lt; T &gt; &amp;</type>
          <declname>vo</declname>
          <defname>dest</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="132" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="510" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a295042e3f3129c4147d2b3de1ddb7db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::set&lt; T &gt; &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="140" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="489" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1af3677c85765162d983430e6f9066dcf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, std::set&lt; T &gt; &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>std::set&lt; T &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="142" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="499" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a81873edcfa8b0f332b352887a798ce6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const time_point &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="144" column="1" bodyfile="libraries/fc/src/time.cpp" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1ad6d31d4d8785631324ef2afc929e8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, time_point &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point" kindref="compound">time_point</ref> &amp;</type>
          <declname>vo</declname>
          <defname>t</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="145" column="1" bodyfile="libraries/fc/src/time.cpp" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a03efec3fc7678e11114a6a3dff4ebc69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const time_point_sec &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="147" column="1" bodyfile="libraries/fc/src/time.cpp" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8d961843cca55106b07f898e1d0bd8db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, time_point_sec &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1time__point__sec" kindref="compound">time_point_sec</ref> &amp;</type>
          <declname>vo</declname>
          <defname>t</defname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="148" column="1" bodyfile="libraries/fc/src/time.cpp" bodystart="65" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a4be85b51154e6ac1299bf7dfa8a5addf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const uint128_t &amp;var, variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const uint128_t &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="153" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="680" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3918de377ff4917a11dd050747329680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, uint128_t &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint128_t &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="154" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="692" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6a50cc04e1e2dc7df9adf360a350105f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(long long int s, variant &amp;v, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>long long int</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="159" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="707" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6d16efe4fa81dccab6ebf1c04c08525f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(unsigned long long int s, variant &amp;v, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>unsigned long long int</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="160" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="708" bodyend="708"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a4f6f7a5574ff8f975e321e47c9bd06d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::string &amp;s, variant &amp;v, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="162" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="653" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab1a34c1ffbade174c2b95767b146e69c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::shared_ptr&lt; T &gt; &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::shared_ptr&lt; T &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="165" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="586" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ade12436d52baa9275f222a5990be82b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, std::shared_ptr&lt; T &gt; &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; T &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="168" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="597" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5d82aa93656a927e222849915ca24ff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::pair&lt; A, B &gt; &amp;t, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::pair&lt; A, B &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="172" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="558" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa8ad6364a08c1da14ed7a98c7b4edf87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename A</type>
          </param>
          <param>
            <type>typename B</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, std::pair&lt; A, B &gt; &amp;p, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::pair&lt; A, B &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="174" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="567" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8730ceb7289a799c0e8a96c845a217fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>boost::endian::order</type>
            <declname>O</declname>
            <defname>O</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>boost::endian::align</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const boost::endian::endian_buffer&lt; O, T, N, A &gt; &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const boost::endian::endian_buffer&lt; O, T, N, A &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="177" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa58746700a583bee52f09483b5f91ec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>boost::endian::order</type>
            <declname>O</declname>
            <defname>O</defname>
          </param>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>boost::endian::align</type>
            <declname>A</declname>
            <defname>A</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, boost::endian::endian_buffer&lt; O, T, N, A &gt; &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>boost::endian::endian_buffer&lt; O, T, N, A &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="182" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="182" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa116dd7840b48f44139adba3ec2271fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, std::string &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac89bdd91fdde0e8b9a000ff1eefd2edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, variants &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">variants</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="381" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="590" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a826e4eea86149cca7903d39c32d191ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="382" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="595" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aad53955647a68f1db2a1b8ede4b9ce7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, int64_t &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="384" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="626" bodyend="629"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad5db96a9895b23feb6879282c8a3d78f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, uint64_t &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint64_t &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="386" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="632" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a145cddd0bc31d5df2695bbda89cd597b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, bool &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="388" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="638" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aaf7cb40fb04b480e2416ea5ba3304820" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, double &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="390" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="643" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aebfb1876efe5c598c626c534d3535d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, float &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="392" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="648" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a28e2040a65c5535fa005306df0e1f676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, optional&lt; T &gt; &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="395" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="395" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa073ef8ab2efb3094927d5b63ce5a02b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, std::vector&lt; T &gt; &amp;dest, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="534" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="534" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a279eb7dc9be332ed364b59403644fc37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;t, variant &amp;v, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="546" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="546" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a905837f4f6bfd90b39bff2a810d06be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::array&lt; char, N &gt; &amp;bi, variant &amp;v, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::array&lt; char, N &gt; &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="663" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="663" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa8fb62845e67432c2b2a92db0402d681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, std::array&lt; char, N &gt; &amp;bi, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::array&lt; char, N &gt; &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="668" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="668" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa12f926d9f072129f66086cc32dcfa06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const std::array&lt; unsigned char, N &gt; &amp;bi, variant &amp;v, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const std::array&lt; unsigned char, N &gt; &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="678" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="678" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa4fc261885faed5fbf9ab52d3561194f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;v, std::array&lt; unsigned char, N &gt; &amp;bi, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::array&lt; unsigned char, N &gt; &amp;</type>
          <declname>bi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="683" column="1" bodyfile="libraries/fc/include/fc/variant.hpp" bodystart="683" bodyend="690"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a573d0283cdd5cb5aa73c1ccfceb3ee67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
        <definition>variant fc::operator+</definition>
        <argsstring>(const variant &amp;a, const variant &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="692" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="762" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8cffd06cc69639a249cab55891258202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
        <definition>variant fc::operator-</definition>
        <argsstring>(const variant &amp;a, const variant &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="693" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="789" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a28fc00805d3b5a37ec087e1cc57efad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
        <definition>variant fc::operator*</definition>
        <argsstring>(const variant &amp;a, const variant &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="694" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="815" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a45f776afd54730a8a72f654bebba9ed2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
        <definition>variant fc::operator/</definition>
        <argsstring>(const variant &amp;a, const variant &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="695" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="840" bodyend="864"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6986200fa1ea6119f583712389398fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const variant &amp;a, const variant &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="696" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="711" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a686b21f3c83514ee5c5f48a3acde6a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const variant &amp;a, const variant &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="697" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="720" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1abe33f4037ae25d2a601d8cee0084e59b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&lt;</definition>
        <argsstring>(const variant &amp;a, const variant &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="698" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="734" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8835227e8e4599c2adefa7bbe56ba112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;</definition>
        <argsstring>(const variant &amp;a, const variant &amp;b)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="699" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="743" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a55ae7a9524bda543c6d7aed0bf7794ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator!</definition>
        <argsstring>(const variant &amp;a)</argsstring>
        <name>operator!</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/include/fc/variant.hpp" line="700" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="729" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5f5b76828ed8ccfcf4d99d5c36743dd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; fc::base64_chars</definition>
        <argsstring>()</argsstring>
        <name>base64_chars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/base64.cpp" line="32" column="1" bodyfile="libraries/fc/src/crypto/base64.cpp" bodystart="32" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a80ff900eb157d8c3a84b70eb9930832c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool fc::is_base64</definition>
        <argsstring>(unsigned char c)</argsstring>
        <name>is_base64</name>
        <param>
          <type>unsigned char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/base64.cpp" line="41" column="1" bodyfile="libraries/fc/src/crypto/base64.cpp" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a89dde6c9898232d6215157a784567407" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t fc::Hash128to64</definition>
        <argsstring>(const uint128_t &amp;x)</argsstring>
        <name>Hash128to64</name>
        <param>
          <type>const uint128_t &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="52" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="52" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a82d0dde36a656221d2380326033f9499" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t fc::Fetch64</definition>
        <argsstring>(const char *p)</argsstring>
        <name>Fetch64</name>
        <param>
          <type>const char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="117" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1f5f6f677f11f074adfb0545ba3a1e9c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t fc::Fetch32</definition>
        <argsstring>(const char *p)</argsstring>
        <name>Fetch32</name>
        <param>
          <type>const char *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="123" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="123" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5c5eaa16d3f5a9ae133f84ea4319ebec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t fc::fmix</definition>
        <argsstring>(uint32_t h)</argsstring>
        <name>fmix</name>
        <param>
          <type>uint32_t</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="139" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="139" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad0ec5e1792545db2387ba3dd9354fbf1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t fc::Rotate32</definition>
        <argsstring>(uint32_t val, int shift)</argsstring>
        <name>Rotate32</name>
        <param>
          <type>uint32_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="149" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3b9e6b992dbc5b093003b3a42f3ed297" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t fc::Mur</definition>
        <argsstring>(uint32_t a, uint32_t h)</argsstring>
        <name>Mur</name>
        <param>
          <type>uint32_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="157" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="157" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a732660567183a302273ec16378dee840" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t fc::Hash32Len13to24</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>Hash32Len13to24</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="167" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="167" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aafa22d86acac9558b3477f2959bfcf93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t fc::Hash32Len0to4</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>Hash32Len0to4</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="179" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="179" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a21313cfb25dcae68d868487b636d962c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t fc::Hash32Len5to12</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>Hash32Len5to12</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="190" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="190" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a4042dc24b3ad3b261ca28bd3cbec831e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t fc::Rotate</definition>
        <argsstring>(uint64_t val, int shift)</argsstring>
        <name>Rotate</name>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="269" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="269" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1adb9951f9b5d681bc1a2749f7d1c0123b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t fc::ShiftMix</definition>
        <argsstring>(uint64_t val)</argsstring>
        <name>ShiftMix</name>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="274" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="274" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa3a255844f0fb821d34e6065b00e2709" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t fc::HashLen16</definition>
        <argsstring>(uint64_t u, uint64_t v)</argsstring>
        <name>HashLen16</name>
        <param>
          <type>uint64_t</type>
          <declname>u</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="278" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="278" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3e1c96387012dbfd42f75423c96d6345" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t fc::HashLen16</definition>
        <argsstring>(uint64_t u, uint64_t v, uint64_t mul)</argsstring>
        <name>HashLen16</name>
        <param>
          <type>uint64_t</type>
          <declname>u</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>mul</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="282" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="282" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a510dbe2f1e7f98e5ab3531925e8a728b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t fc::HashLen0to16</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>HashLen0to16</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="292" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="292" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1abcc7ec859b534cd954f358deecca23aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t fc::HashLen17to32</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>HashLen17to32</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="319" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="319" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ae2320e6328b4022699c46e56bbc3eb9e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; uint64_t, uint64_t &gt;</type>
        <definition>static pair&lt;uint64_t, uint64_t&gt; fc::WeakHashLen32WithSeeds</definition>
        <argsstring>(uint64_t w, uint64_t x, uint64_t y, uint64_t z, uint64_t a, uint64_t b)</argsstring>
        <name>WeakHashLen32WithSeeds</name>
        <param>
          <type>uint64_t</type>
          <declname>w</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>z</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="331" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="331" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a88da1a9f92cebcc0c4fdf5d4d20410d6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>pair&lt; uint64_t, uint64_t &gt;</type>
        <definition>static pair&lt;uint64_t, uint64_t&gt; fc::WeakHashLen32WithSeeds</definition>
        <argsstring>(const char *s, uint64_t a, uint64_t b)</argsstring>
        <name>WeakHashLen32WithSeeds</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="343" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="343" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9783aa5203b60b18839bfdff50bbd2f1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t fc::HashLen33to64</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>HashLen33to64</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="354" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="354" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6fb9528abfb48c9a560628178b82c5d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t fc::CityHash64WithSeeds</definition>
        <argsstring>(const char *s, size_t len, uint64_t seed0, uint64_t seed1)</argsstring>
        <name>CityHash64WithSeeds</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed0</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="413" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="413" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9348344b9161cd90a125089fd3ecbc94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t fc::CityHash64WithSeed</definition>
        <argsstring>(const char *s, size_t len, uint64_t seed)</argsstring>
        <name>CityHash64WithSeed</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="418" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="418" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad12fa72720deaa320a5f8a38ed882424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint128_t</type>
        <definition>uint128_t fc::CityMurmur</definition>
        <argsstring>(const char *s, size_t len, uint128_t seed)</argsstring>
        <name>CityMurmur</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint128_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="424" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="424" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a92099082379f9da0f3094dac0f1bb016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint128_t</type>
        <definition>uint128_t fc::CityHash128WithSeed</definition>
        <argsstring>(const char *s, size_t len, uint128_t seed)</argsstring>
        <name>CityHash128WithSeed</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint128_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="454" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="454" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a813012b2d40e17c0d5c504abb11e7f6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint128_t</type>
        <definition>uint128_t fc::city_hash128</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>city_hash128</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="516" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="516" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac2a095cf72279050ad3779feb33de62d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fc::CityHashCrc256Long</definition>
        <argsstring>(const char *s, size_t len, uint32_t seed, uint64_t *result)</argsstring>
        <name>CityHashCrc256Long</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="527" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="527" bodyend="612"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a04096678c98b75aa76bb59433d4783c7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fc::CityHashCrc256Short</definition>
        <argsstring>(const char *s, size_t len, uint64_t *result)</argsstring>
        <name>CityHashCrc256Short</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="615" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="615" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9200b7569059e39ccd3bb854a6184c28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::CityHashCrc256</definition>
        <argsstring>(const char *s, size_t len, uint64_t *result)</argsstring>
        <name>CityHashCrc256</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="622" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="622" bodyend="628"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a2e5f09a9637e2651e4bad4ed2ca50b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>array&lt; uint64_t, 4 &gt;</type>
        <definition>array&lt;uint64_t,4&gt; fc::city_hash_crc_256</definition>
        <argsstring>(const char *s, size_t len)</argsstring>
        <name>city_hash_crc_256</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="630" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="630" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab2294f19afc27db0482780fccc59ebc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint128_t</type>
        <definition>uint128_t fc::CityHashCrc128WithSeed</definition>
        <argsstring>(const char *s, size_t len, uint128_t seed)</argsstring>
        <name>CityHashCrc128WithSeed</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>uint128_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/city.cpp" line="637" column="1" bodyfile="libraries/fc/src/crypto/city.cpp" bodystart="637" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a8d305129958293494b464449fec5097e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool fc::validate</definition>
        <argsstring>(const ssl_dh &amp;dh, bool &amp;valid)</argsstring>
        <name>validate</name>
        <param>
          <type>const ssl_dh &amp;</type>
          <declname>dh</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>valid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/dh.cpp" line="7" column="1" bodyfile="libraries/fc/src/crypto/dh.cpp" bodystart="7" bodyend="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a003f62754e8e00c5bab91c8559350367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1hash160" kindref="compound">hash160</ref></type>
        <definition>hash160 fc::operator&lt;&lt;</definition>
        <argsstring>(const hash160 &amp;h1, uint32_t i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/hash160.cpp" line="94" column="1" bodyfile="libraries/fc/src/crypto/hash160.cpp" bodystart="94" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab3e021351b1f68fab061254300bf8cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1hash160" kindref="compound">hash160</ref></type>
        <definition>hash160 fc::operator^</definition>
        <argsstring>(const hash160 &amp;h1, const hash160 &amp;h2)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/hash160.cpp" line="100" column="1" bodyfile="libraries/fc/src/crypto/hash160.cpp" bodystart="100" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aeff12fa2d32bd94632eb65170539a6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;=</definition>
        <argsstring>(const hash160 &amp;h1, const hash160 &amp;h2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/hash160.cpp" line="110" column="1" bodyfile="libraries/fc/src/crypto/hash160.cpp" bodystart="110" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a13df170d0861f521e88214414de7014f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;</definition>
        <argsstring>(const hash160 &amp;h1, const hash160 &amp;h2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/hash160.cpp" line="114" column="1" bodyfile="libraries/fc/src/crypto/hash160.cpp" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad34c040a7089451fe7fb536e6e5398aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&lt;</definition>
        <argsstring>(const hash160 &amp;h1, const hash160 &amp;h2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/hash160.cpp" line="118" column="1" bodyfile="libraries/fc/src/crypto/hash160.cpp" bodystart="118" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1af66b486974b69a035aa9f6077d992461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const hash160 &amp;h1, const hash160 &amp;h2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/hash160.cpp" line="122" column="1" bodyfile="libraries/fc/src/crypto/hash160.cpp" bodystart="122" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa9fc82c4f9ab6a80e5dabf6bc96eee60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const hash160 &amp;h1, const hash160 &amp;h2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1hash160" kindref="compound">hash160</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/hash160.cpp" line="126" column="1" bodyfile="libraries/fc/src/crypto/hash160.cpp" bodystart="126" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a74582b5edb01722eff9ec17ea0ae91f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref></type>
        <definition>ripemd160 fc::operator&lt;&lt;</definition>
        <argsstring>(const ripemd160 &amp;h1, uint32_t i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/ripemd160.cpp" line="72" column="1" bodyfile="libraries/fc/src/crypto/ripemd160.cpp" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a72105a082e4d36aec32eabb08f0078c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref></type>
        <definition>ripemd160 fc::operator^</definition>
        <argsstring>(const ripemd160 &amp;h1, const ripemd160 &amp;h2)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/ripemd160.cpp" line="77" column="1" bodyfile="libraries/fc/src/crypto/ripemd160.cpp" bodystart="77" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a44cb6f8090bfb03c7bb9b7c65b2d2f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;=</definition>
        <argsstring>(const ripemd160 &amp;h1, const ripemd160 &amp;h2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/ripemd160.cpp" line="86" column="1" bodyfile="libraries/fc/src/crypto/ripemd160.cpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9da91214e83a3e77d9c5de959918d1da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;</definition>
        <argsstring>(const ripemd160 &amp;h1, const ripemd160 &amp;h2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/ripemd160.cpp" line="89" column="1" bodyfile="libraries/fc/src/crypto/ripemd160.cpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1abfcd487e59126b37465a6d02ec614b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&lt;</definition>
        <argsstring>(const ripemd160 &amp;h1, const ripemd160 &amp;h2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/ripemd160.cpp" line="92" column="1" bodyfile="libraries/fc/src/crypto/ripemd160.cpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad99d30ff93d0c2baa248be0dd99ec08d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const ripemd160 &amp;h1, const ripemd160 &amp;h2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/ripemd160.cpp" line="95" column="1" bodyfile="libraries/fc/src/crypto/ripemd160.cpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac1884b8b64cd69fbc927de7270fc5058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const ripemd160 &amp;h1, const ripemd160 &amp;h2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1ripemd160" kindref="compound">ripemd160</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/ripemd160.cpp" line="98" column="1" bodyfile="libraries/fc/src/crypto/ripemd160.cpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9a69da97dd19b58a4c838a5266521ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha1" kindref="compound">sha1</ref></type>
        <definition>sha1 fc::operator&lt;&lt;</definition>
        <argsstring>(const sha1 &amp;h1, uint32_t i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha1.cpp" line="56" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a85ec8d03a744d4e1b7b62abc92e0f503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha1" kindref="compound">sha1</ref></type>
        <definition>sha1 fc::operator^</definition>
        <argsstring>(const sha1 &amp;h1, const sha1 &amp;h2)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha1.cpp" line="61" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="61" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a647ef584f66cbb8d32380214f6db38ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;=</definition>
        <argsstring>(const sha1 &amp;h1, const sha1 &amp;h2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha1.cpp" line="70" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a7f41676b2521157847fe830f24a17dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;</definition>
        <argsstring>(const sha1 &amp;h1, const sha1 &amp;h2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha1.cpp" line="73" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a2aacf2eaaf7fd3f5faa5b165ae73938e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&lt;</definition>
        <argsstring>(const sha1 &amp;h1, const sha1 &amp;h2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha1.cpp" line="76" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a4c17c5dcd9d564e0be9f8797cbd8be8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const sha1 &amp;h1, const sha1 &amp;h2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha1.cpp" line="79" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a2555f5494e8cd3436d1b96f441b32be6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const sha1 &amp;h1, const sha1 &amp;h2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha1" kindref="compound">sha1</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha1.cpp" line="82" column="1" bodyfile="libraries/fc/src/crypto/sha1.cpp" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1abf089cbc95af0b413505950191aeecfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha224" kindref="compound">sha224</ref></type>
        <definition>sha224 fc::operator&lt;&lt;</definition>
        <argsstring>(const sha224 &amp;h1, uint32_t i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha224.cpp" line="55" column="1" bodyfile="libraries/fc/src/crypto/sha224.cpp" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa0bfdc9e52221382628c9269f0422634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha224" kindref="compound">sha224</ref></type>
        <definition>sha224 fc::operator^</definition>
        <argsstring>(const sha224 &amp;h1, const sha224 &amp;h2)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha224.cpp" line="60" column="1" bodyfile="libraries/fc/src/crypto/sha224.cpp" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a7055a53f618d6cfe7bcbfa60c90659d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;=</definition>
        <argsstring>(const sha224 &amp;h1, const sha224 &amp;h2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha224.cpp" line="66" column="1" bodyfile="libraries/fc/src/crypto/sha224.cpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a64cf582b0e40a8ea5da2c119153e764c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;</definition>
        <argsstring>(const sha224 &amp;h1, const sha224 &amp;h2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha224.cpp" line="69" column="1" bodyfile="libraries/fc/src/crypto/sha224.cpp" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a90ec6138cd762e5361b5a9ae1c0ca640" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&lt;</definition>
        <argsstring>(const sha224 &amp;h1, const sha224 &amp;h2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha224.cpp" line="72" column="1" bodyfile="libraries/fc/src/crypto/sha224.cpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3f7b87ebda51c3d16203194f210c2393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const sha224 &amp;h1, const sha224 &amp;h2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha224.cpp" line="75" column="1" bodyfile="libraries/fc/src/crypto/sha224.cpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad4f28d26b216831862367c3640ac55e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const sha224 &amp;h1, const sha224 &amp;h2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha224" kindref="compound">sha224</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha224.cpp" line="78" column="1" bodyfile="libraries/fc/src/crypto/sha224.cpp" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aafd568153f7f75e6c1b8cecfecfc0098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha256" kindref="compound">sha256</ref></type>
        <definition>sha256 fc::operator&lt;&lt;</definition>
        <argsstring>(const sha256 &amp;h1, uint32_t i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha256.cpp" line="68" column="1" bodyfile="libraries/fc/src/crypto/sha256.cpp" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0b9cfdae8dae0fd249859f8d27dc4f31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha256" kindref="compound">sha256</ref></type>
        <definition>sha256 fc::operator&gt;&gt;</definition>
        <argsstring>(const sha256 &amp;h1, uint32_t i)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha256.cpp" line="73" column="1" bodyfile="libraries/fc/src/crypto/sha256.cpp" bodystart="73" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1c22d07c88b6a0eec2fed5c3900d9814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha256" kindref="compound">sha256</ref></type>
        <definition>sha256 fc::operator^</definition>
        <argsstring>(const sha256 &amp;h1, const sha256 &amp;h2)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha256.cpp" line="78" column="1" bodyfile="libraries/fc/src/crypto/sha256.cpp" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1afbce60a55dbb5ef0464fbaaa253098be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;=</definition>
        <argsstring>(const sha256 &amp;h1, const sha256 &amp;h2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha256.cpp" line="86" column="1" bodyfile="libraries/fc/src/crypto/sha256.cpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a329d84c3b5f2aae3c68e789f51b09731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;</definition>
        <argsstring>(const sha256 &amp;h1, const sha256 &amp;h2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha256.cpp" line="89" column="1" bodyfile="libraries/fc/src/crypto/sha256.cpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a41242f9973aac71ee8e2d3aef02fdc35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&lt;</definition>
        <argsstring>(const sha256 &amp;h1, const sha256 &amp;h2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha256.cpp" line="92" column="1" bodyfile="libraries/fc/src/crypto/sha256.cpp" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a41d70be3c8eee37bc1badb39b68eb318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const sha256 &amp;h1, const sha256 &amp;h2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha256.cpp" line="95" column="1" bodyfile="libraries/fc/src/crypto/sha256.cpp" bodystart="95" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1fa11dd951042dabda9066d741fae577" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const sha256 &amp;h1, const sha256 &amp;h2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha256" kindref="compound">sha256</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha256.cpp" line="98" column="1" bodyfile="libraries/fc/src/crypto/sha256.cpp" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac497c8e902d9157a216662219a4f6d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha512" kindref="compound">sha512</ref></type>
        <definition>sha512 fc::operator&lt;&lt;</definition>
        <argsstring>(const sha512 &amp;h1, uint32_t i)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha512.cpp" line="55" column="1" bodyfile="libraries/fc/src/crypto/sha512.cpp" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1add49b3172e59af1ec04cf06783cb4a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1sha512" kindref="compound">sha512</ref></type>
        <definition>sha512 fc::operator^</definition>
        <argsstring>(const sha512 &amp;h1, const sha512 &amp;h2)</argsstring>
        <name>operator^</name>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha512.cpp" line="60" column="1" bodyfile="libraries/fc/src/crypto/sha512.cpp" bodystart="60" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac8dfe396d0ee959ecfe5878528781374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;=</definition>
        <argsstring>(const sha512 &amp;h1, const sha512 &amp;h2)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha512.cpp" line="72" column="1" bodyfile="libraries/fc/src/crypto/sha512.cpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a350d717b6babc72bb4dd937734ebde8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&gt;</definition>
        <argsstring>(const sha512 &amp;h1, const sha512 &amp;h2)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha512.cpp" line="75" column="1" bodyfile="libraries/fc/src/crypto/sha512.cpp" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a70ca5dd4e7e81f3e7fa6e964bb2efcee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&lt;</definition>
        <argsstring>(const sha512 &amp;h1, const sha512 &amp;h2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha512.cpp" line="78" column="1" bodyfile="libraries/fc/src/crypto/sha512.cpp" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a01d4179873c5bd7f231fd1baf2a0bfe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const sha512 &amp;h1, const sha512 &amp;h2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha512.cpp" line="81" column="1" bodyfile="libraries/fc/src/crypto/sha512.cpp" bodystart="81" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a98bad035c9028a4cf1523e9a3a327335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const sha512 &amp;h1, const sha512 &amp;h2)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h1</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1sha512" kindref="compound">sha512</ref> &amp;</type>
          <declname>h2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/crypto/sha512.cpp" line="84" column="1" bodyfile="libraries/fc/src/crypto/sha512.cpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1abc3ad94519f551fafce0619755c0937b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>fc::FC_IMPLEMENT_EXCEPTION</definition>
        <argsstring>(method_not_found_exception, method_not_found_exception_code,&quot;Method Not Found&quot;)</argsstring>
        <name>FC_IMPLEMENT_EXCEPTION</name>
        <param>
          <type>method_not_found_exception</type>
        </param>
        <param>
          <type><ref refid="namespacefc_1ab52b42f18c442a260897c74c66c3d35ca3716ecbe70314a83c0f39fc0b07d4ce0" kindref="member">method_not_found_exception_code</ref></type>
        </param>
        <param>
          <type>&quot;Method Not Found&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/exception.cpp" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3dfcc06566081f07db5677dd267b90f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>() file_not_found_exception() parse_error_exception() invalid_arg_exception() invalid_operation_exception() key_not_found_exception() bad_cast_exception() out_of_range_exception() canceled_exception() assert_exception() eof_exception() unknown_host_exception() null_optional() aes_exception() overflow_exception()</type>
        <definition>() file_not_found_exception() parse_error_exception() invalid_arg_exception() invalid_operation_exception() key_not_found_exception() bad_cast_exception() out_of_range_exception() canceled_exception() assert_exception() eof_exception() unknown_host_exception() null_optional() aes_exception() overflow_exception() fc::underflow_exception</definition>
        <argsstring>(divide_by_zero_exception)) namespace detail</argsstring>
        <name>underflow_exception</name>
        <param>
          <type>divide_by_zero_exception</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/exception.cpp" line="18" column="1" bodyfile="libraries/fc/src/exception.cpp" bodystart="46" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a2450bb19b2a45352f86130699b835672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&lt;</definition>
        <argsstring>(const fc::path &amp;l, const fc::path &amp;r)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/filesystem.cpp" line="75" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac659259ecdcc185b38a01acbd4749aad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const fc::path &amp;l, const fc::path &amp;r)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/filesystem.cpp" line="76" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6ac1600a45a010b76941dcfb6d6c7d79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const fc::path &amp;l, const fc::path &amp;r)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/filesystem.cpp" line="77" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="77" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a624adb190a96ac38b54d4eed4f6e42e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1path" kindref="compound">path</ref></type>
        <definition>path fc::operator/</definition>
        <argsstring>(const fc::path &amp;p, const fc::path &amp;o)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1path" kindref="compound">fc::path</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/filesystem.cpp" line="83" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="83" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ae42d80da6bb25750019a5738fef8e016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const directory_iterator &amp;r, const directory_iterator &amp;l)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1directory__iterator" kindref="compound">directory_iterator</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1directory__iterator" kindref="compound">directory_iterator</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/filesystem.cpp" line="180" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad32f2fa0d0979a05754dc1759880c748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const directory_iterator &amp;r, const directory_iterator &amp;l)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1directory__iterator" kindref="compound">directory_iterator</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1directory__iterator" kindref="compound">directory_iterator</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/filesystem.cpp" line="183" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="183" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1adeb2fec49ce8bb1a1f0ca6401b2d0257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const recursive_directory_iterator &amp;r, const recursive_directory_iterator &amp;l)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1recursive__directory__iterator" kindref="compound">recursive_directory_iterator</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1recursive__directory__iterator" kindref="compound">recursive_directory_iterator</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/filesystem.cpp" line="201" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="201" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3013e4b45b5a0430cb0a692b05ac8a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const recursive_directory_iterator &amp;r, const recursive_directory_iterator &amp;l)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1recursive__directory__iterator" kindref="compound">recursive_directory_iterator</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1recursive__directory__iterator" kindref="compound">recursive_directory_iterator</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/filesystem.cpp" line="204" column="1" bodyfile="libraries/fc/src/filesystem.cpp" bodystart="204" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0b7ec70a01644ac533acdf9aeaaccde0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfc_1_1cin__buffer" kindref="compound">cin_buffer</ref> &amp;</type>
        <definition>cin_buffer&amp; fc::get_cin_buffer</definition>
        <argsstring>()</argsstring>
        <name>get_cin_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/iostream.cpp" line="70" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a842d01d9cbd8babc6df83e06b974810f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1thread" kindref="compound">fc::thread</ref> &amp;</type>
        <definition>fc::thread&amp; fc::cin_thread</definition>
        <argsstring>()</argsstring>
        <name>cin_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/iostream.cpp" line="76" column="1" bodyfile="libraries/fc/src/io/iostream.cpp" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aea26b5fef1951af5f8c449fb5c2b9ef3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>json::parse_type</type>
            <declname>parser_type</declname>
            <defname>parser_type</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
        <definition>variant fc::variant_from_stream</definition>
        <argsstring>(T &amp;in, uint32_t max_depth)</argsstring>
        <name>variant_from_stream</name>
        <param>
          <type>T &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="18" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="413" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a14df350f499648f14f6314a87800f3c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>char</type>
        <definition>char fc::parseEscape</definition>
        <argsstring>(T &amp;in)</argsstring>
        <name>parseEscape</name>
        <param>
          <type>T &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="19" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="47" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3a42171e4b78e7fb2dfab0eaf45dc762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string fc::stringFromStream</definition>
        <argsstring>(T &amp;in)</argsstring>
        <name>stringFromStream</name>
        <param>
          <type>T &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="20" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="97" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa2bf8a06a5740fdc38da162192bb1f5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool fc::skip_white_space</definition>
        <argsstring>(T &amp;in)</argsstring>
        <name>skip_white_space</name>
        <param>
          <type>T &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="21" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="76" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a233581b53962f2a0925100f06e89bfc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string fc::stringFromToken</definition>
        <argsstring>(T &amp;in)</argsstring>
        <name>stringFromToken</name>
        <param>
          <type>T &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="22" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="134" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad883adeb627df72b496116b4d7899082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref></type>
        <definition>variant_object fc::objectFromStreamBase</definition>
        <argsstring>(T &amp;in, std::function&lt; std::string(T &amp;)&gt; &amp;get_key, std::function&lt; variant(T &amp;)&gt; &amp;get_value)</argsstring>
        <name>objectFromStreamBase</name>
        <param>
          <type>T &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::function&lt; std::string(T &amp;)&gt; &amp;</type>
          <declname>get_key</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classfc_1_1variant" kindref="compound">variant</ref>(T &amp;)&gt; &amp;</type>
          <declname>get_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="23" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="179" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a853baf1524aff74fc7d3c9666af6c7bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>json::parse_type</type>
            <declname>parser_type</declname>
            <defname>parser_type</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref></type>
        <definition>variant_object fc::objectFromStream</definition>
        <argsstring>(T &amp;in, uint32_t max_depth)</argsstring>
        <name>objectFromStream</name>
        <param>
          <type>T &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="24" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="228" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a662993ff4dc4c54830321219078e2463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">variants</ref></type>
        <definition>variants fc::arrayFromStreamBase</definition>
        <argsstring>(T &amp;in, std::function&lt; variant(T &amp;)&gt; &amp;get_value)</argsstring>
        <name>arrayFromStreamBase</name>
        <param>
          <type>T &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classfc_1_1variant" kindref="compound">variant</ref>(T &amp;)&gt; &amp;</type>
          <declname>get_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="25" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="236" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab9c4cf7a7f9ed120510d9a692ff914b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>json::parse_type</type>
            <declname>parser_type</declname>
            <defname>parser_type</defname>
          </param>
        </templateparamlist>
        <type><ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">variants</ref></type>
        <definition>variants fc::arrayFromStream</definition>
        <argsstring>(T &amp;in, uint32_t max_depth)</argsstring>
        <name>arrayFromStream</name>
        <param>
          <type>T &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="26" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="266" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1a45bd4f160e97bde0e5460fd2984da6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>json::parse_type</type>
            <declname>parser_type</declname>
            <defname>parser_type</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
        <definition>variant fc::number_from_stream</definition>
        <argsstring>(T &amp;in)</argsstring>
        <name>number_from_stream</name>
        <param>
          <type>T &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="27" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="273" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ab330b9b42588c2bf0021cf177ee49ca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref></type>
        <definition>variant fc::token_from_stream</definition>
        <argsstring>(T &amp;in)</argsstring>
        <name>token_from_stream</name>
        <param>
          <type>T &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="28" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="341" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a043a14aea56a26b1f6618b5ddf802d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::escape_string</definition>
        <argsstring>(const string &amp;str, ostream &amp;os)</argsstring>
        <name>escape_string</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1ostream" kindref="compound">ostream</ref> &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert &apos;&apos;, &apos;<emphasis></emphasis>&apos;, &apos;<linebreak/>
&apos;, &apos;\&apos; and &apos;&quot;&apos; to &quot;\t\a\n\\\&quot;"</para><para>All other characters are printed as UTF8. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="29" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="482" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a257ea438d3c89a92818a6b4832d0780c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_stream</definition>
        <argsstring>(T &amp;os, const variants &amp;a, json::output_formatting format, uint32_t max_depth)</argsstring>
        <name>to_stream</name>
        <param>
          <type>T &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="namespacefc_1a2e5e6bdb302dfb79e684336f3fbbd8bc" kindref="member">variants</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">json::output_formatting</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="30" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="557" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a2a8071804c22d07f56e9f9b0b535739e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_stream</definition>
        <argsstring>(T &amp;os, const variant_object &amp;o, json::output_formatting format, uint32_t max_depth)</argsstring>
        <name>to_stream</name>
        <param>
          <type>T &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">json::output_formatting</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="31" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="572" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1617aac28859a64f2f0260cbeb93f86a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_stream</definition>
        <argsstring>(T &amp;os, const variant &amp;v, json::output_formatting format, uint32_t max_depth)</argsstring>
        <name>to_stream</name>
        <param>
          <type>T &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1json_1afbd7971f1c3f78682333330895f02e5d" kindref="member">json::output_formatting</ref></type>
          <declname>format</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="32" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="590" bodyend="636"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ac11f6266177ed5f42e899ccc37550181" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string fc::pretty_print</definition>
        <argsstring>(const std::string &amp;v, uint8_t indent)</argsstring>
        <name>pretty_print</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/io/json.cpp" line="33" column="1" bodyfile="libraries/fc/src/io/json.cpp" bodystart="646" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa05a6784c2988b4dde7ec3c427c5cc5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; std::string, <ref refid="classfc_1_1appender_1a092aa67bbf9a6dd77ff5eb0c349152ee" kindref="member">appender::ptr</ref> &gt; &amp;</type>
        <definition>std::unordered_map&lt; std::string, appender::ptr &gt; &amp; fc::get_appender_map</definition>
        <argsstring>()</argsstring>
        <name>get_appender_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/log/appender.cpp" line="17" column="1" bodyfile="libraries/fc/src/log/appender.cpp" bodystart="17" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a4cbbf3ab0cf9864b2902810d4c58040f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; std::string, <ref refid="classfc_1_1appender__factory_1a9f578b980991f50f7071f020e367908c" kindref="member">appender_factory::ptr</ref> &gt; &amp;</type>
        <definition>std::unordered_map&lt;std::string,appender_factory::ptr&gt;&amp; fc::get_appender_factory_map</definition>
        <argsstring>()</argsstring>
        <name>get_appender_factory_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/log/appender.cpp" line="21" column="1" bodyfile="libraries/fc/src/log/appender.cpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a96830563e9f8117218e8217400369ea2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* fc::get_console_color</definition>
        <argsstring>(console_appender::color::type t)</argsstring>
        <name>get_console_color</name>
        <param>
          <type><ref refid="structfc_1_1console__appender_1_1color_1ae3f964a317f52c91550bd98bb4e4402d" kindref="member">console_appender::color::type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/log/console_appender.cpp" line="71" column="1" bodyfile="libraries/fc/src/log/console_appender.cpp" bodystart="71" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a2c0da4383a0a0a67f11146990207dd07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::mutex &amp;</type>
        <definition>boost::mutex&amp; fc::log_mutex</definition>
        <argsstring>()</argsstring>
        <name>log_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/log/console_appender.cpp" line="86" column="1" bodyfile="libraries/fc/src/log/console_appender.cpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad7d80e6da16f59860ade9ac6dba434f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator==</definition>
        <argsstring>(const logger &amp;l, std::nullptr_t)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classfc_1_1logger" kindref="compound">logger</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/log/logger.cpp" line="57" column="1" bodyfile="libraries/fc/src/log/logger.cpp" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a48b0394b1a1460c9725e5a0279c6caeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator!=</definition>
        <argsstring>(const logger &amp;l, std::nullptr_t)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classfc_1_1logger" kindref="compound">logger</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/log/logger.cpp" line="58" column="1" bodyfile="libraries/fc/src/log/logger.cpp" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad421793956ee8d0fdd40b0f2167ca8a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unordered_map&lt; std::string, <ref refid="classfc_1_1logger" kindref="compound">logger</ref> &gt; &amp;</type>
        <definition>std::unordered_map&lt; std::string, logger &gt; &amp; fc::get_logger_map</definition>
        <argsstring>()</argsstring>
        <name>get_logger_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/log/logger.cpp" line="79" column="1" bodyfile="libraries/fc/src/log/logger.cpp" bodystart="79" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a3aadf2cdfd528bf4e267adceeae23fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::asio::ip::udp::endpoint</type>
        <definition>boost::asio::ip::udp::endpoint fc::to_asio_ep</definition>
        <argsstring>(const fc::ip::endpoint &amp;e)</argsstring>
        <name>to_asio_ep</name>
        <param>
          <type>const <ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref> &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/network/udp_socket.cpp" line="19" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="19" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1274fa23eda2fb56b04dbdfe60c4f597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1ip_1_1endpoint" kindref="compound">fc::ip::endpoint</ref></type>
        <definition>fc::ip::endpoint fc::to_fc_ep</definition>
        <argsstring>(const boost::asio::ip::udp::endpoint &amp;e)</argsstring>
        <name>to_fc_ep</name>
        <param>
          <type>const boost::asio::ip::udp::endpoint &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/network/udp_socket.cpp" line="22" column="1" bodyfile="libraries/fc/src/network/udp_socket.cpp" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a66f7e103ac60d310c75be32ca9eae7c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classfc_1_1detail_1_1url__impl" kindref="compound">detail::url_impl</ref> &gt;</type>
        <definition>std::shared_ptr&lt;detail::url_impl&gt; fc::get_null_url</definition>
        <argsstring>()</argsstring>
        <name>get_null_url</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/network/url.cpp" line="110" column="1" bodyfile="libraries/fc/src/network/url.cpp" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6f097181501635727805cd2bc2fae4a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string fc::format_string</definition>
        <argsstring>(const string &amp;format, const variant_object &amp;args, uint32_t max_object_depth)</argsstring>
        <name>format_string</name>
        <param>
          <type>const string &amp;</type>
          <declname>format</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant__object" kindref="compound">variant_object</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_object_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/string.cpp" line="196" column="1" bodyfile="libraries/fc/src/string.cpp" bodystart="196" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aaea67f79bcf6d1e00fc39f92c487b04c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfc_1_1context" kindref="compound">fc::context</ref> *</type>
        <definition>static fc::context* fc::get_tail</definition>
        <argsstring>(fc::context *list_head, fc::context *&amp;context_to_unblock)</argsstring>
        <name>get_tail</name>
        <param>
          <type><ref refid="structfc_1_1context" kindref="compound">fc::context</ref> *</type>
          <declname>list_head</declname>
        </param>
        <param>
          <type><ref refid="structfc_1_1context" kindref="compound">fc::context</ref> *&amp;</type>
          <declname>context_to_unblock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>last_context</parametername>
</parameternamelist>
<parameterdescription>
<para>- is set to the next context to get the lock (the next-to-last element of the list) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the last context (the one with the lock) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/thread/mutex.cpp" line="34" column="1" bodyfile="libraries/fc/src/thread/mutex.cpp" bodystart="34" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1ed74f187309ffc6917e26b0a43d6ba6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfc_1_1context" kindref="compound">fc::context</ref> *</type>
        <definition>static fc::context* fc::remove</definition>
        <argsstring>(fc::context *head, fc::context *target)</argsstring>
        <name>remove</name>
        <param>
          <type><ref refid="structfc_1_1context" kindref="compound">fc::context</ref> *</type>
          <declname>head</declname>
        </param>
        <param>
          <type><ref refid="structfc_1_1context" kindref="compound">fc::context</ref> *</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/thread/mutex.cpp" line="47" column="1" bodyfile="libraries/fc/src/thread/mutex.cpp" bodystart="47" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a6f33c648d42c63412d5f2b92e7a4837a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void fc::cleanup</definition>
        <argsstring>(fc::mutex &amp;m, fc::spin_yield_lock &amp;syl, fc::context *&amp;bl, fc::context *cc)</argsstring>
        <name>cleanup</name>
        <param>
          <type><ref refid="classfc_1_1mutex" kindref="compound">fc::mutex</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1spin__yield__lock" kindref="compound">fc::spin_yield_lock</ref> &amp;</type>
          <declname>syl</declname>
        </param>
        <param>
          <type><ref refid="structfc_1_1context" kindref="compound">fc::context</ref> *&amp;</type>
          <declname>bl</declname>
        </param>
        <param>
          <type><ref refid="structfc_1_1context" kindref="compound">fc::context</ref> *</type>
          <declname>cc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/thread/mutex.cpp" line="66" column="1" bodyfile="libraries/fc/src/thread/mutex.cpp" bodystart="66" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a54d9a1fc1290ac4a4a912df995df1a9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* fc::thread_name</definition>
        <argsstring>()</argsstring>
        <name>thread_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/thread/thread.cpp" line="58" column="1" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a93647bf3d3a6d4f3d346359eb6f1ff49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* fc::thread_ptr</definition>
        <argsstring>()</argsstring>
        <name>thread_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/thread/thread.cpp" line="61" column="1" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a576d6e68aa0a0f80f5381c1933d0633f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classfc_1_1thread" kindref="compound">thread</ref> *&amp;</type>
        <definition>thread*&amp; fc::current_thread</definition>
        <argsstring>()</argsstring>
        <name>current_thread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/thread/thread.cpp" line="65" column="1" bodyfile="libraries/fc/src/thread/thread.cpp" bodystart="65" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a277605d97b0c864adcaeffe611c4c0cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string fc::prune_invalid_utf8</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>prune_invalid_utf8</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/utf8.cpp" line="19" column="1" bodyfile="libraries/fc/src/utf8.cpp" bodystart="19" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a101ffbbefd2ddbb23eea290bbe9f87a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::set_variant_type</definition>
        <argsstring>(variant *v, variant::type_id t)</argsstring>
        <name>set_variant_type</name>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant_1a8e472a4f69eccec5336dde2646c69c5f" kindref="member">variant::type_id</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The TypeID is stored in the &apos;last byte&apos; of the variant. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/variant.cpp" line="24" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="24" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a22cfa8191c4a5d44133a80598d85e875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, string &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>string &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/variant.cpp" line="658" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="658" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a42cef2f92964d6db67357a06d7acccbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool fc::operator&lt;=</definition>
        <argsstring>(const variant &amp;a, const variant &amp;b)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/fc/src/variant.cpp" line="752" column="1" bodyfile="libraries/fc/src/variant.cpp" bodystart="752" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad11bf17bb1033f28ca5c558c1adf9dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::address &amp;var, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">graphene::protocol::address</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/address.cpp" line="104" column="1" bodyfile="libraries/protocol/address.cpp" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aeceb4cd05c4f09395d67cfda0808dbbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, graphene::protocol::address &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classgraphene_1_1protocol_1_1address" kindref="compound">graphene::protocol::address</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/address.cpp" line="108" column="1" bodyfile="libraries/protocol/address.cpp" bodystart="108" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a17b1a246660b5e23ed72d3e7ceef5701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::protocol::extension&lt; T &gt; &amp;value, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1extension" kindref="compound">graphene::protocol::extension</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/ext.hpp" line="166" column="1" bodyfile="libraries/protocol/include/graphene/protocol/ext.hpp" bodystart="166" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a9fc6d56d26b6f04c9b9ed80784e1fa43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::extension&lt; T &gt; &amp;value, fc::variant &amp;var, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1extension" kindref="compound">graphene::protocol::extension</ref>&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/ext.hpp" line="199" column="1" bodyfile="libraries/protocol/include/graphene/protocol/ext.hpp" bodystart="199" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5b6019f9cfab7d54d9700103d953841d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::db::object_id_type &amp;var, fc::variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">graphene::db::object_id_type</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="193" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5e53b4a48caca4d808323ce8ef0fa106" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::db::object_id_type &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id__type" kindref="compound">graphene::db::object_id_type</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="198" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="198" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a49dd4766f5ea1d4f5e30c9353f5ea813" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>SpaceID</declname>
            <defname>SpaceID</defname>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>TypeID</declname>
            <defname>TypeID</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::db::object_id&lt; SpaceID, TypeID &gt; &amp;var, fc::variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">graphene::db::object_id</ref>&lt; SpaceID, TypeID &gt; &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="215" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="215" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a1179cd3b9e7f1abe536d66aebfd124c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>uint8_t</type>
            <declname>SpaceID</declname>
            <defname>SpaceID</defname>
          </param>
          <param>
            <type>uint8_t</type>
            <declname>TypeID</declname>
            <defname>TypeID</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::db::object_id&lt; SpaceID, TypeID &gt; &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1db_1_1object__id" kindref="compound">graphene::db::object_id</ref>&lt; SpaceID, TypeID &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/object_id.hpp" line="220" column="1" bodyfile="libraries/protocol/include/graphene/protocol/object_id.hpp" bodystart="220" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a23903bea53c6f62acbbb28cb43b11333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::pts_address &amp;var, fc::variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">graphene::protocol::pts_address</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/pts_address.hpp" line="81" column="1" bodyfile="libraries/protocol/pts_address.cpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a0bbfe89b8857f333f3689d81f3f15b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::protocol::pts_address &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1pts__address" kindref="compound">graphene::protocol::pts_address</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/pts_address.hpp" line="82" column="1" bodyfile="libraries/protocol/pts_address.cpp" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a099c854b2ae216f51d33dd2aca7e6712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::public_key_type &amp;var, fc::variant &amp;vo, uint32_t max_depth=2)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">graphene::protocol::public_key_type</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="280" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1aa6059746b6bd2ea431fd22c9294e7cf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::protocol::public_key_type &amp;vo, uint32_t max_depth=2)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1public__key__type" kindref="compound">graphene::protocol::public_key_type</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="281" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5b658e1a375d1c5ebc142b9a03dff7fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, std::shared_ptr&lt; const graphene::protocol::fee_schedule &gt; &amp;vo, uint32_t max_depth=2)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="structgraphene_1_1protocol_1_1fee__schedule" kindref="compound">graphene::protocol::fee_schedule</ref> &gt; &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>2</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/types.hpp" line="292" column="1" bodyfile="libraries/protocol/types.cpp" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad8e730046e02542f010c48ebe8aa240a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const graphene::protocol::vote_id_type &amp;var, fc::variant &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="structgraphene_1_1protocol_1_1vote__id__type" kindref="compound">graphene::protocol::vote_id_type</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/vote.hpp" line="135" column="1" bodyfile="libraries/protocol/vote.cpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ace0cffd850de6ab0f8d6448a66dddb2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const fc::variant &amp;var, graphene::protocol::vote_id_type &amp;vo, uint32_t max_depth=1)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">fc::variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structgraphene_1_1protocol_1_1vote__id__type" kindref="compound">graphene::protocol::vote_id_type</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/protocol/include/graphene/protocol/vote.hpp" line="136" column="1" bodyfile="libraries/protocol/vote.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1a5c3f07e0187947e20a5ce2f97f9815f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::to_variant</definition>
        <argsstring>(const account_multi_index_type &amp;accts, variant &amp;vo, uint32_t max_depth)</argsstring>
        <name>to_variant</name>
        <param>
          <type>const <ref refid="namespacegraphene_1_1chain_1a2cb69664c48f3d41eb5ac8b6bc4847cc" kindref="member">account_multi_index_type</ref> &amp;</type>
          <declname>accts</declname>
        </param>
        <param>
          <type><ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="34" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1951" bodyend="1954"/>
      </memberdef>
      <memberdef kind="function" id="namespacefc_1ad381cfba18e8742b3ccab06107f55d4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fc::from_variant</definition>
        <argsstring>(const variant &amp;var, account_multi_index_type &amp;vo, uint32_t max_depth)</argsstring>
        <name>from_variant</name>
        <param>
          <type>const <ref refid="classfc_1_1variant" kindref="compound">variant</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="namespacegraphene_1_1chain_1a2cb69664c48f3d41eb5ac8b6bc4847cc" kindref="member">account_multi_index_type</ref> &amp;</type>
          <declname>vo</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>max_depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libraries/wallet/include/graphene/wallet/wallet.hpp" line="35" column="1" bodyfile="libraries/wallet/wallet.cpp" bodystart="1956" bodyend="1960"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This source adapted from <ulink url="https://github.com/kmicklas/variadic-static_variant">https://github.com/kmicklas/variadic-static_variant</ulink>. Now available at <ulink url="https://github.com/kmicklas/variadic-variant">https://github.com/kmicklas/variadic-variant</ulink>.</para><para>Copyright (C) 2013 Kenneth Micklas</para><para>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</para><para>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</para><para>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</para><para>Implemented with std::string for now. </para>    </detaileddescription>
    <location file="libraries/fc/include/fc/api.hpp" line="15" column="1"/>
  </compounddef>
</doxygen>
